@using Valour.Shared
@using Valour.Api.Items.Users
@using Valour.Api.Client
@using Valour.Client.Components.Utility
@using Valour.Client.Notifications
@using Valour.Client.Blazor.Layout
@using Valour.Client.Messages;
@using Valour.Shared.Items.Users
@using Microsoft.JSInterop
@using Microsoft.AspNetCore.Components.Routing
@using Blazored.LocalStorage
@using Blazored.Modal
@using Microsoft.AspNetCore.Components.Forms
@using Microsoft.AspNetCore.Components.Web
@using Microsoft.AspNetCore.Components.WebAssembly.Http

@inject HttpClient Http
@inject NavigationManager navManager
@inject ILocalStorageService storage
@inject IJSRuntime JS

@if (triedInitialLogin)
{
    <!-- Modal management -->
    <CascadingBlazoredModal Class='modal-main' HideHeader='true' HideCloseButton='true'>

        <!-- Main routing component -->
        <Router AppAssembly="@typeof(Valour.Client.Pages.Index).Assembly">
            <Found Context="routeData">
                <RouteView RouteData="@routeData" DefaultLayout="@typeof(MainLayout)" />
            </Found>
            <NotFound>
                <LayoutView Layout="@typeof(MainLayout)">
                    <p>Sorry, there's nothing at this address.</p>
                </LayoutView>
            </NotFound>
        </Router>
    </CascadingBlazoredModal>
}
else
{
    <Loading Subtext='Logging you in...'></Loading>
}

@if (!hideUpdate)
{
    <div class="update-footer">
        <p class="update-text">There is a new version of Valour available! Refresh to blast into new features! 🚀🚀🚀</p>
        <p style="display: inline-block" class="update-text">Current version:&nbsp;</p>
        <p style="color:red; display:inline-block" class="update-text">@(typeof(ISharedUser).Assembly.GetName().Version.ToString())</p>
        <p style="display: inline-block" class="update-text">&nbsp;|&nbsp;</p>
        <p style="display: inline-block" class="update-text">New version:&nbsp;</p>
        <p style="color:lawngreen; display:inline-block" class="update-text">@newVersion</p>

        <a class="btn-update" @onclick="OnClickUpdateOk">Ok</a>
    </div>
}


@code{

    string newVersion = "(Pinging server)";

    bool triedInitialLogin;

    bool hideUpdate = true;

    public async Task OnClickUpdateOk()
    {
        hideUpdate = true;
        StateHasChanged();

        //await JS.InvokeVoidAsync("location.reload");
    }

    // Runs when page is initialized
    protected override async Task OnInitializedAsync()
    {
        // Attempt to re-login the user from local token
        TaskResult<User> tokenResult = await ClientUserManager.TryInitializeWithLocalToken(storage, navManager);

        triedInitialLogin = true;

        await JS.InvokeAsync<object>(
          "blazorFuncs.registerClient",
          DotNetObjectReference.Create(this)
        );

        await JS.InvokeVoidAsync("SetVapidKey", VapidConfig.PublicKey);
        await JS.InvokeVoidAsync("enableNotifications");
    }

    [JSInvokable("NotifyPushSub")]
    public static async Task NotifyPushSub(string endpoint, string key, string auth)
    {
        Console.WriteLine(endpoint);
        Console.WriteLine(key);
        Console.WriteLine(auth);

        Api.Items.Notifications.NotificationSubscription not = new()
        {
            Endpoint = endpoint,
            Auth = auth,
            Not_Key = key,
            UserId = ValourClient.Self.Id
        };

        // Send subscription information to server
        var response = await ValourClient.PostAsyncWithResponse<TaskResult>($"Notification/SubmitSubscription", not);

        Console.WriteLine(response.Message);
    }

    [JSInvokable("OnServiceUpdateAvailable")]
    public async Task<string> AppUpdate()
    {
        // Get latest version number
        newVersion = (await ValourClient.GetAsync("api/version")).Data;

        Console.WriteLine("New version available");
        hideUpdate = false;
        StateHasChanged();
        return await Task.FromResult("Alerted client");
    }

    [JSInvokable("OnServiceUpdateUnavailable")]
    public static void AppNotUpdate()
    {
        Console.WriteLine("New version not available");
    }
}
