@inject ClientWindowManager windowManager

<!--
	Add dummy window so Jacob doesn't cry
-->

@if (windowManager.GetWindowCount() < 4)
{
	<div class="add-window-button" @onclick="AddWindow">
		<NewWindowComponent></NewWindowComponent>
	</div>
}

<div id="window-man" class="window-grid">

	@{
		var win0 = windowManager.GetWindow(0);
		var win1 = windowManager.GetWindow(1);
		var win2 = windowManager.GetWindow(2);
		var win3 = windowManager.GetWindow(3);

		Dictionary<string, object> win0_parameters = new()
			{
				{ "Window", win0 }
			};

		Dictionary<string, object> win1_parameters = new()
			{
				{ "Window", win1 }
			};

		Dictionary<string, object> win2_parameters = new()
			{
				{ "Window", win2 }
			};

		Dictionary<string, object> win3_parameters = new()
			{
				{ "Window", win3 }
			};


		if (windowManager.GetWindowCount() == 1)
		{
			<div id='window-0' class='main-window-full' @onclick='async () => await SetSelectedWindow(win0)'>
				<DynamicComponent @key='win0' Type='win0.GetComponentType()' Parameters='win0_parameters'></DynamicComponent>
			</div>
		}
		else if (windowManager.GetWindowCount() == 2)
		{
			<div id='window-0' class='main-window-full' @onclick='async () => await SetSelectedWindow(win0)'>
				<DynamicComponent @key='win0' Type='win0.GetComponentType()' Parameters='win0_parameters'></DynamicComponent>
			</div>
			<div id='window-1' class='main-window-full' @onclick='async () => await SetSelectedWindow(win1)'>
				<DynamicComponent @key='win1' Type='win1.GetComponentType()' Parameters='win1_parameters'></DynamicComponent>
			</div>
		}
		else if (windowManager.GetWindowCount() == 3)
		{
			<div id="window-col1" class="window-col">
				<div id='window-0' class='main-window-full' @onclick='async () => await SetSelectedWindow(win0)'>
					<DynamicComponent @key='win0' Type='win0.GetComponentType()' Parameters='win0_parameters'></DynamicComponent>
				</div>
			</div>
			<div id="window-col2" class="window-col">
				<div id='window-1' class='main-window' @onclick='async () => await SetSelectedWindow(win1)'>
					<DynamicComponent @key='win1' Type='win1.GetComponentType()' Parameters='win1_parameters'></DynamicComponent>
				</div>
				<div id='window-2' class='main-window' @onclick='async () => await SetSelectedWindow(win2)'>
					<DynamicComponent @key='win2' Type='win2.GetComponentType()' Parameters='win2_parameters'></DynamicComponent>
				</div>
			</div>
		}
		else if (windowManager.GetWindowCount() == 4)
		{
			<div id="window-col1" class="window-col">
				<div id='window-0' class='main-window' @onclick='async () => await SetSelectedWindow(win0)'>
					<DynamicComponent @key='win0' Type='win0.GetComponentType()' Parameters='win0_parameters'></DynamicComponent>
				</div>
				<div id='window-1' class='main-window' @onclick='async () => await SetSelectedWindow(win1)'>
					<DynamicComponent @key='win1' Type='win1.GetComponentType()' Parameters='win1_parameters'></DynamicComponent>
				</div>
			</div>
			<div id="window-col2" class="window-col">
				<div id='window-2' class='main-window' @onclick='async () => await SetSelectedWindow(win2)'>
					<DynamicComponent @key='win2' Type='win2.GetComponentType()' Parameters='win2_parameters'></DynamicComponent>
				</div>
				<div id='window-3' class='main-window' @onclick='async () => await SetSelectedWindow(win3)'>
					<DynamicComponent @key='win3' Type='win3.GetComponentType()' Parameters='win3_parameters'></DynamicComponent>
				</div>
			</div>
		}
	}
</div>

@code {

	protected override async Task OnInitializedAsync(){
		if (windowManager.GetWindowCount() == 0)
		{
			await windowManager.AddWindow(new HomeWindow(0));
		}
	}

	public void Refresh()
	{
		StateHasChanged();
	}

	private async Task AddWindow()
	{
		if (windowManager.GetWindowCount() == 4)
		{
			return;
		}

		await windowManager.AddWindow(new HomeWindow(windowManager.GetWindowCount() - 1));

		StateHasChanged();
	}

	public async Task SetSelectedWindow(ClientWindow window)
	{
		await windowManager.SetSelectedWindow(window);
	}
}