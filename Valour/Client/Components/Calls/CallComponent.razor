@inject IJSRuntime JsRuntime
@using Valour.Api.Extensions
@implements IAsyncDisposable

@if (ActiveChannel is not null)
{
    <div class="drag-area">
        <SmoothDraggable StartX="40" StartY="10" FromRight="@false">
            <div class="call-container">
                <h5>Active Call: @ActiveChannel.Name</h5>
                <br />
                
                @foreach (var peer in VisiblePeers)
                {
                    <MediaPeerComponent @key="@peer.PeerId" Parent="@this" Peer="@peer" />
                }
            </div>
        </SmoothDraggable>
    </div>
}



@code {

    public PlanetVoiceChannel ActiveChannel { get; set; } = null;
    
    public List<VisiblePeer> VisiblePeers { get; set; } = new List<VisiblePeer>();
    
    public List<MediaPeerComponent> PeerComponents { get; set; } = new List<MediaPeerComponent>();

    public static CallComponent Instance { get; private set; }
    
    private PlanetMember SelfMember { get; set; }

    protected override void OnInitialized()
    {
        Instance = this;
    }

    /// <summary>
    /// Module for calling Javascript functions
    /// </summary>
    private IJSInProcessObjectReference _jsModule;
    private string _clientId = "undefined";

    /// <summary>
    /// Dotnet object reference for use in Javascript
    /// </summary>
    private DotNetObjectReference<CallComponent> _thisRef;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            _thisRef = DotNetObjectReference.Create(this);
            _jsModule = await JsRuntime.InvokeAsync<IJSInProcessObjectReference>("import", "./_content/Valour.Client/Components/Calls/CallComponent.razor.js");
        }
    }

    async ValueTask IAsyncDisposable.DisposeAsync()
    {
        _thisRef.Dispose();
        await _jsModule.DisposeAsync();
    }

    public async Task NotifyPeerElementReady(MediaPeerComponent component)
    {
        if (!PeerComponents.Contains(component))
            PeerComponents.Add(component);
        
        // Hook up the peer's media track to the element
        if (!string.IsNullOrWhiteSpace(component.Peer.ConsumerId))
        {
            await HookPeerElementMediaTrack(component.ElementId, component.Peer.ConsumerId, component.Peer.Kind);
        }
    }

    /* Methods that invoke JS */

    public async Task Initialize(PlanetVoiceChannel channel)
    {
        if (ActiveChannel is not null)
        {
            // Cleanup old call
            PeerComponents.Clear();
        }

        ActiveChannel = channel;

        SelfMember = await PlanetMember.FindAsyncByUser(ValourClient.Self.Id, channel.PlanetId);

        _clientId = Guid.NewGuid().ToString() + ":" + SelfMember.Id.ToString();
        
        await _jsModule.InvokeVoidAsync("initialize", _thisRef, _clientId, channel.Id);
        
        await Join();
    }

    public async Task Join()
    {
        await _jsModule.InvokeVoidAsync("join");
        StateHasChanged();
    }

    public async Task JoinRoom() => 
        await _jsModule.InvokeVoidAsync("joinRoom");
    
    public async Task EnableMic() => 
        await _jsModule.InvokeVoidAsync("enableMic");

    public async Task<SendCameraStreamResponse> SendCameraStreams() =>
        await _jsModule.InvokeAsync<SendCameraStreamResponse>("sendCameraStreams");

    public async Task<StartScreenshareResponse> StartScreenshare() =>
        await _jsModule.InvokeAsync<StartScreenshareResponse>("startScreenshare");

    public async Task<StartCameraResponse> StartCamera() =>
        await _jsModule.InvokeAsync<StartCameraResponse>("startCamera");

    public async Task<CycleCameraResponse> CycleCamera() =>
        await _jsModule.InvokeAsync<CycleCameraResponse>("cycleCamera");

    public async Task<StopStreamsResponse> StopStreams() =>
        await _jsModule.InvokeAsync<StopStreamsResponse>("stopStreams");

    public async Task<LeaveRoomResponse> LeaveRoom() =>
        await _jsModule.InvokeAsync<LeaveRoomResponse>("leaveRoom");

    public async Task<SubscribeToTrackResponse> SubscribeToTrack(string peerId, string mediaTag) =>
        await _jsModule.InvokeAsync<SubscribeToTrackResponse>("subscribeToTrack", peerId, mediaTag);

    public async Task<UnsubscribeFromTrackResponse> UnsubscribeFromTrack(string peerId, string mediaTag) =>
        await _jsModule.InvokeAsync<UnsubscribeFromTrackResponse>("unsubscribeFromTrack", peerId, mediaTag);

    public async Task SetMicPaused(bool value) =>
        await _jsModule.InvokeVoidAsync("setMicPaused", value);

    public async Task SetCamPaused(bool value) =>
        await _jsModule.InvokeVoidAsync("setCamPaused", value);

    public async Task SetScreenPaused(bool value) =>
        await _jsModule.InvokeVoidAsync("setScreenPaused", value);

    public async Task SetScreenAudioPaused(bool value) =>
        await _jsModule.InvokeVoidAsync("setScreenAudioPaused", value);

    public async Task HookPeerElementMediaTrack(string elementId, string consumerId, string mediaTag) =>
        await _jsModule.InvokeVoidAsync("hookPeerElementMediaTrack", elementId, consumerId, mediaTag);


    /* Methods that are invoked by JS */


    /// <summary>
    /// This is called when the user closes the screen share through the browser
    /// UI rather than through Valour's
    /// </summary>
    [JSInvokable]
    public async Task OnScreenshareForceStop()
    {

    }

    [JSInvokable]
    public async Task OnUnexpectedLeaveRoom()
    {

    }

    [JSInvokable]
    public async Task OnSpeakerUpdate(ActiveSpeaker speaker)
    {
        if (ActiveChannel is null)
            return;
        
    }

    [JSInvokable]
    public async Task OnPeerListUpdate(Dictionary<string, MediaPeer> peers)
    {
        if (ActiveChannel is null)
            return;
        
    }

    [JSInvokable]
    public async Task OnReadyBuildPeer(string peerId, string mediaTag, string kind)
    {
        if (ActiveChannel is null)
            return;
        
    }

    [JSInvokable]
    public async Task NotifyNeedDisposePeer(string peerId, string mediaTag)
    {
        if (ActiveChannel is null)
            return;
        
    }

    [JSInvokable]
    public async Task NotifyPeerConsumer(string peerId, string consumerId, string type, string codec, string kind)
    {
        Console.WriteLine("dotnet: notify peer consumer");
        
        // Replace with more complete peer
        var old = VisiblePeers.FirstOrDefault(x => x.PeerId == peerId);
        if (old is null)
        {
            VisiblePeers.Add(new VisiblePeer()
            {
                PeerId = peerId,
                Kind = kind,
                Codec = codec,
                Type = type,
                ConsumerId = consumerId
            });
            
            StateHasChanged();
            return;
        }
        
        old.Kind = kind;
        old.Codec = codec;
        old.Type = type;
        old.ConsumerId = consumerId;
        
        // Notify peer component
        var component = PeerComponents.FirstOrDefault(x => x.Peer.PeerId == peerId);
        
        if (component is null)
            return;
        
        await component.NotifyPeerUpdated();
    }
    
    [JSInvokable]
    public async Task NotifyStartingPeers(VisiblePeer[] peers)
    {
        Console.WriteLine("dotnet: notify starting peers");
        
        if (ActiveChannel is null)
            return;
        
        VisiblePeers.Clear();
        VisiblePeers.AddRange(peers);
        StateHasChanged();
    }
}