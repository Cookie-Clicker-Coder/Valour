@if (Peer.Kind == "audio")
{
    <p>Audio: @Peer.PeerId</p>
    <audio class="peer-audio" playsinline autoplay id="@ElementId"></audio>
}
else if (Peer.Kind == "video")
{
    <div class="peer-video-wrapper">
        <video class="peer-video" playsinline autoplay id="@ElementId" />
        <div class='pause-button'>
            Pause
        </div>
    </div>
}
else{
    <p>Listening: @Peer.PeerId</p>
}

@code {
    [Parameter]
    public CallComponent Parent { get; set; }

    [Parameter]
    public VisiblePeer Peer { get; set; }

    public string ElementId { get; set; }

    private bool _canRender = false;

    protected override bool ShouldRender() =>
        _canRender;

    public void Refresh()
    {
        _canRender = true;
        StateHasChanged();
    }

    protected override void OnInitialized()
    {
        ElementId = Peer.PeerId;
        Peer.ElementId = ElementId;
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            Console.WriteLine("Peer component rendered. Notifying parent...");
            await Parent.NotifyPeerElementReady(this);
        }

        _canRender = false;
    }

    public async Task NotifyPeerUpdated()
    {
        Console.WriteLine($"Setting updated peer {Peer.PeerId}...");
        
        Console.WriteLine("Peer has track: " + (!string.IsNullOrWhiteSpace(Peer.Kind)));
        
        await Parent.NotifyPeerElementReady(this);
        
        StateHasChanged();
    }
}
