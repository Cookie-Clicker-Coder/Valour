@implements IDisposable

@inject WindowManager windowManager
@inject ClientCategoryManager categoryManager
@inject ChannelListManager listManager

<div class="category @(listManager.DragOverId == Category.Id ? "drag-over" : "")"
     draggable="true"
     depth="@(Depth % 6)"
     
     @onpointerdown:stopPropagation="true"
     @onpointerdown='async () => await ChannelListContextMenuComponent.SetSelectedItem(Category)'
     
     @onclick:stopPropagation="true"
     @onclick="OnClick"
     
     @ondrop:stopPropagation="true"
     @ondrop="async () => await listManager.OnItemDropOnCategory(this)"
     
     @ondragstart:stopPropagation="true"
     @ondragstart="() => listManager.OnItemStartDragInCategory(Category, ParentCategory)"
     
     @ondragenter:stopPropagation="true"
     @ondragenter="@OnDragEnter"
     
     @ondragleave:stopPropagation="true"
     @ondragleave="@OnDragLeave">
    <div
        id="@Category.Id"
        class="channel"
        >
            @if (IsUnread) {
                <img alt="Category with unread messages" class="category-icon" src="_content/Valour.Client/media/Category-Icon-unread.svg" style="@ArrowStyle">
            }
            else {
                <img alt="Category without unread messages" class="category-icon" src="_content/Valour.Client/media/Category-Icon-read.svg" style="@ArrowStyle">
            }
            <p class="name">
                @Category.Name
            </p>
    </div>
        
    @if (IsOpen)
    {
        <div class="sub-list" ondragover="event.preventDefault();">
            @foreach (var item in ItemList)
            {
                if (item.ParentId != Category.Id)
                    continue;

                switch (item)
                {
                    case PlanetChatChannel chat:
                        <ChatChannelListComponent @key='@chat.Id' ParentCategory="@this" Channel="@chat" />
                        break;
                    //case PlanetVoiceChannel voice:
                    //    <VoiceChannelListComponent @key='@voice.Id' ParentCategory="@this" Channel="@voice" />
                    //    break;
                    case PlanetCategory cat:
                        <CategoryListComponent 
                            @key='$"{Category.Id}-{cat.Id}"' 
                            ParentCategory="@this" 
                            Category="@cat" 
                            Categories="@Categories" 
                            Channels="@Channels" 
                            VoiceChannels="@VoiceChannels" 
                            ChannelWindow="@ChannelWindow" 
                            Depth="@(this.Depth + 1)" />
                        break;
                }
            }
        </div>
    }
</div>

@code {
    
    private bool _render = true;
    protected override bool ShouldRender() => _render;

    protected override void OnAfterRender(bool firstRender)
    {
        _render = false;
    }

    public void Refresh()
    {
        _render = true;
        StateHasChanged();
    }

    [Parameter]
    public bool IsTopLevel { get; set; }

    [Parameter]
    public PlanetCategory Category { get; set; }

    [Parameter]
    public List<PlanetChatChannel> Channels { get; set; }

    [Parameter]
    public List<PlanetVoiceChannel> VoiceChannels { get; set; }

    [Parameter]
    public List<PlanetCategory> Categories { get; set; }

    [Parameter]
    public ChatChannelWindow ChannelWindow { get; set; }

    [Parameter]
    public CategoryListComponent ParentCategory { get; set; }

    public List<PlanetChatChannel> ChildChannels { get; set; }
    public List<PlanetVoiceChannel> ChildVoiceChannels { get; set; }
    public List<PlanetCategory> ChildCategories { get; set; }

    public bool IsOpen { get; set; } = true;
    
    public bool IsUnread { get; set; }

    public Planet Planet { get; set; }

    public List<PlanetChannel> ItemList = new List<PlanetChannel>();
    
    [Parameter]
    public int Depth { get; set; }

    protected override async Task OnInitializedAsync()
    {
        ModelObserver<PlanetCategory>.OnAnyUpdated += OnCategoryUpdate;
        ModelObserver<PlanetChatChannel>.OnAnyUpdated += OnChatChannelUpdate;
        ModelObserver<PlanetVoiceChannel>.OnAnyUpdated += OnVoiceChannelUpdate;

        // Handle Deletions
        ModelObserver<PlanetCategory>.OnAnyDeleted += OnCategoryDeletion;
        ModelObserver<PlanetChatChannel>.OnAnyDeleted += OnChatChannelDeletion;
        ModelObserver<PlanetVoiceChannel>.OnAnyDeleted += OnVoiceChannelDeletion;

        ValourClient.OnChannelOpen += OnChannelOpenedChange;
        ValourClient.OnChannelClose += OnChannelOpenedChange;
        ValourClient.OnCategoryOrderUpdate += OnCategoryOrderUpdate;

        ChildChannels = Channels.Where(x => x.ParentId == Category.Id).ToList();
        ChildVoiceChannels = VoiceChannels.Where(x => x.ParentId == Category.Id).ToList();
        ChildCategories = Categories.Where(x => x.ParentId == Category.Id).ToList();

        Planet = await Category.GetPlanetAsync();
        
        ChildCategories ??= new();
        ChildVoiceChannels ??= new();

        IsOpen = categoryManager.IsOpen(Category);

        BuildItemList();
        
        DetermineUnread();
    }
    
    private void OnDragEnter()
    {
        listManager.OnDragEnterItem(this.Category.Id);
        Refresh();
    }

    private void OnDragLeave()
    {
        Refresh();
    }

    public async Task OnChannelOpenedChange(PlanetChatChannel channel)
    {
        //if (channel.ParentId == Category.Id)
            //StateHasChanged();
    }

    public void BuildItemList()
    {
        ItemList.Clear();
        
        ChildChannels = Channels.Where(x => x.ParentId == Category.Id).ToList();
        ChildVoiceChannels = VoiceChannels.Where(x => x.ParentId == Category.Id).ToList();
        ChildCategories = Categories.Where(x => x.ParentId == Category.Id).ToList();

        ItemList.AddRange(ChildChannels);
        ItemList.AddRange(ChildVoiceChannels);
        ItemList.AddRange(ChildCategories);
        SortItems();
    }

    public void SortItems()
    {
        ItemList.Sort((x, y) => x.Position.CompareTo(y.Position));
    }

    public void Dispose()
    {
        ModelObserver<PlanetCategory>.OnAnyUpdated -= OnCategoryUpdate;
        ModelObserver<PlanetChatChannel>.OnAnyUpdated -= OnChatChannelUpdate;
        ModelObserver<PlanetVoiceChannel>.OnAnyUpdated -= OnVoiceChannelUpdate;

        ModelObserver<PlanetCategory>.OnAnyDeleted -= OnCategoryDeletion;
        ModelObserver<PlanetChatChannel>.OnAnyDeleted -= OnChatChannelDeletion;
        ModelObserver<PlanetVoiceChannel>.OnAnyDeleted -= OnVoiceChannelDeletion;

        ValourClient.OnUserChannelStateUpdate -= OnUserChannelStateUpdate;
        ValourClient.OnChannelStateUpdate -= OnChannelStateUpdate;
        ValourClient.OnCategoryOrderUpdate -= OnCategoryOrderUpdate;
    }

    private async Task OnCategoryOrderUpdate(CategoryOrderEvent eventData)
    {
        if (eventData.CategoryId != Category.Id)
            return;
        
        BuildItemList();
        SortItems();
        Refresh();
    }
    
    public async Task OnUserChannelStateUpdate(UserChannelState state)
    {
        var channel = ItemList.FirstOrDefault(x => x.Id == state.ChannelId && x.Type == ChannelType.PlanetChatChannel);
        if (channel is null || channel.ParentId != Category.Id)
            return;

        DetermineUnread();
        Refresh();
    }

    public async Task OnChannelStateUpdate(ChannelStateUpdate state)
    {
        var channel = ItemList.FirstOrDefault(x => x.Id == state.ChannelId && x.Type == ChannelType.PlanetChatChannel);
        if (channel is null || channel.ParentId != Category.Id)
            return;
            
        DetermineUnread();
        Refresh();
    }

    public void OnClick()
    {
        listManager.OnItemClickInCategory(Category, ParentCategory);

        IsOpen = !IsOpen;

        categoryManager.SetOpen(Category, IsOpen);

        Refresh();
    }

    public string ArrowStyle
    {
        get
        {
            if (IsOpen)
            {
                return "transform: rotate(90deg);";
            }
            else
            {
                return "";
            }
        }
    }

    [Parameter]
    public RenderFragment ChildContent { get; set; }

    public async Task OnCategoryDeletion(PlanetCategory category)
    {

        var old = ChildCategories.FirstOrDefault(x => x.Id == category.Id);

        // just in case something weird happens
        if (old != null)
        {
            ChildCategories.Remove(old);
            BuildItemList();
            Refresh();
        }
    }

    public async Task OnCategoryUpdate(ModelUpdateEvent<PlanetCategory> eventData)
    {
        var category = eventData.Model;
        
        if (Category.Id == category.Id)
        {
            Refresh();
        }
        else
        {
            // If we contain the category and its position or category changed we need to factor for that
            var old = ChildCategories.FirstOrDefault(x => x.Id == category.Id);

            if (old != null)
            {
                // If removed from this category
                if (category.ParentId != Category.Id)
                {
                    ChildCategories.Remove(old);
                    BuildItemList();
                    
                    Refresh();
                }
            }
            // In this case it was just added to this category
            else if (category.ParentId == Category.Id)
            {

                // Insert
                ChildCategories.Add(category);
                // Resort
                BuildItemList();

                Console.WriteLine($"Inserted {category.Name} into {Category.Name}");

                Refresh();
            }
        }
    }

    public async Task OnVoiceChannelDeletion(PlanetVoiceChannel channel)
    {
        if (channel.ParentId == Category.Id)
        {
            var old = ChildChannels.FirstOrDefault(x => x.Id == channel.Id);
            ChildChannels.Remove(old);
            BuildItemList();
            Refresh();
        }
    }

    public async Task OnVoiceChannelUpdate(ModelUpdateEvent<PlanetVoiceChannel> eventData)
    {
        var channel = eventData.Model;
        
        // If we contain the category and its position or category changed we need to factor for that
        var old = ChildVoiceChannels.FirstOrDefault(x => x.Id == channel.Id);

        if (old != null)
        {
            // If removed from this category
            if (channel.ParentId != Category.Id)
            {
                ChildVoiceChannels.Remove(old);
                BuildItemList();
                Refresh();
            }
        }
        // In this case it was just added to this category
        else if (channel.ParentId == Category.Id)
        {
            // Add to childchannels
            ChildVoiceChannels.Add(channel);
            // Resort
            BuildItemList();

            Refresh();
        }
    }

    public async Task OnChatChannelDeletion(PlanetChatChannel channel)
    {
        if (channel.ParentId == Category.Id) {
            var old = ChildChannels.FirstOrDefault(x => x.Id == channel.Id);
            ChildChannels.Remove(old);
            BuildItemList();
            Refresh();
        }
    }

    public async Task OnChatChannelUpdate(ModelUpdateEvent<PlanetChatChannel> eventData)
    {
        var channel = eventData.Model;
        
        // Console.WriteLine($"This: {Category.Id} | New: {channel.Id} | New Parent: {channel.ParentId}");

        // If we contain the category and its position or category changed we need to factor for that
        var old = ChildChannels.FirstOrDefault(x => x.Id == channel.Id);

        if (old != null)
        {
            // If removed from this category
            if (channel.ParentId != Category.Id)
            {
                ChildChannels.Remove(old);
                BuildItemList();
                
                Refresh();
            }
        }
        // In this case it was just added to this category
        else if (channel.ParentId == Category.Id)
        {
            // Add to childchannels
            ChildChannels.Add(channel);
            // Resort
            BuildItemList();

            Refresh();
        }
    }

    int currentDragIndex;

    // Get local index
    public int GetIndex(PlanetChannel item)
    {
        return ItemList.FindIndex(x => x.Id == item.Id);
    }

    public void DetermineUnread()
    {
        bool unread = false;
        
        foreach (var channel in ChildChannels)
        {
            if (ValourClient.GetChannelUnreadState(channel.Id))
            {
                unread = true;
                break;
            }
        }

        IsUnread = unread;
    }
}
