@implements IDisposable

@inject WindowManager windowManager
@inject ChannelListManager listManager

<div @onpointerdown:stopPropagation='true'>
    <ContextMenuTrigger MouseButtonTrigger="MouseButtonTrigger.ContextOrHold" MenuId='list-context' @onpointerdown='() => ChannelListContextMenuComponent.SetSelectedItem(Channel)'>
        <div class="@Chosen_CSS" 
            @onclick="OnClick"
            @ondragstart="() => listManager.OnItemStartDragInCategory(Channel, ParentCategory)"
            @ondrop="async () => await listManager.OnItemDropOnChatChannel(this)" draggable="true" id="@Channel.Id">
            <div class="chat-icon">
                @if (AnyUnread)
                {
                    <img src="_content/Valour.Client/media/Channel-Filled-Icon.svg" alt="Chat channel with unread messages" />
                }
                else
                {
                    <img src="_content/Valour.Client/media/Channel-Icon.svg" alt="Chat channel without unread messages" />
                }
            </div>
            <p class="channel-name">
                @Channel.Name
            </p>
        </div>
    </ContextMenuTrigger>
</div>

@code {
    // Demonstrates how a parent component can supply parameters
    [Parameter]
    public PlanetChatChannel Channel { get; set; }

    [Parameter]
    public ChannelListCategoryComponent ParentCategory { get; set; }

    public bool AnyUnread { get; set; }

    public string Chosen_CSS
    {
        get
        {
            if (windowManager.GetWindows().OfType<ChatChannelWindow>().Any(x => x.Channel.Id == Channel.Id))
            {
                return "channel open";
            }

            return "channel";
        }
    }

    public async Task OnClick()
    {

        listManager.OnItemClickInCategory(Channel, ParentCategory);

        ClientWindow window = windowManager.GetSelectedWindow();

        if (window is ChatChannelWindow)
        {
            ChatChannelWindow channelWindow = (ChatChannelWindow)window;
            if (channelWindow != null)
            {
                // It's the same channel, cancel
                if (channelWindow.Channel.Id == Channel.Id)
                {
                    return;
                }

                Console.WriteLine(Channel.Name);
                await channelWindow.Component.SwapChannel(Channel);
            }
        }

        StateHasChanged();
    }

    public async Task OnChatChannelUpdate(PlanetChatChannel channel, bool newItem, int flags)
    {
        if (Channel.Id == channel.Id)
        {
            AnyUnread = channel.DetermineUnread();
            StateHasChanged();
        }
    }

    public async Task OnChannelOpenedChange(PlanetChatChannel channel)
    {
        //if (channel.Id == Channel.Id)
        StateHasChanged();
    }

    protected override async Task OnInitializedAsync()
    {
        // Console.WriteLine("Init " + Channel.Name);

        ItemObserver<PlanetChatChannel>.OnAnyUpdated += OnChatChannelUpdate;

        ValourClient.OnChannelOpen += OnChannelOpenedChange;
        ValourClient.OnChannelClose += OnChannelOpenedChange;

        ValourClient.OnUserChannelStateUpdate += OnChannelStateUpdate;

        AnyUnread = Channel.DetermineUnread();
    }

    public async Task OnChannelStateUpdate(UserChannelState state)
    {
        if (state.ChannelId != Channel.Id)
            return;

        AnyUnread = Channel.DetermineUnread();
        StateHasChanged();
    }

    public void Dispose()
    {
        // Console.WriteLine("Disposed " + Channel.Name);

        ItemObserver<PlanetChatChannel>.OnAnyUpdated -= OnChatChannelUpdate;

        ValourClient.OnChannelOpen -= OnChannelOpenedChange;
        ValourClient.OnChannelClose -= OnChannelOpenedChange;
    }
}