@* Magic list building *@

@if (_root is not null)
{
    <SortableWrapper OnDataChanged="@(() => InvokeAsync(StateHasChanged))">
        <RecursiveChannelComponent Items="@_root" Planet="@Planet" />
    </SortableWrapper>
}

@code {

    [Parameter]
    public Planet Planet { get; set; }

    /* The root channel object */
    private List<NestedChannel> _root;

    /* Lists for channels and building */
    private List<PlanetChannel> _allChannels;
    private List<PlanetCategory> _topCategories;
    private List<PlanetCategory> _categories;
    private List<PlanetChatChannel> _chatChannels;
    private List<PlanetVoiceChannel> _voiceChannels;
    
    /* Js interop */

    protected override async Task OnInitializedAsync()
    {
        Planet = WindowManager.Instance.FocusedPlanet;
        await BuildList();
    }

    protected override void OnAfterRender(bool firstRender)
    {
        Console.WriteLine("Rendered");
    }

    // Generates the entire list structure
    public async Task BuildList()
    {
        _categories = await Planet.GetCategoriesAsync();
        _chatChannels = await Planet.GetChannelsAsync();
        _voiceChannels = await Planet.GetVoiceChannelsAsync();
        
        _allChannels = new List<PlanetChannel>();
        _allChannels.AddRange(_categories);
        _allChannels.AddRange(_chatChannels);
        _allChannels.AddRange(_voiceChannels);

        _topCategories = _categories.Where(x => x.ParentId == null).ToList();
        
        Console.WriteLine("TOP CATS: " + _topCategories.Count);
        
        var _options = new
        {
            group = "channel-list-" + Planet.Id,
            forceFallback = "true",
            animation = 150,
        };
        
        // Build entire list
        _root = _topCategories.OrderByDescending(x => x.Position).Select(x => new NestedChannel(x)).ToList();

        foreach (var child in _root)
        {
            await child.LoadChildren(_allChannels);
        }
        
        StateHasChanged();
    }
        
    private async Task OnSortingChange()
    {
        
    }

    private string GetIconSource(PlanetChannel channel)
    {
        return "";
    }
}