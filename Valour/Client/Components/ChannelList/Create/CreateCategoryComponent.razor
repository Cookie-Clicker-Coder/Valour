@inject HttpClient Http
@inject NavigationManager navManager
@inject IJSRuntime JS

<section>
    <h2 class="title">Create a Category</h2>

    <div asp-validation-summary="All" class="text-info"></div>
    <div class="form-group mt-2"> 
        <label>Category Name</label>
        <input class="form-control" @bind-value="@name" />
    </div>
    <div style="margin-top:20px;">
        <div class="perm-list-name mb-1">
            Private Category
        </div>
        <div type="button" style="float: right">
            <label class="switch">
                <input type="checkbox" @onclick="PrivateSwitch" checked="@isprivate">
                <span class="slider round"></span>
            </label>
        </div>
    </div>

    @if (isprivate) {
        <label style="margin-top: 12px;">Who can see and send messages in this Category?</label>
        <div class="roles-box">
            @foreach (PlanetRole role in Roles)
            {
                <div class="role">
                   <div class="perm-list-name mb-1" style="color: @role.GetColorHex();">
                        @role.Name
                    </div>
                    <div type="button" style="float: right">
                        <label class="switch">
                            <input type="checkbox" OnStateChange="SwitchRole(role)" checked="@SelectedRoles[role]">
                            <span class="slider round"></span>
                        </label>
                    </div> 
                </div>

            }
        </div>
    }

    <span id="image-span" style="color:#888888">@imageSpan</span>
    
    <div class="form-group mt-4">
        <center>
            <button class="btn btn-primary mt-2" @onclick="OnClickSubmit">Create</button>
        </center>
    </div>
</section>

@code {

    // Input fields
    string name;

    // Spans
    string imageSpan = "";
    Dictionary<PlanetRole, bool> SelectedRoles = new();

    List<PlanetRole> Roles = new();
    bool isprivate = false;

    [Parameter, EditorRequired]
    public Planet Planet { get; set; }

    [Parameter]
    public PlanetCategoryChannel Parent { get; set; }

    [CascadingParameter]
    public BlazoredModalInstance ModalInstance { get; set; }

    protected override async Task OnInitializedAsync() {
        Roles.Clear();
        SelectedRoles.Clear();

        PlanetMember SelfMember = await ValourClient.GetSelfMember(Planet);

        var roles = await Planet.GetRolesAsync();

        int SelfAuthority = await SelfMember.GetAuthorityAsync();
        foreach (PlanetRole item in roles)
        {
            if (item.GetAuthority() >= SelfAuthority)
                continue;
            Roles.Add(item);
            SelectedRoles.Add(item, false);
        }
        StateHasChanged();
    }

    private void SwitchRole(PlanetRole role) {
        SelectedRoles[role] = !SelectedRoles[role];
    }
    private void PrivateSwitch() {
        isprivate = !isprivate;
    }

    private async Task OnClickSubmit(MouseEventArgs e)
    {

        // Require a name
        if (string.IsNullOrWhiteSpace(name))
        {
            name = "Please input a category name.";
            return;
        }

        long planetId = Planet.Id;
        long? parentId = null;

        if (Parent != null)
            parentId = Parent.Id;

        long userId = ValourClient.Self.Id;
        //string token = ValourClient.Token;

        CreatePlanetCategoryChannelRequest createRequest = new()
        {
            Category = new()
            {
                Name = name,
                Description = "A category",
                ParentId = parentId,
                PlanetId = planetId,
                Position = -1
            },
            Nodes = new()
        };

        if (isprivate)
        {
            // set the default role channel view perms to false

            PermissionsNode node = new()
            {
                TargetId = 0,
                PlanetId = planetId,
                RoleId = Planet.DefaultRoleId.Value,
                Mask = 0x00,
                Code = 0x00,
                TargetType = PermissionsTargetType.PlanetCategoryChannel
            };

            node.SetPermission(CategoryPermissions.View, PermissionState.False);

            createRequest.Nodes.Add(node);

            foreach (PlanetRole role in Roles)
            {

                if (!SelectedRoles[role])
                {
                    continue;
                }

                node = new()
                {
                    TargetId = 0,
                    PlanetId = planetId,
                    RoleId = role.Id,
                    Mask = 0x00,
                    Code = 0x00,
                    TargetType = PermissionsTargetType.PlanetCategoryChannel
                };

                node.SetPermission(CategoryPermissions.View, PermissionState.True);
            }
        }

        var result = await PlanetCategoryChannel.CreateWithDetails(createRequest);

        if (!result.Success)
        {
            string errorText = result.Message;
            Console.WriteLine(errorText);
            imageSpan = errorText;
            return;
        }

        // close modal
        await ModalInstance.CloseAsync();
    }

    private async Task OnImageInput()
    {

    }
}
