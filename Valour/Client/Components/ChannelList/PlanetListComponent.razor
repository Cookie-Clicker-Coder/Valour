@inject WindowManager windowManager
@inject ChannelListManager listManager

<div @onpointerdown:stopPropagation='true'>
    <ContextMenuTrigger MouseButtonTrigger="MouseButtonTrigger.ContextOrHold" MenuId='planet-context' @onpointerdown='async () => await PlanetContextMenuComponent.SetSelectedPlanet(Planet)'>
        <div class="@GetCssClass()" id="list-@Planet.Id">
            <div style="cursor:pointer" id="list-inner-@Planet.Id">
                <div @onclick='@OnClick'
                     @ondrop="async () => await listManager.OnItemDropOnPlanet(this)"
                     class="header" ondragover="event.preventDefault();">
                    <img class="arrow" src="_content/Valour.Client/media/Category-Icon-read.svg" style="@GetArrowStyle()">
                    <p class="name">
                        @Planet.Name
                    </p>

                    <img src="@Planet.IconUrl" class="icon" />
                </div>
            </div>
            <div class="channel-list">
                <!-- The Modal -->
                @if (Open)
                {
                    @foreach (PlanetCategory category in TopCategories)
                    {
                        <CategoryListComponent Categories="Categories"
                                                      Channels="Channels"
                                                      VoiceChannels="VoiceChannels"
                                                      Category="category"
                                                      IsTopLevel="true"
                                                      @key='category.Id'>
                        </CategoryListComponent>
                    }

                }
            </div>
        </div>
    </ContextMenuTrigger>
</div>

@code {
    [Parameter]
    public Planet Planet { get; set; }

    public bool Open { get; set; } = true;

    public List<PlanetCategory> TopCategories;
    public List<PlanetCategory> Categories { get; set; }
    public List<PlanetChatChannel> Channels { get; set; }
    public List<PlanetVoiceChannel> VoiceChannels { get; set; }

    protected override async Task OnInitializedAsync()
    {
        // Initialize collections
        Categories = new List<PlanetCategory>();
        Channels = new List<PlanetChatChannel>();
        VoiceChannels = new List<PlanetVoiceChannel>();
        TopCategories = new List<PlanetCategory>();

        // Handle list change
        ModelObserver<PlanetCategory>.OnAnyUpdated += OnCategoryUpdate;
        ModelObserver<PlanetChatChannel>.OnAnyUpdated += OnChatChannelUpdate;
        ModelObserver<PlanetVoiceChannel>.OnAnyUpdated += OnVoiceChannelUpdate;

        // Handle Deletions
        ModelObserver<PlanetCategory>.OnAnyDeleted += OnCategoryDeletion;
        ModelObserver<PlanetChatChannel>.OnAnyDeleted += OnChatChannelDeletion;
        ModelObserver<PlanetVoiceChannel>.OnAnyDeleted += OnVoiceChannelDeletion;

        await GetCategories();
        await GetChannels();
        await GetVoiceChannels();
        GetTopLevelCategories();
    }

    public string GetCssClass()
    {
        if (Open)
        {
            return "planet is-open";
        }
        else
        {
            return "planet";
        }
    }

    public string GetArrowStyle()
    {
        if (Open)
            return "transform: rotate(90deg);";
        return "";
    }

    public void OnClick()
    {
        Open = !Open;
        StateHasChanged();
    }

    public void GetTopLevelCategories()
    {
        if (Categories == null) return;

        TopCategories = Categories.Where(x => x.ParentId == null)
                                  .OrderByDescending(x => x.Position)
                                  .ToList();

        Console.WriteLine($"Found {TopCategories.Count} top level categories");
    }

    public async Task OnChatChannelDeletion(PlanetChatChannel channel)
    {
        var oldChannel = Channels.FirstOrDefault(x => x.Id == channel.Id);

        if (oldChannel != null)
        {
            Channels.Remove(oldChannel);

            StateHasChanged();
        }
    }

    public async Task OnVoiceChannelDeletion(PlanetVoiceChannel channel)
    {
        var oldChannel = VoiceChannels.FirstOrDefault(x => x.Id == channel.Id);

        if (oldChannel != null)
        {
            VoiceChannels.Remove(oldChannel);

            StateHasChanged();
        }
    }

    public async Task OnCategoryDeletion(PlanetCategory category)
    {
        var old = TopCategories.FirstOrDefault(x => x.Id == category.Id);

        if (old != null)
        {
            TopCategories.Remove(old);
            Categories.Remove(old);
            StateHasChanged();
        }
    }

    public async Task OnCategoryUpdate(ModelUpdateEvent<PlanetCategory> eventData)
    {
        var category = eventData.Model;
        // If we contain the category and its position or category changed we need to factor for that
        var old = TopCategories.FirstOrDefault(x => x.Id == category.Id);

        if (old != null)
        {
            // If removed from this
            if (category.ParentId != null)
            {
                TopCategories.Remove(old);
            }
            // If moved within this category
            else
            {
                // Get old index
                var index = TopCategories.IndexOf(old);
                // Remove old
                TopCategories.Remove(old);
                // Replace with new
                TopCategories.Insert(index, category);
            }

            StateHasChanged();
        }
        // In this case it was just added to this category
        else if (category.ParentId == null)
        {

            // Insert into position
            TopCategories.Insert(category.Position, category);

            StateHasChanged();
            return;
        }
    }

    public async Task GetCategories()
    {
        Categories = await Planet.GetCategoriesAsync();
        GetTopLevelCategories();
    }

    public async Task OnChatChannelUpdate(ModelUpdateEvent<PlanetChatChannel> eventData)
    {

        var channel = eventData.Model;
        
        //Console.WriteLine(channel.Name);

        var oldChannel = Channels.FirstOrDefault(x => x.Id == channel.Id);

        //Console.WriteLine(oldChannel.Name);

        if (oldChannel == null)
        {
            Channels.Add(channel);

            StateHasChanged();
            return;
        }

        var index = Channels.IndexOf(oldChannel);

        // Set to new channel
        Channels[index] = channel;

        StateHasChanged();
    }

    public async Task OnVoiceChannelUpdate(ModelUpdateEvent<PlanetVoiceChannel> eventData)
    {
        var channel = eventData.Model;
        
        var oldChannel = VoiceChannels.FirstOrDefault(x => x.Id == channel.Id);

        if (oldChannel == null)
        {
            VoiceChannels.Add(channel);

            StateHasChanged();
            return;
        }

        var index = VoiceChannels.IndexOf(oldChannel);

        // Set to new channel
        VoiceChannels[index] = channel;

        StateHasChanged();
    }

    public async Task GetChannels()
    {
        Channels = await Planet.GetChannelsAsync();
    }

    public async Task GetVoiceChannels()
    {
        VoiceChannels = await Planet.GetVoiceChannelsAsync();
    }
}
