@inject WindowManager WindowManager

<Sortable TItem="NestedChannel" Items="@Items" Class="channels-sortable" Options="@_options">
    <Template Context="item">
        <div class="channel-wrapper">
            <div class="channel-bar">
                @*<img alt="Channel Icon" class="icon" src=""/> *@
                <p>@item.Name</p>
            </div>
            <div class="children">
                @if (item.Children.Count > 0)
                {
                    <RecursiveChannelComponent Items="@item.Children" Planet="@Planet"></RecursiveChannelComponent>
                }
            </div>
        </div>
    </Template>
</Sortable>

@code {
    
    [Parameter]
    public Planet Planet { get; set; }
    
    [Parameter] 
    public List<NestedChannel> Items { get; set; }

    private object _options;

    protected override void OnInitialized()
    {
        _options = new
        {
            group = "channel-list",
            animation = 150,
            forceFallback = "true",
        };
    }

    private async Task OnChannelClick(PlanetChannel clickedChannel)
    {
        switch (clickedChannel)
        {
            case PlanetChatChannel clickedChatChannel:
                var selectedWindow = WindowManager.GetSelectedWindow();
                if (selectedWindow is ChatChannelWindow oldChatWindow &&
                    oldChatWindow.Channel.Id != clickedChatChannel.Id)
                {
                    await oldChatWindow.Component.SwapChannel(clickedChatChannel);
                }
                break;
        }
    }

    private async Task OnContextMenu(PlanetChannel channel)
    {
        await ChannelListContextMenuComponent.SetSelectedItem(channel);
    }
}