@*

@inject IJSRuntime JsRuntime

<div @ref="@_element" class="dock-container @GetSplitClass()">
    @switch (Split)
    {
        // No split
        case SplitDirection.None:
        {
            foreach (var window in Windows)
            {
                <DockWindow @ref="@window.WindowBase" @key="@window.Id" Container="@this" WindowTab="@window"/>
            }
            break;
        }
        case SplitDirection.Horizontal:
        case SplitDirection.Vertical:
        {
            <DockContainer @ref="@ChildContainerA" ParentContainer="@this" Windows="@SplitWindowsA" />
            <DockContainer @ref="@ChildContainerB" ParentContainer="@this" Windows="@SplitWindowsB" />
            break;
        }
    }
    

    @if (DockFloaters.CurrentlyDragging is not null && Split == SplitDirection.None)
    {
        
    }
</div>

@code {
    

    
    

    private string GetSplitClass()
    {
        switch (Split)
        {
            case SplitDirection.None:
                return "";
            case SplitDirection.Horizontal:
                return "split horizontal";
            case SplitDirection.Vertical:
                return "split vertical";
        }

        return "";
    }

    private IJSInProcessObjectReference _jsModule;
    private ElementReference _element;
    
    [Parameter]
    public DockContainer ParentContainer { get; set; }
    
    [Parameter] // Can be initialized via parent container
    public List<WindowTab> Windows { get; set; }
    
    // Only used if this dock is in split mode
    public DockContainer ChildContainerA { get; set; }
    public DockContainer ChildContainerB { get; set; }
    public List<WindowTab> SplitWindowsA { get; set; }
    public List<WindowTab> SplitWindowsB { get; set; }
    
    public WindowTab ActiveWindow { get; set; }
    
    public static DockContainer MainDock { get; set; }

    public SplitDirection Split { get; set; } = SplitDirection.None;
    private bool _armSplit;
    private bool _armUnSplit;

    protected override void OnInitialized()
    {
        
        if (Windows is null)
        {
            Windows = new List<WindowTab>();
        }
        else
        {
            SetActiveTabWindow(Windows.Last());
        }
        

        DockFloaters.OnStartDragging += OnDragging;
        DockFloaters.OnStopDragging += OnDraggingStop;
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            _jsModule = await JsRuntime.InvokeAsync<IJSInProcessObjectReference>("import", "./_content/Valour.Client/Components/DockWindows/DockContainer.razor.js");
        }

        if (_armSplit)
        {
            _armSplit = false;
            await _jsModule.InvokeVoidAsync("doSplit", _element, Split == SplitDirection.Horizontal ? "horizontal" : "vertical");
        }
        
        if (_armUnSplit)
        {
            _armUnSplit = false;
            await _jsModule.InvokeVoidAsync("doUnSplit", _element);
        }
    }

    public async Task AddWindowAsync(WindowContent content)
    {
        // Mobile devices can only have one window
        if (DeviceInfo.IsMobile)
        {
            Windows.Clear();
        }
        
        var window = new WindowTab(content);
        
        await window.NotifyAdded();
        
        Windows.Add(window);
        ActiveWindow = window;

        WindowService.AddGlobalWindow(window);
        await WindowService.SetGlobalActiveWindowAsync(window);
        
        StateHasChanged();
        
        NotifyTabWindowsChange();
    }
    
    public async Task AddDefaultWindowAsync()
    {
        var window = new WindowContent()
        {
            Title = "Home",
            Icon = "./_content/Valour.Client/media/logo/logo-128.png",
            Type = typeof(HomeWindowComponent),
        };
        
        await AddWindowAsync(window);
        
        NotifyTabWindowsChange();
    }
    
    public async Task RemoveWindow(WindowTab window)
    {
        Windows.Remove(window);
        // SplitWindowsA?.Remove(window);
        // SplitWindowsB?.Remove(window);

        // Out of windows and not split - need to add default window or kill self
        if (Windows.Count == 0 && Split == SplitDirection.None)
        {
            if (ParentContainer is null)
            {
                await AddDefaultWindowAsync();
            }
            else
            {
                await ParentContainer.UnSplit();
            }
        }
        
        if (window == ActiveWindow)
        {
            ActiveWindow = Windows.LastOrDefault();
        }

        if (window == WindowService.FocusedWindow)
        {
            if (Windows.Any())
            {
                await WindowService.SetGlobalActiveWindowAsync(Windows.Last());
            }
            else
            {
                await WindowService.SetGlobalActiveWindowAsync(WindowService.GlobalWindows.LastOrDefault());
            }
        }
        
        WindowService.RemoveGlobalWindow(window);
        
        StateHasChanged();
        
        NotifyTabWindowsChange();
    }

    public async Task CloseAllAsync()
    {
        if (ChildContainerA is not null)
        {
            await ChildContainerA.CloseAllAsync();
        }
        
        if (ChildContainerB is not null)
        {
            await ChildContainerB.CloseAllAsync();
        }
        
        if (Windows is not null)
        {
            foreach (var window in Windows)
            {
                await RemoveWindow(window);
            }
        }
    }
    
    public void SetActiveTabWindow(WindowTab window)
    {
        if (!Windows.Contains(window))
            return;

        // Don't re-render if the window is already active
        if (ActiveWindow?.Id == window.Id)
            return;
        
        ActiveWindow = window;
        StateHasChanged();
        
        NotifyTabWindowsChange();
    }

    public async Task NotifyNewFloater(WindowTab window, double clientX = 0, double clientY = 0)
    {
        Console.WriteLine("New floater: " + window.Id);
        await DockFloaters.Instance.AddFloater(window, clientX, clientY);
        
        await RemoveWindow(window);
        
        if (Windows.Count == 0)
        {
            if (ParentContainer is null)
            {
                await AddDefaultWindowAsync();
            }
            else
            {
                await ParentContainer.UnSplit();
            }
        }
    }
    
    private Task OnDragging()
    {
        StateHasChanged();
        return Task.CompletedTask;
    }
    
    private Task OnDraggingStop()
    {
        StateHasChanged();
        return Task.CompletedTask;
    }
    
    public Task UnSplit()
    {
        if (Split == SplitDirection.None)
            return Task.CompletedTask;
        
        Split = SplitDirection.None;
        
        Windows = new List<WindowTab>();
        
        if (SplitWindowsA is not null)
            Windows.AddRange(SplitWindowsA);
        
        if (SplitWindowsB is not null)
            Windows.AddRange(SplitWindowsB);
        
        SplitWindowsA = null;
        SplitWindowsB = null;
        
        _armUnSplit = true;

        Console.WriteLine($"Unsplitting. Root: {ParentContainer is null}. New window count: {Windows.Count}");
        
        SetActiveTabWindow(Windows.LastOrDefault());
        
        StateHasChanged();
        return Task.CompletedTask;
    }

    private void NotifyTabWindowsChange()
    {
        foreach (var window in Windows)
        {
            if (window.WindowBase is not null)
                window.WindowBase.NotifyNeedsReRender();
        }
    }
}