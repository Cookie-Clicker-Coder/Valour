@inject IJSRuntime JsRuntime

<div @ref="@_element" class="dock-container @(Split != SplitState.None && !_hideSplit ? "split" : "")">
    @switch (Split)
    {
        // No split
        case SplitState.None:
        {
            foreach (var window in AllWindows)
            {
                <DockWindow @ref="@window.DockWindow" @key="@window.Id" Container="@this" WindowData="window"/>
            }
            break;
        }
        case SplitState.Horizontal:
        {
            <DockContainer ParentContainer="@this" AllWindows="@SplitWindowsA" />
            <DockContainer ParentContainer="@this" AllWindows="@SplitWindowsB" />
            break;
        }
        case SplitState.Vertical:
        {
            <DockContainer ParentContainer="@this" AllWindows="@SplitWindowsA" />
            <DockContainer ParentContainer="@this" AllWindows="@SplitWindowsB" />
            break;
        }
    }
    

    @if (CurrentlyDragging is not null && Split == SplitState.None)
    {
        <div class="drop-targets"
             @onclick:stopPropagation="true">
            <div class="targets">
                <div @onclick="(async () => await OnDrop(DockContainer.DropLocation.Center))" class="center w-drop-target"><i class="bi bi-bullseye"></i></div>
                <div class="up w-drop-target"><i class="bi bi-caret-up-fill"></i></div>
                <div class="down w-drop-target"><i class="bi bi-caret-down-fill"></i></div>
                <div class="left w-drop-target"><i class="bi bi-caret-left-fill"></i></div>
                <div @onclick="(async () => await OnDrop(DockContainer.DropLocation.Right))" class="right w-drop-target"><i class="bi bi-caret-right-fill"></i></div>
            </div>
        </div>
    }
</div>

@code {
    
    public enum DropLocation
    {
        Center,
        Up,
        Down,
        Left,
        Right
    }
    
    public enum SplitState
    {
        None,
        Horizontal,
        Vertical
    }

    private IJSInProcessObjectReference _jsModule;
    private ElementReference _element;
    
    [Parameter]
    public DockContainer ParentContainer { get; set; }
    
    [Parameter] // Can be initialized via parent container
    public List<WindowData> AllWindows { get; set; }
    
    public List<WindowData> TabWindows { get; set; }
    public List<WindowData> Floaters { get; set; }
    
    // Only used if this dock is in split mode
    public List<WindowData> SplitWindowsA { get; set; }
    public List<WindowData> SplitWindowsB { get; set; }
    
    public WindowData ActiveWindow { get; set; }
    public static WindowData CurrentlyDragging { get; set; }
    
    public static event Func<Task> OnStartDragging;
    public static event Func<Task> OnStopDragging;

    public SplitState Split { get; set; } = SplitState.None;
    private bool _hideSplit = false;

    protected override void OnInitialized()
    {
        TabWindows = new List<WindowData>();
        Floaters = new List<WindowData>();
        
        if (AllWindows is null)
        {
            AllWindows = new List<WindowData>();
        }
        else
        {
            TabWindows.AddRange(AllWindows);
        }

        OnStartDragging += OnDragging;
        OnStopDragging += OnDraggingStop;
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            _jsModule = await JsRuntime.InvokeAsync<IJSInProcessObjectReference>("import", "./_content/Valour.Client/Components/DockWindows/DockContainer.razor.js");
        }
    }

    public void AddWindow(WindowData window)
    {
        AllWindows.Add(window);
        TabWindows.Add(window);
        ActiveWindow = window;
        
        StateHasChanged();
        
        NotifyTabWindowsChange();
    }
    
    public void AddDefaultWindow()
    {
        var window = new WindowData
        {
            Title = "Home",
            Icon = "./_content/Valour.Client/media/logo/logo-128.png",
            Type = typeof(HomeWindowComponent),
        };
        
        AddWindow(window);
        
        NotifyTabWindowsChange();
    }
    
    public async Task RemoveWindow(WindowData window)
    {
        if (TabWindows.Contains(window))
            TabWindows.Remove(window);
        
        if (Floaters.Contains(window))
            Floaters.Remove(window);

        AllWindows.Remove(window);
        SplitWindowsA?.Remove(window);
        SplitWindowsB?.Remove(window);

        // Out of windows and not split - need to add default window or kill self
        if (AllWindows.Count == 0 && Split == SplitState.None)
        {
            if (ParentContainer is null)
            {
                AddDefaultWindow();
            }
            else
            {
                await ParentContainer.UnSplit();
            }
        }
        
        StateHasChanged();
        
        NotifyTabWindowsChange();
    }
    
    public void SetActiveTabWindow(WindowData window)
    {
        if (!TabWindows.Contains(window))
            return;
        
        ActiveWindow = window;
        StateHasChanged();
        
        NotifyTabWindowsChange();
    }

    public async Task NotifyNewFloater(WindowData window)
    {
        Console.WriteLine("New floater: " + window.Id);
        
        Floaters.Add(window);
        TabWindows.Remove(window);

        if (TabWindows.Count == 0)
        {
            if (ParentContainer is null)
            {
                AddDefaultWindow();
            }
            else
            {
                await ParentContainer.DoEmptyHide();
            }
        }
        
        NotifyTabWindowsChange();
    }
    
    public async Task DoEmptyHide()
    {
        await _jsModule.InvokeVoidAsync("doEmptyHide", _element);
        _hideSplit = true;
    }

    public async Task NotifyDragging(WindowData window)
    {
        CurrentlyDragging = window;

        if (OnStartDragging is not null)
            await OnStartDragging.Invoke();
    }

    private async Task OnDragging()
    {
        StateHasChanged();
    }
    
    public async Task NotifyStopDragging()
    {
        CurrentlyDragging = null;
        
        if (OnStopDragging is not null)
            await OnStopDragging.Invoke();
    }
    
    private async Task OnDraggingStop()
    {
        StateHasChanged();
    }

    public async Task OnDrop(DropLocation location)
    {
        Console.WriteLine("Dropped: " + location);
        
        if (CurrentlyDragging is null)
            return;
        
        switch (location)
        {
            case DropLocation.Center:
            {
                if (TabWindows.Contains(CurrentlyDragging))
                    return;
                
                TabWindows.Add(CurrentlyDragging);

                if (!AllWindows.Contains(CurrentlyDragging))
                {
                    // Remove from current dock container
                    await CurrentlyDragging.DockWindow.Container.RemoveWindow(CurrentlyDragging);
                    
                    // Add to this dock container
                    AllWindows.Add(CurrentlyDragging);
                }
                
                // CurrentlyDragging.Id = Guid.NewGuid().ToString();
                
                await CurrentlyDragging.DockWindow.OnFloaterEnd();

                break;
            }
            case DropLocation.Right:
            {
                // Remove currently dragging from its own container
                await CurrentlyDragging.DockWindow.Container.RemoveWindow(CurrentlyDragging);
                
                // Set left to all other windows
                SplitWindowsA = AllWindows;
                
                // Clear normal windows
                AllWindows = null;
                
                // Set right to the currently dragging window
                SplitWindowsB = new List<WindowData> { CurrentlyDragging };
                
                // Init split state
                Split = SplitState.Horizontal;
                
                // Kill floater
                await CurrentlyDragging.DockWindow.OnFloaterEnd();
                
                // Re-render
                StateHasChanged();

                await _jsModule.InvokeVoidAsync("doSplit", _element, "horizontal");
                
                break;
            }
        }

        CurrentlyDragging = null;
    }

    public async Task UnSplit()
    {
        AllWindows = new List<WindowData>();
        AllWindows.AddRange(SplitWindowsA);
        AllWindows.AddRange(SplitWindowsB);
        
        SplitWindowsA = null;
        SplitWindowsB = null;
        
        Split = SplitState.None;
        
        await _jsModule.InvokeVoidAsync("doUnSplit", _element);
        
        StateHasChanged();
    }

    private void NotifyTabWindowsChange()
    {
        foreach (var window in TabWindows)
        {
            if (window.DockWindow is not null)
                window.DockWindow.OnTabsChanged();
        }
    }
}