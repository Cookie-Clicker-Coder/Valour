<div class="dock-container">
    @foreach(var window in AllWindows)
    {
        <DockWindow @ref="@window.DockWindow" @key="@window.Id" Container="@this" WindowData="window" />
    }
    
    @if (CurrentlyDragging is not null)
    {
        <div class="drop-targets"
             @onclick:stopPropagation="true">
            <div class="targets">
                <div @onclick="(async () => await OnDrop(DockContainer.DropLocation.Center))" class="center w-drop-target"><i class="bi bi-bullseye"></i></div>
                <div class="up w-drop-target"><i class="bi bi-caret-up-fill"></i></div>
                <div class="down w-drop-target"><i class="bi bi-caret-down-fill"></i></div>
                <div class="left w-drop-target"><i class="bi bi-caret-left-fill"></i></div>
                <div class="right w-drop-target"><i class="bi bi-caret-right-fill"></i></div>
            </div>
        </div>
    }
</div>

@code {
    
    public enum DropLocation
    {
        Center,
        Up,
        Down,
        Left,
        Right
    }
    
    public List<WindowData> AllWindows { get; set; }
    public List<WindowData> TabWindows { get; set; }
    public List<WindowData> Floaters { get; set; }
    
    public WindowData ActiveWindow { get; set; }
    public static WindowData CurrentlyDragging { get; set; }

    protected override void OnInitialized()
    {
        AllWindows = new List<WindowData>();
        TabWindows = new List<WindowData>();
        Floaters = new List<WindowData>();
    }
    
    public void AddWindow(WindowData window)
    {
        AllWindows.Add(window);
        TabWindows.Add(window);
        ActiveWindow = window;
        
        StateHasChanged();
        
        NotifyTabWindowsChange();
    }
    
    public void AddDefaultWindow()
    {
        var window = new WindowData
        {
            Title = "Home",
            Icon = "./_content/Valour.Client/media/logo/logo-128.png",
            Type = typeof(HomeWindowComponent),
        };
        
        AddWindow(window);
        
        NotifyTabWindowsChange();
    }
    
    public void RemoveWindow(WindowData window)
    {
        if (TabWindows.Contains(window))
            TabWindows.Remove(window);
        
        if (Floaters.Contains(window))
            Floaters.Remove(window);

        AllWindows.Remove(window);
        
        StateHasChanged();
        
        NotifyTabWindowsChange();
    }
    
    public void SetActiveTabWindow(WindowData window)
    {
        if (!TabWindows.Contains(window))
            return;
        
        ActiveWindow = window;
        StateHasChanged();
        
        NotifyTabWindowsChange();
    }

    public async Task NotifyNewFloater(WindowData window)
    {
        Console.WriteLine("New floater: " + window.Id);
        
        Floaters.Add(window);
        TabWindows.Remove(window);
        
        NotifyTabWindowsChange();
    }

    public async Task NotifyDragging(WindowData window)
    {
        CurrentlyDragging = window;
        StateHasChanged();
    }
    
    public async Task NotifyStopDragging()
    {
        CurrentlyDragging = null;
        StateHasChanged();
    }

    public async Task OnDrop(DropLocation location)
    {
        Console.WriteLine("Dropped: " + location);
        
        if (CurrentlyDragging is null)
            return;
        
        switch (location)
        {
            case DropLocation.Center:
            {
                if (TabWindows.Contains(CurrentlyDragging))
                    return;
                
                TabWindows.Add(CurrentlyDragging);

                if (!AllWindows.Contains(CurrentlyDragging))
                {
                    // Remove from current dock container
                    CurrentlyDragging.DockWindow.Container.RemoveWindow(CurrentlyDragging);
                    
                    // Add to this dock container
                    AllWindows.Add(CurrentlyDragging);
                }
                
                // CurrentlyDragging.Id = Guid.NewGuid().ToString();
                
                await CurrentlyDragging.DockWindow.OnFloaterEnd();

                break;
            }
        }

        CurrentlyDragging = null;
    }

    private void NotifyTabWindowsChange()
    {
        foreach (var window in TabWindows)
        {
            if (window.DockWindow is not null)
                window.DockWindow.OnTabsChanged();
        }
    }
}