@inject IJSRuntime JsRuntime

@foreach (var floater in Floaters)
{
    <FloatingWindow @ref="@floater.WindowBase" @key="@floater.Id" WindowData="@floater" Container="@this" />
}

@code {
    
    private IJSInProcessObjectReference _jsModule;
    
    public List<WindowData> Floaters = new List<WindowData>();
    public WindowData ActiveFloater { get; set; }
    
    public static DockFloaters Instance;
    public static WindowData CurrentlyDragging { get; set; }
    public static event Func<Task> OnStartDragging;
    public static event Func<Task> OnStopDragging;

    protected override void OnInitialized()
    {
        Instance = this;
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            _jsModule = await JsRuntime.InvokeAsync<IJSInProcessObjectReference>("import", "./_content/Valour.Client/Components/DockWindows/DockFloaters.razor.js");
        }
    }
    
    public void SetActiveFloater(WindowData windowData)
    {
        if (ActiveFloater?.Id == windowData.Id)
            return;
        
        ActiveFloater = windowData;

        foreach (var floater in Floaters)
        {
            floater.WindowBase.NotifyNeedsReRender();
        }
        
        StateHasChanged();
    }
    
    public async Task AddFloater(WindowData windowData, double clientX, double clientY)
    {
        windowData.StartFloatX = clientX;
        windowData.StartFloatY = clientY;
        Floaters.Add(windowData);
        ActiveFloater = windowData;

        GlobalWindowData.AddGlobalWindow(windowData);
        await GlobalWindowData.SetGlobalActiveWindowAsync(windowData);
        
        StateHasChanged();
    }
    
    public async Task RemoveFloater(WindowData windowData)
    {
        Floaters.Remove(windowData);
        StateHasChanged();

        GlobalWindowData.RemoveGlobalWindow(windowData);

        if (windowData.Id == ActiveFloater?.Id)
        {
            ActiveFloater = Floaters.LastOrDefault();
        }

        if (windowData.Id == GlobalWindowData.GlobalActiveWindow.Id)
        {
            if (Floaters.Any())
            {
                await GlobalWindowData.SetGlobalActiveWindowAsync(Floaters.Last());
            }
            else
            {
                await GlobalWindowData.SetGlobalActiveWindowAsync(GlobalWindowData.GlobalWindows.LastOrDefault());
            }
        }
    }

    public async Task CloseAllAsync()
    {
        foreach (var floater in Floaters)
        {
            await RemoveFloater(floater);
        }
    }
    
    public async Task NotifyDragging(WindowData window)
    {
        CurrentlyDragging = window;

        if (OnStartDragging is not null)
            await OnStartDragging.Invoke();
    }
    
    public async Task NotifyStopDragging()
    {
        CurrentlyDragging = null;
        
        if (OnStopDragging is not null)
            await OnStopDragging.Invoke();
    }
}