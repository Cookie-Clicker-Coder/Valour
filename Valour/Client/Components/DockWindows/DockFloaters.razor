@inject IJSRuntime JsRuntime

@foreach (var floater in Floaters)
{
    <FloatingWindow @ref="@floater.WindowBase" @key="@floater.Id" WindowTab="@floater" Container="@this" />
}

@code {
    
    private IJSInProcessObjectReference _jsModule;
    
    public List<WindowTab> Floaters = new List<WindowTab>();
    public WindowTab ActiveFloater { get; set; }
    
    public static DockFloaters Instance;
    public static WindowTab CurrentlyDragging { get; set; }
    public static event Func<Task> OnStartDragging;
    public static event Func<Task> OnStopDragging;

    protected override void OnInitialized()
    {
        Instance = this;
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            _jsModule = await JsRuntime.InvokeAsync<IJSInProcessObjectReference>("import", "./_content/Valour.Client/Components/DockWindows/DockFloaters.razor.js");
        }
    }
    
    public void SetActiveFloater(WindowTab windowTab)
    {
        if (ActiveFloater?.Id == windowTab.Id)
            return;
        
        ActiveFloater = windowTab;

        foreach (var floater in Floaters)
        {
            floater.WindowBase.NotifyNeedsReRender();
        }
        
        StateHasChanged();
    }
    
    public async Task AddFloater(WindowTab windowTab, double clientX, double clientY)
    {
        windowTab.StartFloatX = clientX;
        windowTab.StartFloatY = clientY;
        Floaters.Add(windowTab);
        ActiveFloater = windowTab;

        WindowService.AddGlobalWindow(windowTab);
        await WindowService.SetGlobalActiveWindowAsync(windowTab);
        
        StateHasChanged();
    }
    
    public async Task RemoveFloater(WindowTab windowTab)
    {
        Floaters.Remove(windowTab);
        StateHasChanged();

        WindowService.RemoveGlobalWindow(windowTab);

        if (windowTab.Id == ActiveFloater?.Id)
        {
            ActiveFloater = Floaters.LastOrDefault();
        }

        if (windowTab.Id == WindowService.GlobalActiveWindow.Id)
        {
            if (Floaters.Any())
            {
                await WindowService.SetGlobalActiveWindowAsync(Floaters.Last());
            }
            else
            {
                await WindowService.SetGlobalActiveWindowAsync(WindowService.GlobalWindows.LastOrDefault());
            }
        }
    }

    public async Task CloseAllAsync()
    {
        foreach (var floater in Floaters)
        {
            await RemoveFloater(floater);
        }
    }
    
    public async Task NotifyDragging(WindowTab window)
    {
        CurrentlyDragging = window;

        if (OnStartDragging is not null)
            await OnStartDragging.Invoke();
    }
    
    public async Task NotifyStopDragging()
    {
        CurrentlyDragging = null;
        
        if (OnStopDragging is not null)
            await OnStopDragging.Invoke();
    }
}