@using Valour.Sdk.Extensions
@inherits WindowBase
@inject IJSRuntime JsRuntime

<div class="window-wrapper @(IsActive ? "active" : "")"
     style="z-index: @GetZIndex()"
     @ref="@_element">
    <div class="tab-wrapper @(GetIndex() == Container.Windows.Count - 1 ? "last" : "")"
         @onclick:stopPropagation="true"
         @onclick="@OnClickTab"
         style="width: @GetTabWidth()%;
         margin-left: @(GetTabWidth() * GetIndex())%;">
        @* Mobile does not have tabs *@
        @if (!DeviceInfo.IsMobile)
        {
            <div class="tab">
                <div class="tab-info">
                    <img alt="tab icon" class="tab-icon" src="@WindowTab.Content?.Icon"/>
                    <span class="tab-title">@WindowTab.Content?.Title</span>
                </div>
                <div class="tab-buttons"
                     @onclick:stopPropagation="true"
                     @onmousedown:stopPropagation="true">
                    @if (WindowTab.Content?.Type != typeof(HomeWindowComponent))
                    {
                        <span class="home" @onclick="@OnClickHome">
                            <i class="bi bi-house-door-fill"></i>
                        </span>
                    }
                    <span class="plus" @onclick="@OnClickPlus">
                        <i class="bi bi-plus-circle-fill"></i>
                    </span>
                    @if (Container.Windows.Count > 1)
                    {
                        <span class="minus" @onclick="@OnClickMinus">
                            <i class="bi bi-dash-circle-fill"></i>
                        </span>
                    }
                </div>
            </div>
        }
    </div>
    <div class="window"
         style="@(WindowTab.AutoScroll ? "overflow-y: auto" : "")"
         @onclick:stopPropagation="true"
         @onclick="@OnClickWindow">
        <DynamicComponent @key="@WindowTab.Id" Type="@WindowTab.Content.Type" Parameters="@_windowParams"/>
    </div>
</div>

@code {
    [Parameter]
    public DockContainer Container { get; set; }
    
    [Parameter]
    public WindowTab WindowTab { get; set; }

    public override async Task ReplaceAsync(WindowContent content)
    {
        await WindowTab.NotifyClose();
        
        WindowTab.SetContent(content);
        
        _windowParams = new Dictionary<string, object>()
        {
            {"Window", WindowTab},
            {"Data", WindowTab.Content.Data}
        };
        
        await WindowTab.NotifyAdded();
        
        ReRender();
    }

    public override async Task CloseAsync()
    {
        await WindowTab.NotifyClose();
        await Container.RemoveWindow(WindowTab);
    }

    public override async Task AddSiblingWindow(WindowTab newTabTab)
    {
        await Container.AddWindowAsync(newTabTab);
    }

    private IJSInProcessObjectReference _jsModule;
    private ElementReference _element;
    private DotNetObjectReference<DockWindow> _dotnetRef;

    public bool IsActive => Container.ActiveWindow == WindowTab;

    private Dictionary<string, object> _windowParams;

    private bool _render = false;

    protected override void OnInitialized()
    {
        _windowParams = new Dictionary<string, object>()
        {
            {"Window", WindowTab},
            {"Data", WindowTab.Data}
        };
    }

    protected override bool ShouldRender() => _render;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            _dotnetRef = DotNetObjectReference.Create(this);
            _jsModule = await JsRuntime.InvokeAsync<IJSInProcessObjectReference>("import", "./_content/Valour.Client/Components/DockWindows/DockWindow.razor.js");
            await _jsModule.InvokeVoidAsync("enableDrag", _element, _dotnetRef);
        }
        
        _render = false;

        await WindowTab.NotifyRendered();
        
        Console.WriteLine("Rendered " + WindowTab.Id);
    }

    public override void NotifyNeedsReRender()
    {
        ReRender();
    }
    
    private float GetTabWidth()
    {
        if (Container.Windows.Count == 1)
            return 100f;
        
        return (100f / Container.Windows.Count);
    }

    private int GetIndex()
    {
        return Container.Windows.IndexOf(WindowTab);
    }

    private async Task OnClickPlus()
    {
        await Container.AddDefaultWindowAsync();
    }
    
    private async Task OnClickMinus()
    {
        await CloseAsync();
    }

    private int GetZIndex()
    {
        if (Container.ActiveWindow == this.WindowTab)
            return 2;

        return 1;
    }

    private async Task OnClickTab()
    {
        Container.SetActiveTabWindow(this.WindowTab);
        await WindowService.SetGlobalActiveWindowAsync(this.WindowTab);
    }

    private async Task OnClickWindow()
    {
        Container.SetActiveTabWindow(this.WindowTab);
        await WindowService.SetGlobalActiveWindowAsync(this.WindowTab);
    }

    private async Task OnClickHome()
    {
        var newData = new WindowTab()
        {
            Title = "Home",
            Icon = "./_content/Valour.Client/media/logo/logo-128.png",
            Type = typeof(HomeWindowComponent)
        };

        await ReplaceAsync(newData);
    }
    
    /* Dragging */

    [JSInvokable]
    public async Task OnFloaterStart(double clientX, double clientY)
    {
        await Container.NotifyNewFloater(WindowTab, clientX, clientY);
    }
    
    public void ReRender()
    {
        _render = true;
        StateHasChanged();
    }
}