<div class="window-dock">
    @foreach (var tab in Tabs)
    {
        <WindowContentComponent WindowTab="@tab"/>
    }
</div>

@code {
    
    public static WindowDockComponent MainDock { get; private set; }
    
    public WindowLayout Layout { get; private set; }

    public List<WindowTab> Tabs { get; private set; } = new();

    public List<WindowSplit> Splits { get; private set; } = new();
    
    // Floaters are not tracked by a layout, so they are stored here
    private List<WindowTab> _floaters = new();

    protected override void OnInitialized()
    {
        WindowService.AddDock(this);
        Reset();
    }

    /// <summary>
    /// Notifies this dock that the layout has changed.
    /// This will update the tabs and splits, and re-render if necessary.
    /// </summary>
    public void NotifyLayoutChanged(bool notifyService = true)
    {
        // Clear old lists
        Tabs.Clear();
        Splits.Clear();
        
        // Get new tabs and splits
        Layout.GetTabs(Tabs);
        Tabs.AddRange(_floaters);
        
        Layout.GetSplits(Splits);
        
        if (notifyService)
        {
            // Notify global window service
            WindowService.NotifyDockLayoutUpdated();
        }
        
        // Actually render changes
        Render();
    }
    
    public void AddFloatingTab(WindowContent content, FloatingWindowProps floatingProps)
    {
        var tab = new WindowTab(content, floatingProps);
        AddFloatingTab(tab, floatingProps);
    }
    
    /// <summary>
    /// Adds a tab as a floating window.
    /// </summary>
    public void AddFloatingTab(WindowTab tab, FloatingWindowProps floatingProps)
    {
        tab.SetLayout(null);
        
        tab.SetFloatingProps(floatingProps);
        
        _floaters.Add(tab);
        
        NotifyLayoutChanged();
    }

    public void Reset(bool notifyService = true)
    {
        _floaters.Clear();
        Tabs.Clear();
        Splits.Clear();

        Layout = new WindowLayout(this);
        Layout.AddTab(HomeWindowComponent.DefaultContent);
        
        NotifyLayoutChanged(notifyService);
    }

    
    // Rendering //
    
    /// <summary>
    /// Flag that allows or disallows rendering.
    /// </summary>
    private bool _canRender = true;
    
    protected override bool ShouldRender() => _canRender;

    protected override void OnAfterRender(bool firstRender)
    {
        _canRender = false;
    }
    
    private void Render()
    {
        _canRender = true;
        StateHasChanged();
    }

}