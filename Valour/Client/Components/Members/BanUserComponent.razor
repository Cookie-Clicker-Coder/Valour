@inherits Modal<BanUserComponent.ModalParams>

<section>
    <h2>Ban user</h2>

    <hr />
    <div asp-validation-summary="All" class="text-info"></div>
    <div class="form-group mt-2">
        <label>Reason</label>
        <input class="form-control" @bind-value="@_reason" />
        <span style="color:#888888">Reason for ban</span>
    </div>
    <div class="form-group mt-2">
        <label>Time</label>
        <input class="form-control" @bind-value="@_time" />
        <span style="color:#888888">Time in days, put any number under 0 to ban permanently</span>
    </div>
    
    <ResultLabel Result="@_result" />
    
    <div class="form-group mt-4">
        <button class="btn btn-primary mt-2" @onclick="@OnClickSubmit">Ban</button>
    </div>
</section>
@code {

    public class ModalParams
    {
        public PlanetMember Member;
    } 

    // Input fields
    private ulong _time;
    private string _reason;

    private ITaskResult _result;

    private async Task OnClickSubmit(MouseEventArgs e)
    {
        // Require a name
        if (string.IsNullOrWhiteSpace(_reason))
        {
            _reason = "Please input a reason.";
            return;
        }
        
        var selfMember = await PlanetMember.FindAsyncByUser(ValourClient.Self.Id, Data.Member.PlanetId);

        var ban = new PlanetBan()
        {
            IssuerId = selfMember.UserId,
            TargetId = Data.Member.UserId,
            Reason = _reason,
            PlanetId = Data.Member.PlanetId,
            TimeCreated = DateTime.UtcNow,
            TimeExpires = null,
        };

        if (_time != 0)
        {
            ban.TimeExpires = DateTime.UtcNow.AddDays(_time);
        }

        _result = await Data.Member.Node.PostAsync($"api/bans", ban);

        StateHasChanged();
    }
}
