<div class="@Chosen_CSS">
    <img class="pfp" src="@pfpurl" @onerror="OnPfpError" style="@style">
    <div class="user-info">
        <p class="username" style="color: @roleColor">
            @if (Member.Nickname.Length > 16)
            {
                @Member.Nickname.Substring(0, 15)
            }
            else
            {
                @Member.Nickname
            }
        </p>
        @((MarkupString)StaffString)
        @((MarkupString)BotString)
        <br>
        <div class="user-status-state">

            <!-- State bubble -->
            <div class="state-circle @state.ClassName">
            </div>

            <p class="status">
                @status
            </p>
        </div>
    </div>
</div>

@code {
    // Demonstrates how a parent component can supply parameters

    [Parameter]
    public PlanetMember Member { get; set; }

    [Parameter]
    public bool First { get; set; }
    [Parameter]
    public bool Last { get; set; }
    [Parameter]
    public bool Only { get; set; }

    public string roleColor = "#ffffff";

    public string status = "";

    public string BotString = "";

    public string StaffString = "";

    public string name = "";

    public UserState state = UserState.Offline;

    public string Chosen_CSS
    {
        get
        {
            if (Only)
            {
                return "sidebar-user only";
            }
            else if (First)
            {
                return "sidebar-user first";
            }
            else if (Last)
            {
                return "sidebar-user last";
            }
            else
            {
                return "sidebar-user";
            }
        }
    }

    public string pfpurl = "_content/Valour.Client/icon-512.png";
    public string style = "";

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        var user = (await Member.GetUserAsync());

        if (user.Bot)
        {
            BotString = "<div class='bot-tag'><p>BOT</p></div>";
        }

        if ((await Member.GetUserAsync()).ValourStaff)
        {
            StaffString = "<div class='staff-tag'><p>STAFF</p></div>";
        }

        name = await Member.GetNameAsync();

        roleColor = await Member.GetRoleColorAsync();

        status = await Member.GetStatusAsync();

        state = user.UserState;

        user.OnUpdated += async d =>
        {
            await SetPfpValue();
            StateHasChanged();
        };

        await SetPfpValue();
    }

    public async Task SetPfpValue()
    {
        string pfp = await Member.GetPfpUrlAsync();

        if (!string.IsNullOrWhiteSpace(pfp))
        {
            pfpurl = pfp;
        }
    }

    protected async Task OnPfpError()
    {
        pfpurl = "_content/Valour.Client/icon-512.png";

        int r = Random.Shared.Next(24) * 15;

        style = $"filter: hue-rotate({r}deg) saturate(2)";

        StateHasChanged();
    }
}
