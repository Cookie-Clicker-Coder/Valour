@inherits Modal<ChangeUsernameModal.Params>

<div class="col-md-12">
    <section class="modal-bg">
        <h3>Change your username</h3>
        <h5>@_changeUsernameMessage</h5>
		
        <div class="form-group mt-2">
            <label class="m-2">New Username</label>
            <input id="new-username-input" type="text" autocomplete="off" class="form-control" @bind-value="@_newUsername" />
            <label class="m-2">Password</label>
            <input id="password-input" type="password" autocomplete="current-password" class="form-control" @bind-value="@_password" />
        </div>
        <br />
        
        <ResultLabel Result="@_result" />
        
        <br />
        <div @onclick="@OnCancel" class="btn v-btn d-inline-block">Cancel</div>
        @if (_canChangeUsername)
        {
            <div @onclick="@OnConfirm" class="btn v-btn danger d-inline-block">Confirm</div>
        }
    </section>
</div>

@code {
    public class Params {}
    private string _changeUsernameMessage;
    private bool _canChangeUsername = false;

    private string _newUsername = "";
    private string _password = "";

    private ITaskResult _result;


    private async Task OnCancel()
    {
        await CloseAsync();
    }

    private async Task OnConfirm()
    {
        var toastData = new ProgressToastData<TaskResult>()
        {
            ProgressTask = ValourClient.UpdateUsernameAsync(_newUsername, _password),
            Title = "Changing Username",
            Message = "Updating...",
            SuccessMessage = "Username updated!",
        };
        
        var result = await ToastContainer.Instance.WaitToastWithTaskResult(toastData);
        if (result.Success)
        {
            await CloseAsync();
        }
        else
        {
            _result = result;
            StateHasChanged();   
        }
    }

    private void SetChangeUsernameMessage()
    {
        var user = ValourClient.Self;
        double daysSinceLastChange = 0;
        if (user.NameChangeTime is not null)
        {
            daysSinceLastChange = (DateTime.UtcNow - user.NameChangeTime.Value).TotalDays;
        }
        
        if (user.Subscription is null)
        {
            if (daysSinceLastChange < 30)
            {
                var daysLeft = 30 - daysSinceLastChange;
                _changeUsernameMessage = $"You can change your username again in {daysLeft.ToString("F0")} {(daysLeft > 1 ? "days" : "day")}.\nStargazers can change their username every 7 days!";
            }
            else
            {
                _canChangeUsername = true;
            }
        }
        else
        {
            if (daysSinceLastChange < 7)
            {
                var daysLeft = 7 - daysSinceLastChange;
                _changeUsernameMessage = $"You can change your username again in {daysLeft.ToString("F0")} {(daysLeft > 1 ? "days" : "day")}.";
            }
            else
            {
                _canChangeUsername = true;
            }
        }
    }

    protected override void OnInitialized()
    {
        base.OnInitialized();
        SetChangeUsernameMessage();
    }
}