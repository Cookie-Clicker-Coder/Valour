@inject HttpClient Http
@inject NavigationManager navManager
@inject IJSRuntime JS

<section>
    <img class="escape-button" src="_content/Valour.Client/media/escape-button-icon.svg" @onclick="ClickEscape">
    <div class="top-section">
        <h2 class="title">Create a Category</h2>

        <center>
            <span id="image-span" style="color:white">@imageSpan</span>
        </center>

        <div asp-validation-summary="All" class="text-info"></div>
        <div class="form-group mt-2 new-input-style">
            <label>Category Name</label>
            <input class="form-control" placeholder="New Category" @bind-value="@name" />
        </div>
        <div style="margin-top:20px;">
            <img class="lock-icon" src="_content/Valour.Client/media/lock-icon.svg">
            <div class="perm-list-name mb-1">
                Private Category
            </div>
            <div type="button" style="float: right">
                <label class="switch">
                    <input type="checkbox" @onclick="PrivateSwitch" checked="@isprivate">
                    <span class="slider round"></span>
                </label>
            </div>
        </div>
    </div>

    @if (isprivate) {
        <div class="private">
            <div class="inner-private">
                <label style="margin-top: 12px;">Who can see and send messages in this Category?</label>
                <div class="roles-box">
                    @foreach (PlanetRole role in Roles)
                    {
                        <div class="role">
                           <div class="perm-list-name mb-1" style="color: @role.GetColorHex();">
                                @role.Name
                            </div>
                            <div type="button" style="float: right">
                                <label class="switch">
                                    <input type="checkbox" @onclick="@(x => {SwitchRole(role);})" checked="@SelectedRoles[role]">
                                    <span class="slider round"></span>
                                </label>
                            </div> 
                        </div>
                    }
                </div>
            </div>
        </div>
    }
    
    @if (isprivate)
    {
        <div class="form-group mt-4 bottom" style="margin-top: 0px !important;">
            <center>
                <button class="btn btn-primary mt-2" @onclick="OnClickSubmit">Create Category</button>
            </center>
        </div>
    }
    else
    {
        <div class="form-group mt-4 bottom">
            <center>
                <button class="btn btn-primary mt-2" @onclick="OnClickSubmit">Create Category</button>
            </center>
        </div>
    }
</section>

@code {

    // Input fields
    string name;

    // Spans
    string imageSpan = "";
    Dictionary<PlanetRole, bool> SelectedRoles = new();

    List<PlanetRole> Roles = new();
    bool isprivate = false;

    [Parameter, EditorRequired]
    public Planet Planet { get; set; }

    [Parameter]
    public PlanetCategory Parent { get; set; }

    [CascadingParameter]
    public BlazoredModalInstance ModalInstance { get; set; }

    public async Task ClickEscape(MouseEventArgs e)
    {
        await ModalInstance.CloseAsync();
    }

    protected override async Task OnInitializedAsync() {
        Roles.Clear();
        SelectedRoles.Clear();

        PlanetMember SelfMember = await ValourClient.GetSelfMember(Planet);

        var roles = await Planet.GetRolesAsync();

        int SelfAuthority = await SelfMember.GetAuthorityAsync();
        foreach (PlanetRole item in roles)
        {
            if (item.GetAuthority() > SelfAuthority)
                continue;
            Roles.Add(item);
            SelectedRoles.Add(item, false);
        }
        StateHasChanged();
    }

    private void SwitchRole(PlanetRole role)
    {
        SelectedRoles[role] = !SelectedRoles[role];
        Console.WriteLine(role.Id);
        Console.WriteLine(SelectedRoles[role]);
    }
    private void PrivateSwitch() {
        isprivate = !isprivate;
    }

    private async Task OnClickSubmit(MouseEventArgs e)
    {

        // Require a name
        if (string.IsNullOrWhiteSpace(name))
        {
            imageSpan = "Please input a category name!";
            return;
        }

        long planetId = Planet.Id;
        long? parentId = null;

        if (Parent != null)
            parentId = Parent.Id;

        long userId = ValourClient.Self.Id;
        //string token = ValourClient.Token;

        CreatePlanetCategoryChannelRequest createRequest = new()
        {
            Category = new()
            {
                Name = name,
                Description = "A category",
                ParentId = parentId,
                PlanetId = planetId,
                Position = -1
            },
            Nodes = new()
        };

        if (isprivate)
        {
            // set the default role channel view perms to false

            PermissionsNode node = new()
            {
                TargetId = 0,
                PlanetId = planetId,
                RoleId = Planet.DefaultRoleId,
                Mask = 0x00,
                Code = 0x00,
                TargetType = PermChannelType.PlanetCategoryChannel,
            };

            node.SetPermission(CategoryPermissions.View, PermissionState.False);

            createRequest.Nodes.Add(node);

            foreach (PlanetRole role in Roles)
            {
                if (!SelectedRoles[role])
                {
                    Console.WriteLine(role.Id);
                    continue;
                }

                PermissionsNode _node = new()
                {
                    TargetId = 0,
                    PlanetId = planetId,
                    RoleId = role.Id,
                    Mask = 0x00,
                    Code = 0x00,
                    TargetType = PermChannelType.PlanetCategoryChannel
                };

                _node.SetPermission(CategoryPermissions.View, PermissionState.True);
                createRequest.Nodes.Add(_node);
            }
        }

        var result = await PlanetCategory.CreateWithDetails(createRequest);

        if (!result.Success)
        {
            string errorText = result.Message;
            Console.WriteLine(errorText);
            imageSpan = errorText;
            return;
        }

        // close modal
        await ModalInstance.CloseAsync();
    }

    private async Task OnImageInput()
    {

    }
}
