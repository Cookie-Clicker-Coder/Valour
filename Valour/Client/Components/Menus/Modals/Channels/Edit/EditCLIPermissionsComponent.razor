@if (loading)
{
    <h4>Loading details...</h4>
    return;
}
@if (!HasTargetManagePerm)
{
    <h4>You do not have permission to manage this @Target.GetHumanReadableName()!</h4>
    return;
}
@if (!HasTargetPermissionPerm)
{
    <h4>You do not have permission to manage this @Target.GetHumanReadableName()'s permissions!</h4>
    return;
}

<h3>@Target.GetHumanReadableName() Permissions</h3>
<p class="subtitle">CHOOSE ROLE</p>


<select @key="@("perm-role-select")" class="form-control" @onchange="OnRoleSelect" style="color: @SelectedRole.GetColorHex();
        background-color: var(--main-1)">

    @{
        int options = 0; 
    }

    @foreach (var role in Roles)
    {
        // Don't show roles we can't edit

        var authority = role.GetAuthority();

        if (authority >= SelfAuthority)
            continue;

        options++;

        <option value="@role.Id" style="color: @role.GetColorHex(); background-color: var(--main-1)">@role.Name</option>
    }
</select>

<br />

@if (options == 0)
{
    <h3>There are no roles you can edit!</h3>
    return;
}

@if (SelectedRole == null)
{
    // This actually cuts the HTML off early and is way cleaner than a massive 'if' statement
    return;
}

<!-- If there's a role selected we show possible permissions that role can have
     for the channel or category -->
<div class="perm-section">
    <div class="perm-list-model">
        <div class="perm-list-name mb-1">
            Inherit Category Permissions
        </div>
        <div type="button" style="float:right">
            <label class="switch">
                <input type="checkbox" @onclick="SwitchInherit" checked="@Target.InheritsPerms">
                <span class="slider round"></span>
            </label>
        </div>
        <div class="perm-list-desc mt-1">
            While true, the channel will inherit permissions from its parent category.
        </div>
    </div>
</div>

<!-- If the channel inherits the permissions, we do not give the option to edit them -->
@if (Target.InheritsPerms)
{
    return;
}

@foreach (var channelType in ChannelPermissions.ChannelTypes.OrderBy(x => x.TargetType.ToString()))
{
    // Only show if we should
    if (!ShowStates[(int)channelType.TargetType])
        continue;

    <br />

    <p class="subtitle">@channelType.Permissions[0].ReadableName.ToUpper() PERMISSIONS</p>
    
    <div class="perm-section">
        <!-- Start at one to skip 'full control' -->
        @for (int i = 1; i < channelType.Permissions.Length; i++)
        {
            int i2 = i; // Prevent odd razor bug
            Permission perm = channelType.Permissions[i2];

            <div class="perm-list-model">
                <div class="perm-list-name mb-1">
                    @perm.Name
                </div>
                <div class="perm-switch">
                    <TriButtonComponent @ref="ButtonGroups[(int)channelType.TargetType][i2]" OnStateChange="(async (state) => SwitchPermission(state, perm, channelType.TargetType))">
                    </TriButtonComponent>
                </div>
                <div class="perm-list-desc mt-1">
                    @perm.Description
                </div>
            </div>
        }
    </div>
}

@if (changed)
{
    <div class="btn btn-outline-primary settings-save-button" @onclick="OnSaveChanges">Save</div>
}

@code {

    // For permission checking
    public bool HasTargetManagePerm { get; set; }
    public bool HasTargetPermissionPerm { get; set; }

    // Show states for permission sections
    public bool[] ShowStates { get; set; } = new bool[ChannelPermissions.ChannelTypes.Length];

    // Available buttons
    public TriButtonComponent[][] ButtonGroups { get; set; } = new TriButtonComponent[ChannelPermissions.ChannelTypes.Length][];

    // Permission nodes
    public PermissionsNode[] Nodes { get; set; } = new PermissionsNode[ChannelPermissions.ChannelTypes.Length];

    public bool[] NeedCreate { get; set; } = new bool[ChannelPermissions.ChannelTypes.Length];
    public bool[] NeedUpdate { get; set; } = new bool[ChannelPermissions.ChannelTypes.Length];


    /////////////////////////////////////////////////////////////////////


    public PlanetRole SelectedRole { get; set; }

    private PlanetRole _lastRole;

    public List<PlanetRole> Roles { get; set; }

    public Planet Planet { get; set; }

    [Parameter]
    public PlanetChannel Target { get; set; }

    public PlanetMember SelfMember { get; set; }

    public PlanetRole SelfPrimaryRole { get; set; }

    public int SelfAuthority { get; set; }

    public bool changed = false;

    public bool loading = true;

    public async Task SwitchInherit()
    {
        if (Target is null)
            return;

        Target.InheritsPerms = !Target.InheritsPerms;

        // TODO: Make this prettier. Json deserialization freaks out for PlanetChannel.UpdateAsync
        switch (Target)
        {
            case PlanetChatChannel chat: 
                {
                    await PlanetChatChannel.UpdateAsync(chat);
                    break;
                }
            case PlanetCategory cat:
                {
                    await PlanetCategory.UpdateAsync(cat);
                    break;
                }
            case PlanetVoiceChannel voice:
                {
                    await PlanetVoiceChannel.UpdateAsync(voice);
                    break;
                }
            default:
                throw new Exception("Invalid channel type.");
        }

        StateHasChanged();
    }

    public void SwitchPermission(TriButtonComponent.TriButtonState state, Permission permission, ChannelType type)
    {
        // If the node for the type is null, we create it and set a flag that it
        // needs to be created on the server
        if (Nodes[(int)type] is null)
        {
            Nodes[(int)type] = new()
            {
                TargetId = Target.Id,
                PlanetId = Target.PlanetId,
                RoleId = SelectedRole.Id,
                Mask = 0x00,
                Code = 0x00,
                TargetType = type
            };

            NeedCreate[(int)type] = true;
        }
        else
        {
            NeedUpdate[(int)type] = true;
        }

        PermissionState newState = PermissionState.Undefined;
        if (state == TriButtonComponent.TriButtonState.Yes) newState = PermissionState.True;
        else if (state == TriButtonComponent.TriButtonState.No) newState = PermissionState.False;

        Nodes[(int)type].SetPermission(permission, newState);

        changed = true;

        StateHasChanged();
    }

    public async Task OnSaveChanges()
    {
        for (int i = 0; i < ChannelPermissions.ChannelTypes.Length; i++)
        {
            if (NeedCreate[i])
            {
                var result = await PermissionsNode.CreateAsync(Nodes[i]);
                if (!result.Success)
                {
                    Console.WriteLine("Error in channel permission node creation!");
                    Console.WriteLine(result.Message);
                }
            }
            else if (NeedUpdate[i])
            {
                var result = await PermissionsNode.UpdateAsync(Nodes[i]);
                if (!result.Success)
                {
                    Console.WriteLine("Error in channel permission node update!");
                    Console.WriteLine(result.Message);
                }
            }
        }

        Console.WriteLine("Permission nodes updated.");

        await RefreshButtons();
    }

    protected override async Task OnInitializedAsync()
    {
        Planet = await Target.GetPlanetAsync();
        Roles = await Planet.GetRolesAsync();

        for (int i = 0; i < ChannelPermissions.ChannelTypes.Length; i++)
        {
            ButtonGroups[i] = new TriButtonComponent[ChannelPermissions.ChannelTypes[i].Permissions.Length];
        }

        if (Roles.Count > 0)
            SelectedRole = Roles[0];

        // Get self membership
        SelfMember = await ValourClient.GetSelfMember(Planet);
        SelfAuthority = await SelfMember.GetAuthorityAsync();
        SelfPrimaryRole = await SelfMember.GetPrimaryRoleAsync();

        int _i = 1;
        while (SelectedRole.GetAuthority() >= SelfAuthority && _i < Roles.Count)
        {
            SelectedRole = Roles[_i];
            _i += 1;
        }


        Permission managePerm;
        Permission permissionsPerm;

        switch (Target)
        {
            case PlanetChatChannel:
                {
                    managePerm = ChatChannelPermissions.ManageChannel;
                    permissionsPerm = ChatChannelPermissions.ManagePermissions;
                    break;
                }
            case PlanetCategory:
                {
                    managePerm = CategoryPermissions.ManageCategory;
                    permissionsPerm = CategoryPermissions.ManagePermissions;
                    break;
                }
            case PlanetVoiceChannel:
                {
                    managePerm = VoiceChannelPermissions.ManageChannel;
                    permissionsPerm = VoiceChannelPermissions.ManagePermissions;
                    break;
                }
            default:
                throw new NotImplementedException($"Unexpected target type {Target.GetType().Name}");
        }

        HasTargetManagePerm = await Target.HasPermissionAsync(SelfMember, managePerm);
        HasTargetPermissionPerm = await Target.HasPermissionAsync(SelfMember, permissionsPerm);

        loading = false;

        await OnRoleChange(SelectedRole);

        await RefreshButtons();

        ModelObserver<PermissionsNode>.OnAnyUpdated += OnPermissionNodeUpdate;
    }

    public async Task OnPermissionNodeUpdate(ModelUpdateEvent<PermissionsNode> eventData)
    {
        var node = eventData.Model;
        if (node.TargetId == Target.Id) {
            await OnRoleChange(await PlanetRole.FindAsync(node.RoleId, Target.PlanetId));
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {

    }

    public async Task OnRoleSelect(ChangeEventArgs e)
    {
        long newRoleId = long.Parse(e.Value.ToString());

        await OnRoleChange(Roles.FirstOrDefault(x => x.Id == newRoleId));
    }

    public async Task OnRoleChange(PlanetRole role)
    {
        if (_lastRole == role)
            return;

        _lastRole = role;

        for (int i = 0; i < ChannelPermissions.ChannelTypes.Length; i++)
        {
            NeedCreate[i] = false;
            NeedUpdate[i] = false;
        }

        SelectedRole = role;

        Console.WriteLine($"Selected role {SelectedRole.Name}");

        switch (Target)
        {
            // Special case for PlanetCategory, which has multiple nodes
            case PlanetCategory category:
                {
                    foreach (var type in ChannelPermissions.ChannelTypes){
                        Nodes[(int)type.TargetType] = await category.GetPermNodeAsync(SelectedRole.Id, type.TargetType);
                        ShowStates[(int)type.TargetType] = true;
                    }

                    break;
                }
            default:
                {
                    foreach (var type in ChannelPermissions.ChannelTypes)
                    {
                        ShowStates[(int)type.TargetType] = false;
                    }

                    Nodes[(int)Target.Type] = await Target.GetPermNodeAsync(SelectedRole.Id, Target.Type);
                    ShowStates[(int)Target.Type] = true;
                    break;
                }
        }

        changed = false;

        await RefreshButtons();
    }

    public PermissionState GetPermissionStateForViewing(PermissionsNode node, Permission permission)
    {

        // super confusing to users why when they hit save, all the buttons go to off if the View perm is not set to True
        // so let's get rid of that check (thats what this function does)!

        if ((node.Mask & permission.Value) != permission.Value)
        {
            return PermissionState.Undefined;
        }

        if ((node.Code & permission.Value) != permission.Value)
        {
            return PermissionState.False;
        }

        return PermissionState.True;
    }

    public async Task RefreshButtons()
    {

        var egg = ChannelPermissions.ChannelTypes;

        if (ButtonGroups == null || ButtonGroups.Length == 0)
            return;

        for (int i = 0; i < ChannelPermissions.ChannelTypes.Length; i++)
        {
            // Only set up buttons for visible
            if (ShowStates[i])
            {
                var perms = ChannelPermissions.ChannelTypes[i].Permissions;
                for (int j = 1; j < perms.Length; j++)
                {
                    if (ButtonGroups[i][j] is null)
                        continue;

                    TriButtonComponent.TriButtonState buttonState = TriButtonComponent.TriButtonState.Disabled;
                    if(Nodes[i] is not null)
                    {
                        var state = GetPermissionStateForViewing(Nodes[i], perms[j]);
                        if (state == PermissionState.True) buttonState = TriButtonComponent.TriButtonState.Yes;
                        else if (state == PermissionState.False) buttonState = TriButtonComponent.TriButtonState.No;
                    }

                    await ButtonGroups[i][j].OnChangeState(buttonState, false);
                }
            }
        }

        StateHasChanged();
    }
}
