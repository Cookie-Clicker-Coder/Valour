@inject HttpClient Http
@inject NavigationManager navManager
@implements IDisposable

<BigMenuComponent @ref="bigMenuComponent">
    <LeftSide>
        <EditChannelListItemMenuComponent ChannelListItem="ChannelListItem" isChannel="isChannel"></EditChannelListItemMenuComponent>
    </LeftSide>
    <RightSide>
        @switch (bigMenuComponent.SelectedTopLevelMenu?.Name)
        {
            case "General Settings":
                switch (bigMenuComponent.SelectedSubMenu.Name)
                {
                    case "Info":
                        <EditCLIDetailsComponent Channel="ChannelListItem"></EditCLIDetailsComponent>
                        break;
                    case "Permissions":
                        <EditCLIPermissionsComponent Target="ChannelListItem"></EditCLIPermissionsComponent>
                        break;
                }
                break;
        }
    </RightSide>
</BigMenuComponent>

@code {
    [Parameter]
    public PlanetChannel ChannelListItem { get; set; }

    public bool isChannel;
    public PlanetChatChannel Channel;
    public PlanetCategoryChannel Category;

    public BigMenuComponent bigMenuComponent { get; set; }

    public void Dispose()
    {
        bigMenuComponent.RefreshRightSide -= Refresh;
    }

    protected override Task OnAfterRenderAsync(bool firstRender)
    {

        if (firstRender)
        {
            bigMenuComponent.RefreshRightSide += Refresh;
        }
        return base.OnAfterRenderAsync(firstRender);
    }

    public void Refresh()
    {
        StateHasChanged();
    }

    public string GetTitle()
    {
        if (isChannel)
        {
            return $"Channel: {Channel.Name}";
        }
        else
        {
            return $"Category: {Category.Name}";
        }
    }

    public string GetButtonClass(int tab)
    {
        if (buttonStates[tab])
        {
            return "settings-button active";
        }

        return "settings-button";
    }

    public bool[] buttonStates = new bool[2]
    {
        true, false
    };

    public int selected = 0;

    protected override async Task OnInitializedAsync()
    {
        if (ChannelListItem is PlanetChatChannel)
        {
            isChannel = true;
            Channel = (PlanetChatChannel)ChannelListItem;
            Category = null;
        }
        else
        {
            isChannel = false;
            Category = (PlanetCategoryChannel)ChannelListItem;
            Channel = null;
        }
    }

    public void SetSelectedTab(int tab)
    {
        Console.WriteLine("Set selected to " + tab);

        for (int i = 0; i < buttonStates.Length; i++)
        {
            buttonStates[i] = false;
        }

        buttonStates[tab] = true;

        selected = tab;

        StateHasChanged();
    }
}