@inject IJSRuntime JsRuntime

<section class="v-bg-dark" style="padding: 2em; border-radius: 1em">
	<h2>Create a Planet</h2>

	<lottie-player @ref="@_lottieRef" src="./_content/Valour.Client/media/animations/create_planet.json" background="transparent" speed="1" style="width: 240px; height: 200px;"></lottie-player>

	@if (_result is null || !_result.Success)
	{

		<div class="form-group mt-4">
			<label>Community Name</label>
			<input class="form-control" @bind-value="@_name" type=''/>
		</div>

		<div class="form-group mt-4">
			<label>Description</label>
			<input class="form-control" @bind-value="@_desc"/>
		</div>
		
		<div class="form-group mt-4">
			<button class="v-btn primary large mt-2" @onclick="OnClickSubmit">Create your Community!</button>
		</div>
	}
	
	@if (_showWelcome)
	{
		<h4 class="welcome" style="text-align: center">
			We have landed!
		</h4>
	}
</section>

@code {

	private ElementReference _lottieRef;

	private bool _showWelcome = false;
	
	public class ModalParams
	{
		public WindowData Window { get; set; }
	}
	
	private ITaskResult _result;

	private string _name;
	private string _desc;

	[CascadingParameter]
	public ModalRoot ModalRoot { get; set; }
	
	[Parameter]
	public ModalParams Data { get; set; }
	
	[Parameter]
	public string ModalId { get; set; }

	private async Task OnClickSubmit(MouseEventArgs e)
	{
		// Require a name
		if (string.IsNullOrWhiteSpace(_name))
		{
			_result = new TaskResult(false, "Please input a planet name.");
			return;
		}

		var newPlanet = new Planet()
		{
			Name = _name,
			Description = _desc
		};
		
		var result = await ValourClient.PrimaryNode.PostAsyncWithResponse<Planet>($"api/planets", newPlanet);
		_result = result;

		StateHasChanged();
		
		if (!_result.Success)
		{
			return;
		}

		_showWelcome = true;
		StateHasChanged();
		
		await Task.Delay(200);

		await JsRuntime.InvokeVoidAsync("playLottie", _lottieRef);
		
		await Task.Delay(3000);
		
		await ModalRoot.CloseModal(ModalId);

		var planet = result.Data;
		
		await ValourCache.Put(planet.Id, planet);

		await ValourClient.AddJoinedPlanetAsync(planet);
		
		var mainChannel = await planet.GetPrimaryChannelAsync();

		await Data.Window.WindowBase.AddSiblingWindow(new WindowData()
		{
			Title = $"{mainChannel.Name} - {planet.Name}",
			Data = mainChannel,
			Type = typeof(ChatChannelWindowComponent),
			Icon = planet.GetIconUrl(IconFormat.Webp64)
		});
	}

}