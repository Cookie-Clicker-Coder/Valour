@inject WindowManager WindowManager

<div class="col-md-12 modal-bg">
	<section>
		<h2>Create a new Planet</h2>

		<h4>The birth of a community!</h4>
		
		<hr />

		<div asp-validation-summary="All" class="text-info"></div>

		<div class="form-group mt-4">
			<label>Community Name</label>
			<input class="form-control" @bind-value="@_name" type='' />
			<span style="color:#888888">@_nameSpan</span>
		</div>

		<div class="form-group mt-4">
			<label>Description</label>
			<input class="form-control" @bind-value="@_desc" />
			<span style="color:#888888">@_descSpan</span>
		</div>

		@if (!string.IsNullOrEmpty(_errorSpan))
		{
			<span class="danger-text mt-4 mb-4">@_errorSpan</span>
		}

		<div class="form-group mt-4">
			<button class="btn v-button mt-2" @onclick="OnClickSubmit">Submit</button>
		</div>
	</section>
</div>

@code {

	public class ModalParams
	{
		public ClientWindow Window { get; set; }
	}
	
	// Input fields
	string _name;
	string _desc;

	// Spans
	string _nameSpan = "The name of your community";
	string _descSpan = "A description of your community";

	string _errorSpan;

	[CascadingParameter]
	public ModalRoot ModalRoot { get; set; }
	
	[Parameter]
	public ModalParams Data { get; set; }
	
	[Parameter]
	public string ModalId { get; set; }

	private async Task OnClickSubmit(MouseEventArgs e)
	{
		// Require a name
		if (string.IsNullOrWhiteSpace(_name))
		{
			_name = "Please input a planet name.";
			return;
		}

		var newPlanet = new Planet()
		{
			Name = _name,
			Description = _desc
		};

		var response = await ValourClient.PrimaryNode.PostAsyncWithResponse<Planet>($"api/planets", newPlanet);

		if (!response.Success)
		{
			_errorSpan = response.Message;
			StateHasChanged();
			return;
		}
		
		ModalRoot.CloseModal(ModalId);

		_descSpan = "Planet created.";

		var planet = response.Data;

		await ValourCache.Put(planet.Id, planet);

		var mainChannel = await planet.GetPrimaryChannelAsync();

		await WindowManager.ClearWindows();

		var newChannel = new ChatChannelWindow(mainChannel);

		// Get the new main window
		var mainWindow = WindowManager.GetWindows()[0];

		await WindowManager.ReplaceWindow(mainWindow, newChannel);
		await WindowManager.SetSelectedWindow(newChannel);
	}

}