@inject HttpClient Http
@inject NavigationManager navManager
@inject WindowManager windowManager
@implements IDisposable

@if (Planet is null)
{
    <h5>Loading planet details...</h5>
    return;
}

<BigMenuComponent @ref="bigMenuComponent">
    <LeftSide>
        <EditPlanetMenuComponent Planet="@Planet"></EditPlanetMenuComponent>
    </LeftSide>
    <RightSide>
        @switch (bigMenuComponent.SelectedTopLevelMenu?.Name)
        {
            case "General Settings":
                switch (bigMenuComponent.SelectedSubMenu.Name)
                {
                    case "Info":
                        <EditPlanetInfoComponent Planet="Planet"></EditPlanetInfoComponent>
                        break;
                    case "Invites":
                        <EditPlanetInvitesComponent Planet="Planet"></EditPlanetInvitesComponent>
                        break;
                    case "Members":
                        <EditPlanetUsersComponent></EditPlanetUsersComponent>
                        break;
                    case "Bans":
                        <EditPlanetBansComponent></EditPlanetBansComponent>
                        break;
                    case "Roles":
                        <EditPlanetRolesComponent Planet="Planet"></EditPlanetRolesComponent>
                        break;
                    case "Economy":
                        <EditPlanetEconomyComponent Planet="Planet"></EditPlanetEconomyComponent>
                        break;
                    case "Delete":
                        break;
                }
                break;
        }
    </RightSide>
</BigMenuComponent>

@code {
    [Parameter]
    public Planet Planet { get; set; }

    [CascadingParameter]
    public IModalService Modal { get; set; }

    [CascadingParameter]
    public BlazoredModalInstance ModalInstance { get; set; }

    private BigMenuComponent bigMenuComponent { get; set; }

    public string GetButtonClass(int tab)
    {
        if (buttonStates[tab])
        {
            return "settings-button active";
        }

        return "settings-button";
    }

    public bool[] buttonStates = new bool[5]
    {
        true, false, false, false, false
    };

    public int selected = 0;

    public void Dispose()
    {
        bigMenuComponent.RefreshRightSide -= Refresh;
    }

    protected override Task OnAfterRenderAsync(bool firstRender)
    {

        if (firstRender)
        {
            bigMenuComponent.RefreshRightSide += Refresh;
        }
        return base.OnAfterRenderAsync(firstRender);
    }

    protected override async Task OnInitializedAsync()
    {
        Planet = windowManager.FocusedPlanet;
    }

    public async void Refresh()
    {
        if (bigMenuComponent.SelectedSubMenu?.Name == "Delete")
        {
            await OnClickDelete();
        }
        else
        {
            StateHasChanged();
        }
    }

    public void SetSelectedTab(int tab)
    {
        Console.WriteLine("Set selected to " + tab);

        for (int i = 0; i < buttonStates.Length; i++)
        {
            buttonStates[i] = false;
        }

        buttonStates[tab] = true;

        selected = tab;

        StateHasChanged();
    }

    private async Task OnClickDelete()
    {
        ConfirmModalData modalData =
        new($"Delete {Planet.Name}?",
                "Are you sure?",
                "Continue",
                "Cancel",
                async () =>
                {
                    Console.WriteLine("Confirmed planet deletion.");
                    var result = await Valour.Api.Items.LiveModel.DeleteAsync(Planet);

                    if (result.Success)
                    {
                        await ModalInstance.CloseAsync();
                    }
                },
                async () =>
                {
                    Console.WriteLine("Cancelled channel item deletion.");
                }
        );

        ModalParameters modParams = new();
        modParams.Add("Data", modalData);

        Modal.Show<ConfirmModalComponent>("Confirm", modParams);
    }
}