@inject HttpClient http

<h3>Planet Invitations</h3>
<hr />
<br />

<div class="settings-inner">
    <p>Public</p>
    <p>
        <input type="checkbox" @oninput="OnCheckPublic" checked="@publicValue" /> &nbsp; Setting a server to public will allow any user to join
        through an invite link.
    </p>
    @if (!string.IsNullOrWhiteSpace(publicErrorSpan))
    {
        <span class="text-danger mb-4">@publicErrorSpan</span>
    }
    @if (!string.IsNullOrWhiteSpace(publicInfoSpan))
    {
        <span class="text-info mb-4">@publicInfoSpan</span>
    }

    <p>Discoverable</p>
    <p>
        <input type="checkbox" @oninput="OnCheckDiscoverable" checked="@discoverableValue" /> &nbsp; If this and public are true, this server will 
        appear in the server discovery tab.
    </p>
    @if (!string.IsNullOrWhiteSpace(discoverableErrorSpan))
    {
        <span class="text-danger mb-4">@discoverableErrorSpan</span>
    }
    @if (!string.IsNullOrWhiteSpace(discoverableInfoSpan))
    {
        <span class="text-info mb-4">@discoverableInfoSpan</span>
    }
    <div class="invite-table"
        <div class="invite-tab-holder mt-4">
            <div class="@linksButtonStyle" @onclick="(async () => await OnSwitchTab(true))">Invite Links</div>
            <div class="@usersButtonStyle" @onclick="(async () => await OnSwitchTab(false))">Invited Users</div>
        </div>
        <div class="invite-list">
            @if (linksChosen)
            {
                <table>
                    <tr>
                        <th style="width: 110px;">Invite Code</th>
                        <th style="width: 300px;">Created By</th>
                        <th style="width: 125px;">Created</th>
                        <th style="width: 125px;">Expires</th>
                    </tr>
                    @foreach (var invite in Invites)
                    {
                        <PlanetInviteComponent invite="@invite"></PlanetInviteComponent>
                    }
                </table>
            }
        </div>
    </div>

    <CreateInviteLink Planet="Planet"></CreateInviteLink>
</div>

@code {
    [Parameter]
    public Planet Planet { get; set; }

    public bool publicValue;

    public string publicInfoSpan;
    public string publicErrorSpan;

    public bool discoverableValue;

    public string discoverableInfoSpan;
    public string discoverableErrorSpan;

    public bool linksChosen = true;

    public List<PlanetInvite> Invites = new();

    public string linksButtonStyle = "settings-button left active";
    public string usersButtonStyle = "settings-button right";

    public async Task OnSwitchTab(bool links)
    {
        linksChosen = links;

        if (links)
        {
            linksButtonStyle = "settings-button left active";
            usersButtonStyle = "settings-button right";
        }
        else
        {
            linksButtonStyle = "settings-button left";
            usersButtonStyle = "settings-button right active";
        }

        StateHasChanged();
    }


    protected override async Task OnInitializedAsync()
    {
        publicValue = Planet.Public;
        discoverableValue = Planet.Discoverable;

        StateHasChanged();

        long planetId = Planet.Id;

        long userId = ValourClient.Self.Id;

        Invites = await Planet.GetInvitesAsync();

        StateHasChanged();

        ItemObserver<PlanetInvite>.OnAnyUpdated += OnPlanetInviteUpdated;

    }

    public async Task OnPlanetInviteUpdated(PlanetInvite invite, bool newitem, int flags)
    {
        if (invite.PlanetId == Planet.Id)
        {
            Invites = await Planet.GetInvitesAsync(true);
            StateHasChanged();
        }
    }

    public async Task OnCheckPublic()
    {
        publicValue = !publicValue;

        Planet.Public = publicValue;
        var result = await Planet.UpdateAsync(Planet);

        if (result.Success)
        {
            publicInfoSpan = "Updated successfully.";
        }
        else
        {
            publicValue = !Planet.Public;
            publicErrorSpan = "Failed to update. Try again?";
        }

        StateHasChanged();
    }

    public async Task OnCheckDiscoverable()
    {
        discoverableValue = !discoverableValue;

        Planet.Discoverable = discoverableValue;
        var result = await Planet.UpdateAsync(Planet);

        if (result.Success)
        {
            discoverableInfoSpan = "Updated successfully.";
        }
        else
        {
            discoverableValue = !Planet.Discoverable;
            discoverableErrorSpan = "Failed to update. Try again?";
        }

        StateHasChanged();
    }

}