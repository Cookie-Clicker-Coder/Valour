@inject ILocalStorageService LocalStorage

<h3>Device Preferences</h3>
<p class="subtitle">SAVED PER DEVICE</p>

<div class="perm-section">
    <div class="perm-list-item">
        <div class="perm-list-name mb-1">
            Auto Emojis
        </div>
        <div type="button" style="float:right">
            <label class="switch">
                <input type="checkbox" @onclick="SwitchAutoEmojis" checked="@DevicePreferences.AutoEmoji">
                <span class="slider round"></span>
            </label>
        </div>
        <div class="perm-list-desc mt-1">
            When true, faces like :) will be automatically turned into emojis in chat.
        </div>
    </div>
</div>

<br />

@if (_mics is not null)
{
    <p>Input Device (Microphone)</p>
    <select style="margin-top: 12px" class="form-select" @onchange="@OnChooseMic" >
        @for (int i = 0; i < _mics.Length; i++)
        {
            var ii = i;
            var mic = _mics[ii];
            <option selected="@(DevicePreferences.MicrophoneDeviceId == mic.DeviceId)" value="@mic.DeviceId">@mic.Label</option>
        }
    </select>
}


@code {

    private InputMic[] _mics;

    public async Task OnChooseMic(ChangeEventArgs e)
    {
        DevicePreferences.MicrophoneDeviceId = e.Value.ToString();
        await LocalStorage.SetItemAsync("MicrophoneDeviceId", DevicePreferences.MicrophoneDeviceId);
    }

    protected override async Task OnInitializedAsync()
    {
        _mics = await CallComponent.Instance.UpdateMics();
    }

    private async Task SwitchAutoEmojis()
    {
        DevicePreferences.AutoEmoji = !DevicePreferences.AutoEmoji;
        await LocalStorage.SetItemAsync("AutoEmoji", DevicePreferences.AutoEmoji);
        MarkdownManager.RegenPipeline();
    }
}