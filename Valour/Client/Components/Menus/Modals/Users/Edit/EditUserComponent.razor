@inject HttpClient Http
@inject NavigationManager navManager


@if (User is null)
{
    <div class="background">
        <h5>Loading user...</h5>
    </div>
    return;
}

<BigMenuComponent @ref="bigMenuComponent">
    <LeftSide>
        <section>
            <p class="user-settings">USER SETTINGS</p>

            <div class="menu">
                <BigMenuTopLevelMenuComponent Icon="Settings-Icon.svg" Name="General Settings">
                    <BigMenuSubMenuComponent Icon="Settings-Icon.svg" Name="Info"></BigMenuSubMenuComponent>
                    <BigMenuSubMenuComponent Icon="Settings-Icon.svg" Name="Permissions"></BigMenuSubMenuComponent>
                    <BigMenuSubMenuComponent Name="Log Out" Color="EF3A3A"></BigMenuSubMenuComponent>
                </BigMenuTopLevelMenuComponent>
            </div>
        </section>
    </LeftSide>
    <RightSide>
        @switch (bigMenuComponent.SelectedTopLevelMenu?.Name)
        {
            case "General Settings":
                switch (bigMenuComponent.SelectedSubMenu.Name)
                {
                    case "Info":
                        <EditUserInfoComponent User="User"></EditUserInfoComponent>
                        break;
                    case "Permissions":
                        <EditUserNotificationsComponent></EditUserNotificationsComponent>
                        break;
                }
                break;
        }
    </RightSide>
</BigMenuComponent>

@code {
    [Parameter]
    public User User { get; set; }

    public BigMenuComponent bigMenuComponent { get; set; }

    public void Dispose()
    {
        bigMenuComponent.RefreshRightSide -= Refresh;
    }

    protected override Task OnAfterRenderAsync(bool firstRender)
    {

        if (firstRender)
        {
            bigMenuComponent.RefreshRightSide += Refresh;
        }
        return base.OnAfterRenderAsync(firstRender);
    }

    public async void Refresh()
    {
        if (bigMenuComponent.SelectedSubMenu?.Name == "Log Out")
        {
            await LogOut();
        }
        else
        {
            StateHasChanged();
        }
    }

    public string GetButtonClass(int tab)
    {
        if (buttonStates[tab])
        {
            return "settings-button active";
        }

        return "settings-button";
    }

    public bool[] buttonStates = new bool[2]
    {
        true, false
    };

    public int selected = 0;

    protected override async Task OnInitializedAsync()
    {
        User = ValourClient.Self;
    }

    public void SetSelectedTab(int tab)
    {
        Console.WriteLine("Set selected to " + tab);

        for (int i = 0; i < buttonStates.Length; i++)
        {
            buttonStates[i] = false;
        }

        buttonStates[tab] = true;

        selected = tab;

        StateHasChanged();
    }

    public async Task LogOut()
    {
        var response = await ValourClient.PrimaryNode.PostAsync($"api/user/self/logout", null);

        Console.WriteLine(response.Message);

        navManager.NavigateTo("/", true);
    }
}