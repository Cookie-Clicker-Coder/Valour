@inject IJSRuntime JsRuntime
@implements IAsyncDisposable

@if (!_visible)
{
    return;
}

<div id="@ElementId" class="upload-menu">
    <div class="content">
        @* Somewhat creative way to call main upload element *@
        <div class="button" @onclick="OnClickUploadAsync">
            Upload a File
        </div>
        <div class="button tenor" @onclick="OnClickTenor">
            Gifs via Tenor
        </div>
    </div>
    <div class="carrot" />
</div>

@code {
    [Parameter]
    public ChatChannelWindow ChannelWindow { get; set; }
    
    [Parameter]
    public InputComponent Input { get; set; }
    
    private string ElementId => $"upload-menu-{ChannelWindow.Id}";
    
    /// <summary>
    /// Dotnet object reference for use in Javascript
    /// </summary>
    private DotNetObjectReference<UploadMenuComponent> _thisRef;
    
    /// <summary>
    /// Module for calling Javascript functions
    /// </summary>
    private IJSInProcessObjectReference _jsModule;
    
    private bool _visible = false;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            _thisRef = DotNetObjectReference.Create(this);
            _jsModule = await JsRuntime.InvokeAsync<IJSInProcessObjectReference>("import", "./_content/Valour.Client/Components/Menus/Upload/UploadMenuComponent.razor.js");
            await _jsModule.InvokeVoidAsync("initialize", ElementId, _thisRef);
        }
    }

    private async Task OnClickUploadAsync()
    {
        await _jsModule.InvokeVoidAsync("OpenUploadFile", ChannelWindow.Id);
        Hide();
    }
    
    private async Task OnClickTenor()
    {
        // Show Tenor dialog
        await Input.ShowTenorMenu();
        // Hide self
        Hide();
    }

    public void Show()
    {
        _visible = true;
        StateHasChanged();
    }

    [JSInvokable]
    public void Hide()
    {
        if (!_visible)
            return;
        
        _visible = false;
        StateHasChanged();
    }
    
    async ValueTask IAsyncDisposable.DisposeAsync()
    {
        await _jsModule.DisposeAsync();
        _thisRef.Dispose();
    }
}
