@inherits AttachmentComponent

@if (_error)
{
    <div class="receipt-container">
        <span style="color: red;">Error loading receipt</span>
    </div>

    return;
}

@if (_loading)
{
    <TiltCard HoverMargin="1em" ShineCssStyle="border-radius: 1em" CssStyle="border-radius: 1em">
        <div class="receipt-container">
            <div class="accounts">
                <div class="account-from">
                    <div class="inner">
                        <UserInfoComponent />
                        <p class="account-number">**********</p>
                        <p class="account-number" style="font-size: 10px">000000000000</p>
                    </div>
                    <svg style="margin-bottom: 22px; margin-right: 6px" xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="rgba(255, 255, 255, 0.5)" class="bi bi-caret-right-fill" viewBox="0 0 16 16">
                        <path d="m12.14 8.753-5.482 4.796c-.646.566-1.658.106-1.658-.753V3.204a1 1 0 0 1 1.659-.753l5.48 4.796a1 1 0 0 1 0 1.506z"/>
                    </svg>
                </div>
                <div class="account-to">
                    <UserInfoComponent />
                    <p class="account-number">**********</p>
                    <p class="account-number" style="font-size: 10px">000000000000</p>
                </div>
            </div>
            <p class="sent" style="color: var(--font-color)">Sent ??? <span class="time">@@ -:-:- -/-/-</span></p>
            <p class="trans-info">0000-0000-0000-0000</p>
        </div>
    </TiltCard>
    return;
}

<TiltCard HoverMargin="1em" ShineCssStyle="border-radius: 1em" CssStyle="border-radius: 1em">
    <div class="receipt-container">
        <div class="accounts">
            <div class="account-from">
                <div class="inner">
                    <UserInfoComponent User="@_userFrom"/>
                    
                    @if (_receipt.AccountFromId.ToString() != _receipt.AccountFromName)
                    {
                        <p class="account-number">@_receipt.AccountFromName</p>
                        <p class="account-number" style="font-size: 10px">@_receipt.AccountFromId</p>
                    }
                    else
                    {
                        <p class="account-number">@_receipt.AccountFromId</p>
                        <p class="account-number" style="font-size: 10px"></p>
                    }
                </div>
                <svg style="margin-bottom: 22px; margin-right: 6px" xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="rgba(255, 255, 255, 0.5)" class="bi bi-caret-right-fill" viewBox="0 0 16 16">
                    <path d="m12.14 8.753-5.482 4.796c-.646.566-1.658.106-1.658-.753V3.204a1 1 0 0 1 1.659-.753l5.48 4.796a1 1 0 0 1 0 1.506z"/>
                </svg>
            </div>
            <div class="account-to">
                <UserInfoComponent User="@_userTo"/>
                @if (_receipt.AccountToId.ToString() != _receipt.AccountToName)
                {
                    <p class="account-number">@_receipt.AccountToName</p>
                    <p class="account-number" style="font-size: 10px">@_receipt.AccountToId</p>
                }
                else
                {
                    <p class="account-number">@_receipt.AccountToId</p>
                    <p class="account-number" style="font-size: 10px"></p>
                }
            </div>
        </div>
        <p class="sent" style="color: @(ISharedCurrency.ValourCreditsId == _receipt.Currency.Id ? "var(--v-purple)" : "var(--font-color)")">Sent @_receipt.Currency.Format(_receipt.Amount) <span class="time">@@ @_receipt.TimeStamp.ToLocalTime().ToShortTimeString() @_receipt.TimeStamp.ToLocalTime().ToShortDateString()</span></p>
        <p class="trans-info">@_receipt.TransactionId</p>
    </div>
</TiltCard>

@code {
    private EcoReceipt _receipt;

    private User _userFrom;
    private User _userTo;

    private bool _error = false;
    private bool _loading = true;
    
    protected override async Task OnInitializedAsync()
    {
        var id = Attachment.Location.Split('/').Last();

        _receipt = await Transaction.GetReceiptAsync(id);
        if (_receipt is null)
        {
            _error = true;
            return;
        }

        _userFrom = await User.FindAsync(_receipt.UserFromId);
        _userTo = await User.FindAsync(_receipt.UserToId);

        _loading = false;
    }
}