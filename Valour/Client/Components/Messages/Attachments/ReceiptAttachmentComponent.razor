@inherits AttachmentComponent

@if (_error)
{
    <div class="receipt-container">
        <span style="color: red;">Error loading receipt</span>
    </div>

    return;
}

@if (_loading)
{
    <div class="receipt-container">
        <span>Loading receipt...</span>
    </div>
    return;
}

<div class="receipt-container">
    <div class="accounts">
        <div class="account-from">
            <div class="inner">
                <UserInfoComponent User="@_userFrom"/>
                <p class="account-number">@_transaction.AccountFromId</p>
            </div>
            <svg style="margin-bottom: 4px" xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="rgba(255, 255, 255, 0.5)" class="bi bi-caret-right-fill" viewBox="0 0 16 16">
                <path d="m12.14 8.753-5.482 4.796c-.646.566-1.658.106-1.658-.753V3.204a1 1 0 0 1 1.659-.753l5.48 4.796a1 1 0 0 1 0 1.506z"/>
            </svg>
        </div>
        <div class="account-to">
            <UserInfoComponent User="@_userTo"/>
            <p class="account-number">@_transaction.AccountToId</p>
        </div>
    </div>
    <p style="margin: 0">Sent @_currency.Format(_transaction.Amount)</p>
    <p class="trans-info">@_transaction.Id</p>
    <p class="trans-info">@@ @_transaction.TimeStamp.ToLocalTime().ToShortTimeString() @_transaction.TimeStamp.ToLocalTime().ToShortDateString()</p>
</div>

@code {
    private Transaction _transaction;
    private Currency _currency;

    private User _userFrom;
    private User _userTo;

    private bool _error = false;
    private bool _loading = true;
    
    protected override async Task OnInitializedAsync()
    {
        var id = Attachment.Location.Split('/').Last();
        _transaction = await Transaction.FindAsync(id);
        if (_transaction is null)
        {
            _error = true;
            return;
        }

        _currency = await Currency.FindByPlanetAsync(_transaction.PlanetId);
        if (_currency is null)
        {
            _error = true;
            return;
        }

        _userFrom = await User.FindAsync(_transaction.UserFromId);
        _userTo = await User.FindAsync(_transaction.UserToId);

        _loading = false;
    }
}