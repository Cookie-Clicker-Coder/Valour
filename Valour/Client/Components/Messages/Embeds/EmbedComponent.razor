@implements IDisposable
@using Valour.Api.Items.Messages

@if (embed is null)
{
	return;
}
<CascadingValue Value="@this">
	<div class="embed" style="@embed.GetStyle()">
		@if (embed.CurrentlyDisplayed != null)
		{
			if (embed.CurrentlyDisplayed.Title is not null) {
				<div class="embed-title" style="@embed.CurrentlyDisplayed.GetTitleStyle(embed)">
					@((MarkupString)MarkdownManager.GetHtml(embed.CurrentlyDisplayed.Title))
				</div>
			}

			foreach (EmbedItem item in embed.CurrentlyDisplayed.Children)
			{
				<EmbedItemComponent embed="@embed" Message="@MessageWrapper" item="@item"></EmbedItemComponent>
			}

			if (embed.Pages is not null && embed.Pages.Count > 1 && !embed.HideChangePageArrows)
			{
				<div style="position: absolute;bottom: calc(1rem);left: 71px;">
					<button @onclick="PrevPage" class="btn btn-primary btn-sm" style="display: inline-block;box-shadow: none;">&lt</button>
					<p style="font-size:12px;display: inline-block;">@embed.currentPage</p>
					<button @onclick="NextPage" class="btn btn-primary btn-sm" style="display: inline-block;box-shadow: none;">&gt</button>
				</div>
			}

			if (embed.CurrentlyDisplayed.Footer is not null)
			{
				<div class="embed-footer" style="@embed.CurrentlyDisplayed.GetFooterStyle(embed)">
					@((MarkupString)MarkdownManager.GetHtml(embed.CurrentlyDisplayed.Footer))
				</div>
			}
		}
	</div>
</CascadingValue>


@code {

	[CascadingParameter]
	public MessageHolderComponent Holder { get; set; }

	[Parameter]
	public ClientMessageWrapper MessageWrapper { get; set; }

	public event Action RefreshRowComponents;
	public event Action RefreshRootItemComponents;
	public event Action RefreshFormComponents;
	public event Action RefreshItemComponents;

	private bool ProcessPageChange = false;

	private bool ProcessPageChangeForForms = false;

	public bool ProcessingEmbedUpdate = false;

	public Embed embed = null;

	public EmbedPage page { get; set; }

	public void Dispose()
	{
		ValourClient.OnPersonalEmbedUpdate -= OnPersonalEmbedUpdate;
		ValourClient.OnChannelEmbedUpdate -= OnChannelEmbedUpdate;
	}

	protected override void OnInitialized()
	{
		StateHasChanged();
		ValourClient.OnPersonalEmbedUpdate += OnPersonalEmbedUpdate;
		ValourClient.OnChannelEmbedUpdate += OnChannelEmbedUpdate;
		embed = MessageWrapper.Message.Embed;
	}

	public async Task OnChannelEmbedUpdate(ChannelEmbedUpdate update)
	{
		if (update.TargetMessageId == MessageWrapper.Message.Id)
		{
			int currentpage = embed.currentPage;
			MessageWrapper.Message.EmbedData = update.NewEmbedContent;
			MessageWrapper.Message.embedParsed = false;
			embed = MessageWrapper.Message.Embed;
			if (!embed.KeepPageOnUpdate)
			{
				embed.currentPage = embed.StartPage;
			}
			else
				embed.currentPage = currentpage;

			if (embed.currentPage >= embed.Pages.Count) 
				embed.currentPage = embed.StartPage;
			ProcessPageChange = true;
			ProcessingEmbedUpdate = true;
			UpdateItems();
			ProcessingEmbedUpdate = false;
			await Holder.ScrollToBottom();
		}
	}

	public async Task OnPersonalEmbedUpdate(PersonalEmbedUpdate update)
	{
		if (update.TargetMessageId == MessageWrapper.Message.Id)
		{
			try
			{
				int currentpage = embed.currentPage;
				MessageWrapper.Message.EmbedData = update.NewEmbedContent;
				MessageWrapper.Message.embedParsed = false;
				embed = MessageWrapper.Message.Embed;
				if (!embed.KeepPageOnUpdate)
				{
					embed.currentPage = embed.StartPage;
				}
				else
					embed.currentPage = currentpage;

				if (embed.currentPage >= embed.Pages.Count)
					embed.currentPage = embed.StartPage;
				ProcessPageChange = true;
				ProcessingEmbedUpdate = true;
				UpdateItems();
				ProcessingEmbedUpdate = false;
				await Holder.ScrollToBottom();
			}
			catch (Exception e)
			{
				Console.WriteLine(e.Message);
				Console.WriteLine(e.StackTrace);
			}
		}
	}

	protected override Task OnAfterRenderAsync(bool firstRender)
	{
		if (ProcessPageChange)
		{
			ProcessPageChange = false;
			UpdateItems();
		}
		else if (ProcessPageChangeForForms)
		{
			ProcessPageChangeForForms = false;
			RefreshRowComponents?.Invoke();
			RefreshRootItemComponents?.Invoke();
			RefreshItemComponents?.Invoke();
		}
		return base.OnAfterRenderAsync(firstRender);
	}

	public void UpdateItemComponents()
	{
		ProcessPageChangeForForms = true;
		StateHasChanged();
	}

	public void UpdateItems()
	{
		StateHasChanged();
		RefreshRowComponents?.Invoke();
		RefreshRootItemComponents?.Invoke();
		RefreshFormComponents?.Invoke();
		RefreshItemComponents?.Invoke();
		ProcessPageChangeForForms = true;
	}

	public void NextPage()
	{
		embed.NextPage();
		ProcessPageChange = true;
	}

	public void PrevPage()
	{
		embed.PrevPage();
		ProcessPageChange = true;
	}
}