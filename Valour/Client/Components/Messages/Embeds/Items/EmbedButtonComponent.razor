@inject HttpClient Http
@using Valour.Api.Models.Messages
@implements IDisposable
@inject IJSRuntime JS

<button type="button" class="btn embed-item" style="color: #ffffff;background: #000000;@Item.GetStyle()" @onclick="(async () => {await OnEmbedButtonClick();})">
    @foreach (var child in Item.Children)
    {
        <EmbedItemComponent item="@child"></EmbedItemComponent>
    }
</button>
@code {
    [Parameter]
    public EmbedItem _item {get; set;}

    [Parameter]
    public ClientMessageWrapper Message {get; set;}

    [Parameter]
    public Embed embed { get; set;}

    [Parameter]
    public EmbedFormItem FormItem { get; set; }

    [CascadingParameter]
    public EmbedComponent embedComponent { get; set; }

    [CascadingParameter]
    public IModalService Modal { get; set; }

    EmbedButtonItem Item;

    private bool ProcessClick = false;

    protected override void OnInitialized()
    {
        Item = (EmbedButtonItem)_item;
        embedComponent.RefreshItemComponents += Refresh;
    }

    public void Refresh()
    {
        Item = (EmbedButtonItem)_item;
        StateHasChanged();
    }

    public void Dispose()
    {
        embedComponent.RefreshItemComponents -= Refresh;
    }

    protected override Task OnAfterRenderAsync(bool firstRender)
    {
        if (ProcessClick)
        {
            ProcessClick = false;
            Task.Run((async () => await EmbedGoToClickHandler.HandleClick(Item, embedComponent, Modal, JS)));
        }
        return base.OnAfterRenderAsync(firstRender);
    }

    public async Task OnEmbedButtonClick()
    {
        if (Item.ClickTarget is null)
            return;

        if (Item.ClickTarget.Type != TargetType.SubmitForm)
        {
            ProcessClick = true;
            return;
        }

        //Console.WriteLine("Hello");
        //Console.WriteLine(FormItem is not null);
        //Console.WriteLine(Item.ClickTarget.Type);

        var interaction = new EmbedInteractionEvent()
        {
            MessageId = Message.Message.Id,
            ChannelId = Message.Message.ChannelId,
            TimeInteracted = DateTime.UtcNow,
            ElementId = ((EmbedFormSubmitTarget)Item.ClickTarget).EventElementId
        };

        if (Message.Message is PlanetMessage)
        {
            var planetMessage = Message.Message as PlanetMessage;
            PlanetMember SelfMember = await PlanetMember.FindAsyncByUser(ValourClient.Self.Id, planetMessage.PlanetId);

            interaction.PlanetId = SelfMember.PlanetId;
            interaction.Author_MemberId = planetMessage.AuthorMemberId;
            interaction.MemberId = SelfMember.Id;
        }

        if (FormItem is not null && Item.ClickTarget.Type == TargetType.SubmitForm)
        {
            interaction.FormData = FormItem.GetFormData();
            interaction.FormId = FormItem.Id;
            interaction.EventType = EmbedIteractionEventType.FormSubmitted;
        }

        var response = await embedComponent.MessageWrapper.Message.Node.HttpClient.PostAsJsonAsync($"api/embed/interact", interaction);

        Console.WriteLine(response.Content.ReadAsStringAsync());
    }
}