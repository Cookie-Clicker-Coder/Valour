@inject HttpClient Http
@using Valour.Api.Items.Messages
@implements IDisposable

<div style="@Item.GetStyle()" class="embed-item">
    <button type="button" class="btn btn-@Item.Size" style="background-color:#@Item.Color;color:#@Item.TextColor;" @onclick="(async () => {await OnEmbedButtonClick();})">
        @if (Item.Href != "") {
            <a href="@Item.Href" rel="nofollow" target="_blank" class="embed-button-text nohide" style="color:#@Item.TextColor;">@((MarkupString)MarkdownManager.GetHtml(Item.Text))</a>
        }
        else {
            @((MarkupString)MarkdownManager.GetHtml(Item.Text))
        }
    </button>
</div>

@code {
    [Parameter]
    public EmbedItem _item {get; set;}

    [Parameter]
    public ClientMessageWrapper Message {get; set;}
    [Parameter]
    public Embed embed { get; set;}

    [Parameter]
    public EmbedFormItem FormItem { get; set; }
    [CascadingParameter]
    public EmbedComponent embedComponent { get; set; }

    EmbedButtonItem Item;

    private bool ProcessClick = false;

    protected override void OnInitialized()
    {
        Item = (EmbedButtonItem)_item;
        embedComponent.RefreshItemComponents += Refresh;
    }

    public void Refresh()
    {
        Item = (EmbedButtonItem)_item;
        StateHasChanged();
    }

    public void Dispose()
    {
        embedComponent.RefreshItemComponents -= Refresh;
    }

    protected override Task OnAfterRenderAsync(bool firstRender)
    {
        if (ProcessClick)
        {
            ProcessClick = false;
            Task.Run((async () => await EmbedGoToClickHandler.HandleClick(Item, embedComponent)));
        }
        return base.OnAfterRenderAsync(firstRender);
    }

    public async Task OnEmbedButtonClick()
    {
        if (Item.Page != null)
        {
            ProcessClick = true;
            return;
        }

        Console.WriteLine("Hello");

        var interaction = new EmbedInteractionEvent()
        {
            EventType = EmbedIteractionEventType.ButtonClick,
            MessageId = Message.Message.Id,
            ChannelId = Message.Message.ChannelId,
            TimeInteracted = DateTime.UtcNow,
            ElementId = Item.Id
        };

        if (Message.Message is PlanetMessage)
        {
            var planetMessage = Message.Message as PlanetMessage;
            PlanetMember SelfMember = await PlanetMember.FindAsyncByUser(ValourClient.Self.Id, planetMessage.PlanetId);

            interaction.PlanetId = SelfMember.PlanetId;
            interaction.Author_MemberId = planetMessage.AuthorMemberId;
            interaction.MemberId = SelfMember.Id;
        }

        if (FormItem is not null && Item.IsSubmitButton)
        {
            interaction.FormData = FormItem.GetFormData();
            interaction.FormId = FormItem.Id;
            interaction.EventType = EmbedIteractionEventType.FormSubmitted;
        }

        var response = await Http.PostAsJsonAsync($"api/embed/interact", interaction);

        Console.WriteLine(response.Content.ReadAsStringAsync());
    }
}