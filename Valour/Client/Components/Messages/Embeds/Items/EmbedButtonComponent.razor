@inject HttpClient Http

<div style="@Item.GetStyle()" class="embed-item">
    <button type="button" class="btn btn-@Item.Size" style="background-color:#@Item.Color;color:#@Item.TextColor;" @onclick="(async () => await OnEmbedButtonClick())">
        @if (Item.Link != "") {
            <a href="@Item.Link" rel="nofollow" target="_blank" class="embed-button-text" style="color:#@Item.TextColor;">@((MarkupString)MarkdownManager.GetHtml(Item.Text))</a>
        }
        else {
            @((MarkupString)MarkdownManager.GetHtml(Item.Text))
        }
    </button>
</div>

@code {
    [Parameter]
    public EmbedItem _item {get; set;}
    [Parameter]
    public MessageRenderData Message {get; set;}
    [Parameter]
    public Embed embed { get; set;}
    [Parameter]
    public EmbedFormItem? FormItem { get; set; }

    EmbedButtonItem Item;

    protected override void OnInitialized()
    {
        Item = (EmbedButtonItem)_item;
    }

    public async Task OnEmbedButtonClick()
    {

        PlanetMember SelfMember = await PlanetMember.FindAsyncByUser(ValourClient.Self.Id, Message.Message.PlanetId);

        Api.Items.Messages.Embeds.EmbedInteractionEvent Interaction = new Valour.Api.Items.Messages.Embeds.EmbedInteractionEvent()
        {
            EventType = EmbedIteractionEventType.ButtonClick,
            PlanetId = Message.Message.PlanetId,
            MessageId = Message.Message.Id,
            Author_MemberId = Message.Message.AuthorMemberId,
            MemberId = SelfMember.Id,
            ChannelId = Message.Message.ChannelId,
            TimeInteracted = DateTime.UtcNow,
            ElementId = Item.Id
        };

        if (FormItem is not null && Item.IsSubmitButton.Value)
        {
            Interaction.FormData = FormItem.GetFormData();
            Interaction.FormId = FormItem.Id;
            Interaction.EventType = EmbedIteractionEventType.FormSubmitted;
        }

        var response = await Http.PostAsJsonAsync($"api/embed/interact", Interaction);

        Console.WriteLine(response.Content.ReadAsStringAsync());
    }

}