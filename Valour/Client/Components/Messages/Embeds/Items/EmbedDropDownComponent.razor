@implements IDisposable
@inherits BaseEmbedItemComponent

<div style="@item.GetStyle()" class="embed-item">
	@if (item.NameItem is not null)
	{
		<EmbedTextItemComponent _item="@item.NameItem"></EmbedTextItemComponent>
	}
	<div class="dropdown-center">
		<button class="btn btn-secondary dropdown-toggle" style="background-color: rgba(0, 0, 0, 0.3);border-color: rgba(255, 255, 255, 0.1);" type="button" data-bs-toggle="dropdown" aria-expanded="false">
			<div style="display: inline-block">
				<EmbedTextItemComponent _item="@Tip"></EmbedTextItemComponent>
			</div>
		</button>
		<ul class="dropdown-menu dropdown-menu-dark">
			@foreach(var dropdownitem in item.Children) {
				<li>
					<a class="dropdown-item nohide" href="#" @onclick="e => HandleSelect((EmbedDropDownItem)dropdownitem)">
						<EmbedTextItemComponent _item="dropdownitem.Children[0]"></EmbedTextItemComponent>
					</a>
				</li>
			}
		</ul>
	</div>
</div>

@code {
	public EmbedDropDownMenuItem item { get; set; }

	private EmbedItem Tip;

	protected override void OnInitialized()
	{
		item = (EmbedDropDownMenuItem)_item;
		embedComponent.RefreshItemComponents += Refresh;
		Tip = new EmbedTextItem(item.Value);
		if (item.Id is not null)
			embedComponent.ItemComponents[item.Id] = this;
	}

	public Task HandleSelect(EmbedDropDownItem dropdownitem)
	{
		Tip = (EmbedTextItem)dropdownitem.Children[0];
		item.Value = ((EmbedTextItem)dropdownitem.Children[0]).Text;
		embedComponent.UpdateItemComponents();
		return Task.CompletedTask;
	}

	public void Dispose()
    {
        embedComponent.RefreshItemComponents -= Refresh;
		if (item.Id is not null)
            embedComponent.ItemComponents.Remove(item.Id, out var _);
    }

	public override void Refresh()
	{
		if (!embedComponent.ProcessingEmbedUpdate)
			item = (EmbedDropDownMenuItem)_item;
		else
		{
			string value = item.Value;
			item = (EmbedDropDownMenuItem)_item;
			item.Value = value;
		}
		if (item.Id is not null)
			embedComponent.ItemComponents[item.Id] = this;
		StateHasChanged();
	}
}