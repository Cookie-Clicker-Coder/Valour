@implements IDisposable

@switch (item.ItemType)
{
	case EmbedItemType.Text:
		<EmbedTextItemComponent _item="@item"></EmbedTextItemComponent>
		break;
	case EmbedItemType.Button:
		<EmbedButtonComponent _item="@item" Message="@Message" embed="@embed" FormItem="@FormItem"></EmbedButtonComponent>
		break;
	case EmbedItemType.InputBox:
		<EmbedInputBoxComponent _item="@item"></EmbedInputBoxComponent>
		break;
	case EmbedItemType.Form:
		<EmbedFormComponent _item="@item" Message="@Message" embed="@embed"></EmbedFormComponent>
		break;
	case EmbedItemType.DropDownMenu:
		<EmbedDropDownComponent _item="@item"></EmbedDropDownComponent>
		break; 
	case EmbedItemType.Progress:
		<EmbedProgressComponent _item="@item"></EmbedProgressComponent>
		break; 
	case EmbedItemType.EmbedRow:
		<EmbedRowComponent Row="(EmbedRow)item" Message="@Message" embed="@embed" FormItem="@FormItem"></EmbedRowComponent>
		break;
	case EmbedItemType.TextArea:
		//<EmbedButtonComponent _item="@item" Message="@Message" embed="@embed" FormItem="@FormItem"></EmbedButtonComponent>
		break;
}
@code {
	[Parameter]
	public EmbedItem item { get; set; }

	[Parameter]
	public ClientMessageWrapper Message { get; set; }

	[Parameter]
	public Embed embed { get; set; }

	[Parameter]
	public EmbedFormItem FormItem { get; set; }

	[CascadingParameter]
	public EmbedComponent embedComponent { get; set; }

	protected override void OnInitialized()
	{
		if (item.Id is not null)
			embedComponent.EmbedRootItemComponents[item.Id] = this;
		embedComponent.RefreshRootItemComponents += Refresh;
	}

	public void Dispose()
    {
        embedComponent.RefreshRootItemComponents -= Refresh;
		if (item.Id is not null)
            embedComponent.EmbedRootItemComponents.Remove(item.Id, out var _);
    }

	public void Refresh()
	{
		if (item.Id is not null)
			embedComponent.EmbedRootItemComponents[item.Id] = this;
		StateHasChanged();
	}
}