@using Valour.Sdk.Models.Messages.Embeds.Styles;
@implements IDisposable
@inject IJSRuntime JS
@inherits BaseEmbedItemComponent

<div style="@(AdditionalDivStyle + MediaItem.GetStyle())">
	@{
		var par = new Dictionary<string, object>(){ 
            { "Attachment", MediaItem.Attachment },
			{ "MessageComponent", MessageComponent }
        };

		if (MediaItem.Styles.Any(x => x.StyleType == StyleType.Width || x.StyleType == StyleType.Height))
		{
			par.Add("CustomStyle", MediaItem.GetStyle());
			if (MediaItem.Attachment.Type == MessageAttachmentType.Image)
			{
				par.Add("Clickable", false);
			}
		}

        <div class="attachment-wrapper">
            <DynamicComponent Type="MediaItem.Attachment.GetComponentType()" Parameters="par"></DynamicComponent>
        </div>
	}
</div>

@code {
	public EmbedMediaItem MediaItem { get; set; }

	[CascadingParameter]
	public MessageComponent MessageComponent { get; set; }

	public string AdditionalDivStyle
	{
		get
		{
			if (MediaItem.ClickTarget is not null)
				return "cursor: pointer;";
			return "";
		}
	}

	protected override void OnInitialized()
	{
		MediaItem = (EmbedMediaItem)_item;
		if (MediaItem.Id is not null)
			embedComponent.ItemComponents[MediaItem.Id] = this;
		embedComponent.RefreshItemComponents += Refresh;
	}

	public void Dispose()
    {
        embedComponent.RefreshItemComponents -= Refresh;
		if (MediaItem.Id is not null)
            embedComponent.ItemComponents.Remove(MediaItem.Id, out var _);
    }

	public override void Refresh()
	{
		MediaItem = (EmbedMediaItem)_item;
		if (MediaItem.Id is not null)
			embedComponent.ItemComponents[MediaItem.Id] = this;
		StateHasChanged();
	}
}