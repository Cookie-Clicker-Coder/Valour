@using Valour.Api.Models.Messages
@inject IJSRuntime JS
@implements IDisposable

@if (MessageData == null || MessageData.IsEmpty || !IsBuilt)
{
    return;
}

<div id="@Id" class="@_class" tabindex='0' @onpointerdown='OnPointerDown' @oncontextmenu='@OnPointerDown'>
    <div class="left-info">
        @if (!Minimal)
        {
            <img alt="@name's profile picture" loading="lazy" class="author-pfp" src="@pfpurl" @onerror="OnPfpError"/>
        }
        <div class="time-container">
            <p class="time" title="@_timeTitle">
                @_timeText
            </p>
        </div>
    </div>
    <div class="content-holder">

        @if (!Minimal)
        {
            <div class="name-role-holder">
                <ContextMenuTrigger MouseButtonTrigger="MouseButtonTrigger.ContextOrHold" MenuId="@ContextMenuId" @onpointerdown='InitializeContextMenu' style='display:inline'>
                    <p @onclick="OnClickName" class="author-name" style="color: @nameColor;">
                        @name
                    </p>
                </ContextMenuTrigger>

                <div class="dot-badge-holder">
                    @if (User.SubscriptionType == UserSubscriptionTypes.Stargazer.Name)
                    {
                        <BasicTooltipComponent Title="Stargazer" Placement="top">
                            <img title="Stargazer" alt="Stargazer badge" class="dot-badge" src="_content/Valour.Client/media/stargazer-badge.svg"/>
                        </BasicTooltipComponent>
                    }
                    @if (User.Id <= 22113735421460480)
                    {
                        <span style="font-weight: bold; font-size: 8px; margin-left: 2px; color: var(--v-purple)">1k</span>
                    }
                </div>

                <p class="role-name">
                    &nbsp;- @nameTag
                </p>
            </div>
        }

        @if (MessageData.Reply is not null && !IsInnerReply)
        {
            @RenderReply
        }

        <div class="content" @ref="InnerRef">

            @if (MessageData.Message.Attachments != null)
            {
                @for (int i = 0; i < MessageData.Message.Attachments.Count; i++)
                {
                    var id = i;
                    var attachment = MessageData.Message.Attachments[id];
                    var par = new Dictionary<string, object>()
                    {
                        { "Attachment", attachment },
                        { "MessageComponent", this }
                    };

                    <div class="attachment-wrapper" @onclick="async () => await OnClickAttachment(id)">
                        @if (Ghost)
                        {
                            <div class="attachment-x">x</div>
                        }
                        <DynamicComponent Type="attachment.GetComponentType()" Parameters="par"></DynamicComponent>
                    </div>
                }
            }

            @if (MessageData.Message.Embed != null && MessageData.Message.Embed.Pages.Count > 0)
            {
                <EmbedComponent MessageWrapper="MessageData" MessageComponent="@this"></EmbedComponent>
                @if (MessageData.Message.EditedTime != null)
                {
                    <p class="edited-flag"> (Edited)</p>
                }
            }
            else
            {
                @MessageContent

                @if (Edit)
                {
                    <p class="edit-flag">(Editing)</p>
                }

                @if (MessageData.Message.EditedTime != null)
                {
                    <p class="edited-flag"> (Edited)</p>
                }
            }
        </div>
    </div>

    @if (IsInnerReply)
    {
        <div class="reply-x">x</div>
    }
</div>

@code {

    private RenderFragment RenderReply => builder =>
    {
        var messageParams = new MessageHolderComponent.MessageComponentParams()
        {
            MessageData = MessageData.Reply,
            LastMessage = null,
            Ghost = Ghost,
            IsInnerReply = true
        };

        builder.OpenComponent(0, Holder.MessageType);
        builder.AddAttribute(0, "ParamData", messageParams);
        builder.SetKey($"r-{MessageData.Message.Id}-{MessageData.Reply.Message.Id}");
        builder.CloseComponent();
    };

    private RenderFragment RenderContent(ClientMessageWrapper message) => builder =>
    {
        var fragments = message.GetMessageFragments();
        int stage = 0;

        builder.OpenElement(0, "div");
        builder.AddAttribute(0, "class", "fragments");

        foreach (var frag in fragments)
        {
            stage++;
            frag.BuildRenderTree(builder, ref stage);
        }

        builder.CloseElement();
    };

    [CascadingParameter]
    public MessageHolderComponent Holder { get; set; }

    [CascadingParameter]
    public ChatChannelWindow Window { get; set; }

    /* Set Params */

    [Parameter]
    public MessageHolderComponent.MessageComponentParams ParamData { get; set; }

    public ClientMessageWrapper MessageData { get; set; }
    public ClientMessageWrapper LastMessage { get; set; }
    public bool Ghost { get; set; }
    public bool IsInnerReply { get; set; }
    /* End Set Params */


    private RenderFragment MessageContent { get; set; }

    public User User { get; set; }

    public virtual string ContextMenuId => "general-message-context";

    public MessageComponent ReplyComponent;

    public MessageContentComponent ContentComponent;

    public ElementReference InnerRef;

    public bool ShouldRenderValue = false;

    public bool Minimal = false;

    public string Id = "";

    public string nameColor = "#ffffff";

    public string nameTag = "Default";

    public string pfpurl = "";

    public string name = "User not Found";

    private string _timeTitle = "";
    private string _timeText = "";

    public bool Edit = false;

    bool mentioned = false;

    bool IsBuilt = false;

    private string _class = "message";

    private void CalculateClass()
    {
        var newClass = "message";

        if (Minimal)
            newClass += " minimal";

        if (mentioned)
            newClass += " mentioned";

        if (Edit)
            newClass += " edit";

        if (IsInnerReply)
            newClass += " reply";

        if (Ghost)
            newClass += " ghost";

        if (MessageData.Reply is not null)
            newClass += " hasreply";

        _class = newClass;
    }

    private void CalculateTime()
    {
        var hoursAgo = (DateTime.UtcNow - MessageData.Message.TimeSent).TotalHours;
        var localTime = MessageData.Message.TimeSent.ToLocalTime();

        if (hoursAgo >= 24)
        {
            if (hoursAgo <= 48)
            {
                _timeTitle = $"Yesterday at {localTime.ToShortTimeString()}";
                _timeText = "Yesterday";
            }
            else
            {
                _timeTitle = localTime.ToShortDateString().Replace("00", "") + " " + localTime.ToShortTimeString();
                _timeText = $"{localTime.ToShortDateString().Replace("00", "")}";
            }
        }
        else
        {
            _timeTitle = localTime.ToShortDateString().Replace("00", "") + " " + localTime.ToShortTimeString();
            _timeText = localTime.ToShortTimeString().Replace(' ', '\0');
        }
    }

    // This is handled here because we don't want to go from
    // Valour.Client -> Valour.Api
    public virtual async Task InitializeContextMenu()
    {
    }

    public virtual Task OnClickName(MouseEventArgs e) =>
        ProfilePopup.Instance.OpenAsync(User, (int)e.ClientX, (int)e.ClientY, "bottomLeft");
    

    private async Task OnEditReceived(ModelUpdateEvent eventData)
    {
        // Console.WriteLine("EDIT RECEIVED");
        // Console.WriteLine(JsonSerializer.Serialize(eventData));
        await BuildMessage();
        await CloseEditMode();
    }

    public async Task OnPointerDown()
    {
        if (Ghost)
        {
            if (IsInnerReply)
            {
                Console.WriteLine("Removing replyto");
                var input = Window.Component.InputComponent;
                await input.RemoveReply();
            }
        }
        else
        {
            await WindowManager.Instance.SetSelectedWindow(Window);

            // Initialize message
            await MessageContextMenuComponent.Initialize(MessageData, Window.Component, this);
        }
    }

    public async Task OnClickAttachment(int id)
    {
        if (Ghost)
        {
            var input = Window.Component.InputComponent;
            await input.RemoveAttachment(id);
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await JS.InvokeVoidAsync("OnMessageLoad", InnerRef);

        if (firstRender)
        {
            // Clear notification if one exists for this message
            var found = ValourClient.UnreadNotificationsLookup.TryGetValue(MessageData.Message.Id, out var notification);
            if (found && notification.TimeRead is null)
            {
                await ValourClient.MarkNotificationRead(notification, true);
            }
        }
        
        // #if DEBUG
        // Console.WriteLine("Rendered message " + MessageData.Message.Id);
        // #endif
    }

    public async Task OpenEditMode()
    {
        Edit = true;

        CalculateClass();

        ReRender();

        await Window.Component.OpenEditMode(this);
    }

    public async Task CloseEditMode(bool cancel = false)
    {
        if (!Edit)
            return;

        Edit = false;

        CalculateClass();

        await Window.Component.CloseEditMode(cancel);

        ReRender();
    }

    public async Task SetMessage(ClientMessageWrapper message)
    {
        this.MessageData = message;
        await BuildMessage();

        ReRender();
    }

    public async Task RefreshMessage()
    {
        await BuildMessage();
        StateHasChanged();
    }

    public void SetLast(ClientMessageWrapper msg)
    {
        LastMessage = msg;
    }

    public async Task BuildMessage(bool render = true)
    {
        if (MessageData == null)
            return;

        // Check if we are a minimal message
        CheckMinimal();

        if (!IsInnerReply)
            mentioned = await MessageData.Message.CheckIfMentioned();

        CalculateClass();
        CalculateTime();

        // Build actual message content
        MessageContent = RenderContent(MessageData);

        if (Minimal)
        {
            IsBuilt = true;

            if (render)
                ReRender();

            return;
        }

        name = await MessageData.Message.GetAuthorNameAsync();
        nameColor = await MessageData.Message.GetAuthorColorAsync();
        nameTag = await MessageData.Message.GetAuthorRoleTagAsync();
        pfpurl = await MessageData.Message.GetAuthorImageUrlAsync();

        IsBuilt = true;

        if (render)
            ReRender();
    }

    protected override async Task OnInitializedAsync()
    {
        this.MessageData = ParamData.MessageData;
        this.LastMessage = ParamData.LastMessage;
        this.Ghost = ParamData.Ghost;
        this.IsInnerReply = ParamData.IsInnerReply;
        
        await base.OnInitializedAsync();

        if (MessageData is null)
            return;

        Id = $"m-{MessageData.Message.ChannelId}-{MessageData.Message.Id}";

        User = await MessageData.Message.GetAuthorUserAsync();

        await BuildMessage(false);

        if (User != null)
            User.OnUpdated += OnUserUpdated;
        
        if (!IsInnerReply && !Ghost)
        {
            Holder.AddRenderedMessage(this);
        }
    }

    public async Task OnUserUpdated(ModelUpdateEvent eventData)
    {
        bool render = false;

        if (eventData.PropsChanged.Contains(nameof(User.Name)))
        {
            render = true;
            name = await MessageData.Message.GetAuthorNameAsync();
        }

        if (eventData.PropsChanged.Contains(nameof(User.PfpUrl)))
        {
            render = true;
            pfpurl = await MessageData.Message.GetAuthorImageUrlAsync();
        }

        if (render)
        {
            ReRender();
        }
    }

    public void CheckMinimal()
    {
        if (LastMessage != null && MessageData != null)
        {
            if (MessageData.Reply is not null)
            {
                Minimal = false;
                return;
            }
            if (LastMessage.Message.AuthorUserId == MessageData.Message.AuthorUserId)
            {
                Minimal = true;
                return;
            }
        }

        Minimal = false;
    }

    public void ReRender()
    {
        if (Ghost && IsInnerReply) return;

        ShouldRenderValue = true;

        ContentComponent?.ReRender();

        StateHasChanged();

        ShouldRenderValue = false;
    }

    void IDisposable.Dispose()
    {
        if (Holder != null)
        {
            Holder.RemoveRenderedMessage(this);
        }
    }

    private void OnPfpError()
    {
        pfpurl = PfpUtility.GetFailedPfpUrl(User);
        ReRender();
    }

    /// <summary>
    /// This prevents the message from re-rendering. This should be expanded to support message edits in the future.
    /// </summary>
    protected override bool ShouldRender()
    {
        if (Ghost && IsInnerReply) return false;

        return ShouldRenderValue;
    }

}