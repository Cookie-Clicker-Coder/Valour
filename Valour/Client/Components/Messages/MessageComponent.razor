@    using Valour.Api.Items.Messages
@inject IJSRuntime JS
@implements IDisposable

@if (Message == null || Message.IsEmpty)
{
    return;
}

@{
    var width = "";
    if (Reply)
        width = "fit-content";
}

<div style="width: @width" class="message-outer">
    <ContextMenuTrigger @onpointerdown:stopPropagation="true" MenuId="message-context">
        <div @onpointerdown='OnPointerDown' @oncontextmenu='OnPointerDown'>
            <div id="@Id" class="@Class message-base" @ref='this_ref' tabindex='0'>

                @if (Minimal)
                {
                    <div class="time-container">
                        <p class="time">
                            @Message.TimeSent.ToLocalTime().ToShortTimeString().Replace(' ', '\0')
                        </p>
                    </div>
                    <div class="message-content">

                        <p class="content" @ref="InnerRef">

                            @if (Message.Attachments != null && Message.Attachments.Count > 0)
                            {
                                var i = 0;

                                @foreach (var attachment in Message.Attachments)
                                {
                                    var par = new Dictionary<string, object>()
                                    {
                                        { "Attachment", attachment }
                                    };

                                    var id = i;

                                    <div class="attachment-wrapper" @onclick="async () => await OnClickAttachment(id)">
                                        @if (Ghost)
                                        {
                                            <div class="attachment-x">x</div>
                                        }
                                        <DynamicComponent Type="attachment.GetComponentType()" Parameters="par"></DynamicComponent>
                                    </div>

                                    i++;
                                }
                            }

                            @if (Message.Embed != null && Message.Embed.Pages.Count > 0)
                            {
                                <EmbedComponent embed="@Message.Embed" Message="Message"></EmbedComponent>
                            }
                            else
                            {
                                string key = "";

                                if (Ghost)
                                {
                                    key = $"ghost-{Window.Id}";
                                }
                                else
                                {
                                    key = $"content-{Message.Message_Index}-{Message.TimeSent}-{Window.Id}";
                                }

                                <MessageContentComponent @key="key" @ref="ContentComponent" Message="Message"></MessageContentComponent>
                            }
                        </p>
                    </div>

                }
                else
                {
                    <div style="display:inline-block; position: absolute">
                        <img class="author-pfp" src="@pfpurl" @onerror="OnPfpError" />
                        <div class="time-container">
                            <p class="time">
                                @Message.Message.TimeSent.ToLocalTime().ToShortTimeString().Replace(' ', '\0')
                            </p>
                        </div>
                    </div>
                    <div class="message-content">
                        @if (Author != null)
                        {
                            <div style="width: max-content">
                                <ContextMenuTrigger MenuId="member-context" @onpointerdown='async () => await InnerMemberContextMenuComponent.Initialize(Author)' style='display:inline'>
                                    <p class="author-name" style="color: @roleColor;" id="@Author.Id,@Message.Message.ChannelId">
                                        @name
                                    </p>
                                </ContextMenuTrigger>

                                <p class="role-name">
                                    &nbsp;- @roleName
                                </p>
                            </div>
                        }
                        else
                        {
                            <p class="author-name" style="color: @roleColor;">
                                User not found
                            </p>
                        }
                        @if (ReplyMessage is not null && !Reply)
                        {
                            string replykey = $"reply-{Window.Id}";

                            <MessageComponent Message="ReplyMessage" Key="@replykey"  Submessage="true" Ghost="Ghost" Last_Message="null" Reply="true"></MessageComponent>
                        }
                        <p class="content" @ref="InnerRef">

                            @if (Message.Attachments != null && Message.Attachments.Count > 0)
                            {
                                var i = 0;

                                @foreach (var attachment in Message.Attachments)
                                {
                                    var par = new Dictionary<string, object>()
                                    {
                                        { "Attachment", attachment }
                                    };

                                    var id = i;

                                    <div class="attachment-wrapper" @onclick="async () => await OnClickAttachment(id)">
                                        @if (Ghost)
                                        {
                                            <div class="attachment-x">x</div>
                                        }
                                        <DynamicComponent Type="attachment.GetComponentType()" Parameters="par"></DynamicComponent>
                                    </div>

                                    i++;
                                }
                            }

                            @if (Message.Message.Embed != null && Message.Message.Embed.Pages.Count > 0)
                            {

                                Console.WriteLine(Message.Message.Embed.Pages.Count);

                                <EmbedComponent embed="@Message.Message.Embed" Message="Message"></EmbedComponent>
                            }
                            else
                            {
                                string key = "";

                                if (Ghost)
                                {
                                    key = $"ghost-{Window.Id}";
                                }
                                else
                                {
                                    key = $"content-{Message.Message_Index}-{Message.TimeSent}-{Window.Id}";
                                }

                                <MessageContentComponent @key="key" @ref="ContentComponent" Message="Message"></MessageContentComponent>
                            }
                        </p>
                    </div>

                    @if (Reply)
                    {
                        <div class="reply-x">x</div>
                    }
                }
            </div>
        </div>
    </ContextMenuTrigger>
</div>

@code {
    // Demonstrates how a parent component can supply parameters
    [Parameter]
    public MessageRenderData Message { get; set; }

    [Parameter]
    public MessageRenderData Last_Message { get; set; }

    [CascadingParameter]
    public MessageHolderComponent Holder { get; set; }

    [CascadingParameter]
    public ChatChannelWindow Window { get; set; }

    public MessageContentComponent ContentComponent;

    public ElementReference InnerRef;

    [Parameter]
    public string Key { get; set; }

    [Parameter]
    public bool Ghost { get; set; }

    public PlanetMember Author;

    public bool ShouldRenderValue = false;

    public bool Minimal = false;

    [Parameter]
    public bool Reply { get; set; }

    public MessageRenderData ReplyMessage;

    public ElementReference this_ref;

    public string Class
    {
        get
        {
            string _class = "";

            if (Minimal)
            {
                _class += "multi-message";
            }
            else
            {
                _class += "message";
            }

            if (mentioned)
            {
                _class += " mentioned";
            }

            if (Edit)
            {
                _class += " edit";
            }

            if (Reply)
            {
                _class += " reply";
            }

            if (ReplyMessage is not null)
            {
                _class += " hasreply";
            }

            return _class;
        }
    }

    string Id = "";

    string roleColor = "#ffffff";

    string roleName = "Default";

    string pfpurl = "_content/Valour.Client/icon-512.png";

    string name = "";

    public bool Edit = false;

    public long roleId;

    bool mentioned = false;

    [Parameter]
    public bool Submessage { get; set; }

    private PlanetRole primaryRole;

    public async Task OnPointerDown()
    {
        if (Ghost)
        {
            if (Reply)
            {
                Console.WriteLine("Removing replyto");
                var input = Window.Component.InputComponent;
                await input.RemoveReply();

            }
        }
        else
        {
            await WindowManager.Instance.SetSelectedWindow(Window);

            // Initialize message
            await MessageContextMenuComponent.Initialize(Message, Window.Component, this);
        }
    }

    public async Task OnClickAttachment(int id)
    {
        if (Ghost)
        {
            var input = Window.Component.InputComponent;
            await input.RemoveAttachment(id);
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await JS.InvokeVoidAsync("OnMessageLoad", InnerRef);
    }

    public async Task OpenEditMode()
    {
        // Remove this when it's ready for prod
        return;

        //await this_ref.FocusAsync();

        Edit = true;
        ReRender();

        await Window.Component.OpenEditMode(this);
    }

    public async Task CloseEditMode()
    {
        if (!Edit)
            return;

        Edit = false;
        ReRender();
    }

    public async Task SetMessage(MessageRenderData message)
    {
        this.Message = message;
        await BuildMessage();

        ReRender();
    }

    public async Task RefreshMessage()
    {
        await BuildMessage();
        StateHasChanged();
    }

    public void SetLast(MessageRenderData msg)
    {
        Last_Message = msg;
    }

    public async Task BuildMessage()
    {
        if (Message == null)
        {
            return;
        }

        if (Message.ReplyToId is not null)
        {
            ReplyMessage = new ClientPlanetMessage(await PlanetMessage.FindAsync((long)Message.Message.ReplyToId, Message.Message.ChannelId, Message.Message.PlanetId));
        }

        CheckMinimal();

        if (!Submessage)
        {
            var selfId = Window.Component.SelfMember.Id;

            if (Message.Message.MentionsData != null)
            {
                mentioned = Message.Message.MentionsData.Contains(selfId.ToString());
            }
        }

        if (Minimal)
        {
            return;
        }

        Author = await Message.Message.GetAuthorMemberAsync();

        name = await Author.GetNameAsync();

        roleColor = await Author.GetRoleColorAsync();

        primaryRole = await Author.GetPrimaryRoleAsync();

        if (primaryRole != null)
        {
            roleName = primaryRole.Name;
            roleId = primaryRole.Id;
        }

        string pfp = await Author.GetPfpUrlAsync();

        //Console.WriteLine(Submessage);
        //Console.WriteLine(Message.Mentions_Data);

        if (Author != null && !string.IsNullOrWhiteSpace(pfp))
        {
            pfpurl = pfp;
        }
    }

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        if (Message is null)
            return;

        Id = $"m-{Message.ChannelId}-{Message.Message_Index}";

        if (!Submessage)
        {
            Holder.AddRenderedMessage(this);
        }

        ItemObserver<PlanetRole>.OnAnyUpdated += OnRoleUpdate;
        ItemObserver<PlanetRole>.OnAnyDeleted += OnRoleDeletion;

        await BuildMessage();

        if (Author != null)
        {
            Author.OnUpdated += OnAuthorUpdated;
            var user = await Author.GetUserAsync();

            if (user != null)
                user.OnUpdated += OnUserUpdated;
        }
    }

    public async Task OnAuthorUpdated(int flags)
    {
        if ((flags & PlanetMember.FLAG_UPDATE_ROLES) != 0)
            await UpdateForRoleChange();

        name = await Author.GetNameAsync();
        pfpurl = await Author.GetPfpUrlAsync();

        ReRender();
    }

    public async Task OnUserUpdated(int flags)
    {
        name = await Author.GetNameAsync();
        pfpurl = await Author.GetPfpUrlAsync();

        ReRender();
    }

    public void CheckMinimal()
    {
        if (Last_Message != null && Message != null)
        {
            if (ReplyMessage is not null)
            {
                Minimal = false;
                return;
            }
            if (Last_Message.Message.AuthorUserId == Message.Message.AuthorUserId)
            {
                Minimal = true;
                return;
            }
        }

        Minimal = false;
    }

    public async Task UpdateForRoleChange()
    {
        roleColor = await Author.GetRoleColorAsync();
        var primRole = await Author.GetPrimaryRoleAsync();
        roleName = primRole.Name;
        roleId = primRole.Id;
    }

    public void ReRender()
    {
        if (Ghost && Reply) return;

        ShouldRenderValue = true;
        StateHasChanged();

        ContentComponent?.ReRender();

        ShouldRenderValue = false;
    }

    public async Task OnRoleUpdate(PlanetRole role, bool newItem, int flags)
    {
        if (role != null && primaryRole != null && role.Id == primaryRole.Id)
        {
            primaryRole = role;
            await UpdateForRoleChange();
            ReRender();
        }
    }

    public async Task OnRoleDeletion(PlanetRole role)
    {
        if (role.Id == primaryRole.Id)
        {
            primaryRole = await Author.GetPrimaryRoleAsync();
            await UpdateForRoleChange();
            ReRender();
        }
    }

    void IDisposable.Dispose()
    {
        if (Holder != null)
        {
            Holder.RemoveRenderedMessage(this);
        }
    }

    protected async Task OnPfpError()
    {
        pfpurl = "_content/Valour.Client/icon-512.png";

        Console.WriteLine("pfp error caught");

        ReRender();
    }

    /// <summary>
    /// This prevents the message from re-rendering. This should be expanded to support message edits in the future.
    /// </summary>
    protected override bool ShouldRender()
    {
        if (Ghost && Reply) return false;

        return ShouldRenderValue;
    }

}
