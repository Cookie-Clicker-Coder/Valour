@using Valour.Api.Models.Messages
@inherits MessageComponent
@implements IDisposable

@{
    // Renders the base component
    base.BuildRenderTree(__builder);
}

@code {
    PlanetMessage _message;
    PlanetMember _author;

    public override string ContextMenuId => "member-context";

    protected override async Task OnInitializedAsync()
    {
        // Do base init
        await base.OnInitializedAsync();

        // Cast message
        _message = ((PlanetMessage)MessageData.Message);

        // Get member and hook event
        _author = await _message.GetAuthorMemberAsync();
        _author.OnUpdated += OnAuthorUpdated;
        _author.OnRoleModified += OnAuthorRoleChange;
    }

    public override async Task InitializeContextMenu()
    {
        await InnerMemberContextMenuComponent.Initialize(_author, Window);
    }

    public override async Task OnClickName(MouseEventArgs e)
    {
        await ProfilePopup.Instance.OpenAsync(_author, (int)e.ClientX, (int)e.ClientY, "bottomLeft");
    }

    public async Task OnAuthorRoleChange(MemberRoleEvent roleEvent)
    {
        await UpdateForRoleChange();
    }

    private async Task OnAuthorUpdated(ModelUpdateEvent eventData)
    {
        var render = false;
        
        if (eventData.PropsChanged.Contains(nameof(_author.Nickname)))
        {
            render = true;
            name = await MessageData.Message.GetAuthorNameAsync();
        }

        if (eventData.PropsChanged.Contains(nameof(_author.MemberPfp)))
        {
            render = true;
            pfpurl = await MessageData.Message.GetAuthorImageUrlAsync();
        }

        if (render)
        {
            ReRender();
        }
    }
    
    // Update for any role changes
    private async Task UpdateForRoleChange()
    {
        var newPrimaryRole = await _author.GetPrimaryRoleAsync();

        // Cosmetic changes
        nameTag = newPrimaryRole.Name;
        nameColor = newPrimaryRole.Color;
        
        ReRender();
    }
    
    void IDisposable.Dispose()
    {
        if (_author is not null)
        {
            _author.OnUpdated -= OnAuthorUpdated;
            _author.OnRoleModified -= OnAuthorRoleChange;
        }
        
        if (Holder != null)
        {
            Holder.RemoveRenderedMessage(this);
        }
    }

}

