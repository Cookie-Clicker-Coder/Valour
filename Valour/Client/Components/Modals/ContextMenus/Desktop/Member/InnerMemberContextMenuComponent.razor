@inject IJSRuntime JS
@inject WindowManager windowManager

@if (Window is not null)
{
	<BlazorContextMenu.Item OnClick='OnClickMessage' CssClass='context-item'>Message</BlazorContextMenu.Item>
}

@if (IsFriend)
{
	<BlazorContextMenu.Item OnClick='OnClickRemoveFriend' CssClass='context-item'>Remove Friend</BlazorContextMenu.Item>
}
else
{
	<BlazorContextMenu.Item OnClick='OnClickAddFriend' CssClass='context-item'>Add Friend</BlazorContextMenu.Item>
}
@if (CanKick)
{
	<BlazorContextMenu.Item OnClick='OnClickKick' CssClass='context-item'>Kick</BlazorContextMenu.Item>
}
@if (CanBan) {
	<BlazorContextMenu.Item OnClick='OnClickBan' CssClass='context-item'>Ban</BlazorContextMenu.Item>
}
<BlazorContextMenu.Item CssClass='context-item'>
	Roles
	<SubMenu CssClass='context-sub'>
		<MemberRolesMenuComponent Member="Member"></MemberRolesMenuComponent>
	</SubMenu>
</BlazorContextMenu.Item>
<BlazorContextMenu.Item CssClass='context-item'>
	Copy
	<SubMenu CssClass='context-sub'>
		<BlazorContextMenu.Item OnClick='OnClickCopyNickname' CssClass='context-item'>Nickname</BlazorContextMenu.Item>
		<BlazorContextMenu.Item OnClick='OnClickCopyUsername' CssClass='context-item'>Username</BlazorContextMenu.Item>
		<BlazorContextMenu.Item OnClick='OnClickCopyMemberId' CssClass='context-item'>Member Id</BlazorContextMenu.Item>
		<BlazorContextMenu.Item OnClick='OnClickCopyUserId' CssClass='context-item'>User Id</BlazorContextMenu.Item>
	</SubMenu>
</BlazorContextMenu.Item>

@code {

	[CascadingParameter]
	public IModalService Modal { get; set; }

	public static PlanetMember Member { get; set; }
	public static User User { get; set; }
	public static bool CanKick { get; set; }
	public static bool CanBan { get; set; }
	public static bool IsFriend { get; set; }

	public static ClientWindow Window { get; set; }

	public async Task OnClickAddFriend()
	{
		var result = await ValourClient.AddFriendAsync(User.Name);

		if (!result.Success)
		{
			await Logger.Log($"Failed to add friend:\n{result.Message}", "orange");
			return;
		}

		IsFriend = true;
		StateHasChanged();
	}

	public async Task OnClickRemoveFriend()
	{
		var result = await ValourClient.RemoveFriendAsync(User.Name);

		if (!result.Success)
		{
			await Logger.Log($"Failed to remove friend:\n{result.Message}", "orange");
			return;
		}

		IsFriend = false;
		StateHasChanged();
	}

	public static async Task Initialize(PlanetMember member, ClientWindow window)
	{
		Member = member;
		Window = window;

		User = await member.GetUserAsync();
		IsFriend = ValourClient.Friends.Any(x => x.Id == User.Id);

		if ((await member.GetPlanetAsync()).OwnerId == ValourClient.Self.Id)
		{
			CanKick = true;
			CanBan = true;
		}
		else {
			var selfmember = await PlanetMember.FindAsyncByUser(ValourClient.Self.Id, member.PlanetId);
			var primaryrole = await selfmember.GetPrimaryRoleAsync();
			CanKick = primaryrole.HasPermission(PlanetPermissions.Kick);
			CanBan = primaryrole.HasPermission(PlanetPermissions.Kick);
		}

	}

	public async Task OnClickMessage()
	{
		var channel = await DirectChatChannel.FindAsyncByUser(User.Id);

		var newWindow = new DirectChatChannelWindow(channel);

		Console.WriteLine($"Switching window {Window.Id} to direct chat channel {channel.Id}");

		await windowManager.ReplaceWindow(Window, newWindow);
		await windowManager.SetSelectedWindow(newWindow);
		await windowManager.SetFocusedPlanet(null);
	}

	public async Task OnClickCopyNickname(){
		await JS.InvokeVoidAsync("clipboardCopy.copyText", await Member.GetNameAsync());
	}

	public async Task OnClickCopyUsername(){
		var user = await Member.GetUserAsync();
		await JS.InvokeVoidAsync("clipboardCopy.copyText", user.Name);
	}

	public async Task OnClickCopyMemberId(){
		await JS.InvokeVoidAsync("clipboardCopy.copyText", Member.Id);
	}

	public async Task OnClickCopyUserId(){
		var user = await Member.GetUserAsync();
		await JS.InvokeVoidAsync("clipboardCopy.copyText", user.Id);
	}

	public async Task OnClickKick()
	{
		ConfirmModalData modalData =
        new($"Kick {Member.Nickname}?",
             $"This will remove them from the planet.",
             "Confirm",
             "Cancel", 
             async () =>
             {
				 var result = Member.Node.DeleteAsync($"api/{nameof(Planet)}/{Member.PlanetId}/{nameof(PlanetMember)}/{Member.Id}");
                 Console.WriteLine(result);
             },
             async () =>
             {

             }
        );

        ModalParameters modParams = new();
        modParams.Add("Data", modalData);

        Modal.Show<ConfirmModalComponent>("Confirm", modParams, new ModalOptions() { Class = "modal-shrink-fit" });
	}

	public async Task OnClickBan()
	{
		ModalParameters par = new();
        par.Add("Member", Member);
        Modal.Show<BanUserComponent>("Ban User", par);
	}
}