@inject IJSRuntime JS
@inject IBlazorContextMenuService contextService
@using Valour.Api.Items.Messages

<ContextMenu Id='message-context' CssClass='context' class='member-context'>
    <BlazorContextMenu.Item CssClass='context-item'>
        Copy
        <SubMenu CssClass='context-sub'>
            <BlazorContextMenu.Item OnClick='OnClickCopyText' CssClass='context-item'>Text</BlazorContextMenu.Item>
            <BlazorContextMenu.Item OnClick='OnClickCopyId' CssClass='context-item'>Message Id</BlazorContextMenu.Item>
        </SubMenu>
    </BlazorContextMenu.Item>

    <BlazorContextMenu.Item OnClick='OnClickReply' CssClass='context-item'>
        Reply
    </BlazorContextMenu.Item>

    @if (MessageWrapper.Message.AuthorUserId == ValourClient.Self.Id)
    {
        <BlazorContextMenu.Item OnClick='OnClickEdit' CssClass='context-item'>
            Edit
        </BlazorContextMenu.Item>
    }

    @if (DeletePermission == PermissionState.True)
    {
        <BlazorContextMenu.Item OnClick='OnClickDelete' CssClass='context-item'>
            Delete
        </BlazorContextMenu.Item>
    }

    @if (AuthorMember is not null)
    {
        <BlazorContextMenu.Item CssClass='context-item'>
            Member
            <SubMenu CssClass='context-sub'>
                <InnerMemberContextMenuComponent></InnerMemberContextMenuComponent>
            </SubMenu>
        </BlazorContextMenu.Item>
    }
</ContextMenu>


@code {

    [CascadingParameter]
    public IModalService Modal { get; set; }

    public static MessageComponent MessageComponent { get; set; }

    public static ClientMessageWrapper MessageWrapper { get; set; }

    public static PlanetMember AuthorMember { get; set; }

    public static PermissionState DeletePermission = PermissionState.False;

    public static async Task Initialize(ClientMessageWrapper messageWrapper, ChatChannelWindowComponent window, MessageComponent component)
    {
        MessageComponent = component;
        MessageWrapper = messageWrapper;

        if (messageWrapper.Message is PlanetMessage)
        {
            AuthorMember = await ((PlanetMessage)messageWrapper.Message).GetAuthorMemberAsync();
            await InnerMemberContextMenuComponent.Initialize(AuthorMember);
        }
        else
        {
            AuthorMember = null;
        }

        // Console.WriteLine(window.Channel_Permissions.Code + " | " + window.Channel_Permissions.Mask);

        if (messageWrapper.Message.AuthorUserId == ValourClient.Self.Id)
        {
            DeletePermission = PermissionState.True;
        }
        else {
            DeletePermission = window.ChannelPermissions.GetPermissionState(ChatChannelPermissions.ManageMessages);
        }

        // Console.WriteLine(Can_Delete);
    }

    public async Task OnClickReply()
    {
        var input = MessageComponent.Holder.Window.Component.InputComponent;
        await input.SetReplyMessage(MessageWrapper);
    }

    public async Task OnClickDelete()
    {
        ConfirmModalData confirm = new("Delete message?", MessageWrapper.Message.Content, "Delete", "Cancel",
            async () =>
            {
                await MessageWrapper.Message.DeleteAsync();
            },
            async () =>
            {
                // Nothing
            }
        );

        ModalParameters par = new();
        par.Add("Data", confirm);

        Modal.Show<ConfirmModalComponent>("Delete Message", par, new ModalOptions() { Class = "modal-shrink-fit" });
    }

    public async Task OnClickEdit()
    {
        await MessageComponent.OpenEditMode();
    }

	public async Task OnClickCopyText(){
		await JS.InvokeVoidAsync("clipboardCopy.copyText", MessageWrapper.Message.Content);
	}

	public async Task OnClickCopyId(){
		await JS.InvokeVoidAsync("clipboardCopy.copyText", MessageWrapper.Message.Id);
	}
}
