@inject HttpClient Http
@inject NavigationManager navManager
@inject ClientWindowManager windowManager

<div class="col-md-12">
	<section>
		<h2>Create a new Planet</h2>

		<h4>The birth of a community!</h4>
		
		<hr />

		<div asp-validation-summary="All" class="text-info"></div>

		<div class="form-group mt-4">
			<label>Community Name</label>
			<input class="form-control" @bind-value="@name" type='' />
			<span id="name-span" style="color:#888888">@nameSpan</span>
		</div>

		<div class="form-group mt-4">
			<label>Description</label>
			<input class="form-control" @bind-value="@desc" />
			<span id="name-span" style="color:#888888">@descSpan</span>
		</div>

		@if (!string.IsNullOrEmpty(errorSpan))
		{
			<span class="danger-text mt-4 mb-4">@errorSpan</span>
		}

		<div class="form-group mt-4">
			<button class="btn v-button mt-2" @onclick="OnClickSubmit">Submit</button>
		</div>
	</section>
</div>

@code {
	// Input fields
	string name;
	string desc;

	// Spans
	string nameSpan = "The name of your community";

	string descSpan = "A description of your community";

	string errorSpan = null;

	[CascadingParameter]
	public BlazoredModalInstance ModalInstance { get; set; }

	private async Task OnClickSubmit(MouseEventArgs e)
	{
		// Require a name
		if (string.IsNullOrWhiteSpace(name))
		{
			name = "Please input a planet name.";
			return;
		}

		var new_planet = new Planet()
		{
			Name = name,
			Description = desc
		};

		var response = await ValourClient.PostAsyncWithResponse<Planet>($"api/planet", new_planet);

		if (!response.Success)
		{
			errorSpan = response.Message;
			StateHasChanged();
			return;
		}

		await ModalInstance.CloseAsync();

		descSpan = "Planet created.";

		var planet = response.Data;

		await ValourCache.Put(planet.Id, planet);

		PlanetChatChannel mainChannel = await planet.GetPrimaryChannelAsync();

		windowManager.ClearWindows();

		await windowManager.AddWindow(new ChatChannelWindow(0, mainChannel));

		await windowManager.SetSelectedWindow(0);
	}

	private async Task OnImageInput()
	{
	}

}