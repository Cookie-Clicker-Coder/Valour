@inject NavigationManager navManager
@inject WindowManager windowManager
@implements IDisposable

<!-- Logo and version if planet is not focused -->
@if (_planet is null)
{
    <div class="logo-container">
        <LogoComponent></LogoComponent>
        <div style="display:inline-block; vertical-align: middle">
            <p class="valour-name">
                Valour
            </p>
            <p class="valour-version">
                Version @typeof(ISharedUser).Assembly.GetName().Version.ToString() Pre-Alpha
            </p>
        </div>
    </div>
    
    return;
}

<!-- Planet info if focused -->

<h2 class="planet-title">@_planet.Name</h2>

@if (_canEdit)
{
    <img alt="Edit planet button" class="settings" src="_content/Valour.Client/media/Settings-Icon.svg" @onclick='() => Modal.Show<EditPlanetComponent>("Edit Planet")' id="edit-planet-button">
}

<p class="planet-desc">@_planet.Description</p>

@code {

    [CascadingParameter]
    public IModalService Modal { get; set; }

    private Planet _planet;
    private PlanetMember _selfMember;
    private bool _canEdit = false;

    protected override void OnInitialized()
    {
        windowManager.OnPlanetFocused += OnPlanetFocused;
        ValourClient.OnPlanetClose += OnPlanetClose;
    }

    void IDisposable.Dispose()
    {
        windowManager.OnPlanetFocused -= OnPlanetFocused;
        ValourClient.OnPlanetClose -= OnPlanetClose;
        if (_planet is not null)
        {
            _planet.OnUpdated -= OnPlanetUpdate;
        }
    }

    private async Task OnPlanetClose(Planet planet)
    {
        if (planet.Id == _planet.Id)
            await OnPlanetFocused(null);
    }

    private Task OnPlanetUpdate(ModelUpdateEvent eventData)
    {
        StateHasChanged();
        return Task.CompletedTask;
    }

    private async Task OnPlanetFocused(Planet planet)
    {
        if (planet is null)
        {
            if (_planet is not null)
            {
                _planet.OnUpdated -= OnPlanetUpdate;
                _planet = null;
            }
            
            if (_selfMember is not null)
            {
                _selfMember.OnRoleModified -= OnRoleModified;
                _selfMember = null;
            }
        }
        else
        {
            // Remove old event
            if (_planet is not null)
            {
                _planet.OnUpdated -= OnPlanetUpdate;
            }
            // Add new event
            planet.OnUpdated += OnPlanetUpdate;
            
            var newMember = await ValourClient.GetSelfMember(planet);
            
            // Remove old
            if (_selfMember is not null)
            {
                _selfMember.OnRoleModified -= OnRoleModified;
            }
            // Add new
            if (newMember is not null)
            {
                newMember.OnRoleModified += OnRoleModified;
            }

            _selfMember = newMember;
            _planet = planet;
            
            await DetermineCanEdit();
        }

        ReRender();
    }

    private async Task OnRoleModified(MemberRoleEvent eventData)
    {
        await DetermineCanEdit();
        ReRender();
    }

    private async Task DetermineCanEdit()
    {
        var selfRole = await _selfMember.GetPrimaryRoleAsync();

        if (_planet.OwnerId == _selfMember.UserId ||
            selfRole.HasPermission(PlanetPermissions.Manage))
        {
            _canEdit = true;
        }
        else
        {
            _canEdit = false;
        }
    }

    private void ReRender()
    {
        StateHasChanged();
    }
}
