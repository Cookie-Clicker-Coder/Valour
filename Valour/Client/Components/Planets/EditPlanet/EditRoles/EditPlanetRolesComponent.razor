@inject IJSRuntime JS

<h3>Edit Roles</h3>
<hr/>
<br/>

<div class="settings-inner" id="edit-inner-settings">

    @{
        string editStyle = "display: none";
        if (editMode)
        {
            editStyle = "";
        }
    }

    <div style="@editStyle">
        <div class="rolecreate-cont">
            <div class="form-group mt-2">
                <label>Role Name</label>
                <input class="form-control" @bind-value="@role.Name"/>
                <span id="rolename-span" class="text-danger">@roleNameSpan</span>
            </div>
            <div class="form-group mt-2 ml-2">
                <label>Color</label>
                <div class="picker-holder">
                    <ColorPickerComponent></ColorPickerComponent>
                </div>
            </div>

        </div>
        <div class="mt-2" style="display: block">
            <div class="btn-role-edit create" style="margin-left: 0px" @onclick="OnClickSave" id="role-save-button">
                <p class="center-t">
                    Save
                </p>
            </div>

            <div class="mt-2">
                <span id="result-span" class="text-info">@resultSpan</span>
                <span id="error-span" class="text-danger" style="display:block">@errorSpan</span>
            </div>
        </div>

        <br/>
        <hr/>
        <br/>

        <h5 style="display: inline-block">Role Permissions</h5>
        <h7 style="float: right">Code for nerds: @role.Permissions &nbsp;</h7>

        @for (int i = 0; i < PlanetPermissions.Permissions.Length; i++)
        {
            PlanetPermission planetPerm = PlanetPermissions.Permissions[i];

            int val = i; // You have to do this for wacky binding reasons

            <div class="perm-list-item">
                <div class="perm-list-name mb-1">
                    @planetPerm.Name
                </div>
                <div type="button" style="float: right">
                    <label class="switch">
                        <input type="checkbox" @onclick="(e => PermClick(val))" checked="@rolePermValues[i]">
                        <span class="slider round"></span>
                    </label>
                </div>
                <div class="perm-list-desc mt-1">
                    @planetPerm.Description
                </div>
            </div>
        }

        <button @onclick='() => DeleteRole(Selected)' class="mt-4 btn v-button danger">Delete this role</button>
    </div>

    @{
        string normStyle = "display: none";
        if (!editMode)
        {
            normStyle = "";
        }
    }


    <div class="container" id="edit-rows-container" style="@normStyle">

        @foreach (PlanetRole role in Roles)
        {
            // For magic lambda
            var role_x = role;

            <div  
                @onpointerdown='e => OnRoleItemClick(role_x)' 
                @ondragstart='() => OnRoleDrag(role_x)' 
                @ondrop='async () => await OnRoleDrop(role_x)' 
                draggable="true"
                ondragover="event.preventDefault();" 
                style='border-color: @role.GetColorHex()' class='roles-row' @onclick="() => OnClickEdit(role_x)">
                <p class='roles-name' style="color:@role.GetColorHex()">
                        @role.Name
                </p> 
            </div>
        }

        <button class="mt-4 btn v-button" @onclick="OnClickCreateMode">Create a role</button>

    </div>
</div>

@code {

    [Parameter]
    public Planet Planet { get; set; }

    public List<PlanetRole> Roles = new List<PlanetRole>();

    // Stuff for role creation //

    public PlanetRole role = new PlanetRole()
    {
        Name = "New Role",
        Red = 255,
        Green = 255,
        Blue = 255
    };

    public bool editMode = false;

    public string roleNameSpan = "";

    public string resultSpan = "";

    public string errorSpan = "";

    public bool[] rolePermValues = new bool[PlanetPermissions.Permissions.Length];

    // Stuff for role editing //

    public PlanetRole Selected { get; set; }

    [CascadingParameter]
    public IModalService Modal { get; set; }

    public PlanetRole dragging_role;

    public void OnRoleDrag(PlanetRole role){
        dragging_role = role;
    }

    public async Task OnRoleDrop(PlanetRole dropped_on){

        var dropped_on_index = Roles.IndexOf(dropped_on);

        // Cannot move default role
        if (dragging_role.Id == Planet.DefaultRoleId ||
            dropped_on.Id == Planet.DefaultRoleId)
            return;

        Roles.Remove(dragging_role);
        Roles.Insert(dropped_on_index, dragging_role);

        var ids = Roles.Select(x => x.Id);

        var result = await dropped_on.Node.PostAsync($"api/planet/{dropped_on.PlanetId}/roleorder", ids);

        Console.WriteLine(result.Message);

        // StateHasChanged();
    }

    public async Task OnRoleItemClick(PlanetRole role){
        dragging_role = role;
    }

    public void PermClick(int id)
    {
        rolePermValues[id] = !rolePermValues[id];
        Console.WriteLine($"Toggled value for permission {id}");
        UpdatePermCode();
    }

    public void UpdatePermCode()
    {
        role.Permissions = 0x00;

        for (int i = 0; i < rolePermValues.Length; i++)
        {
            if (rolePermValues[i])
            {
                role.Permissions |= PlanetPermissions.Permissions[i].Value;
            }
        }

        //StateHasChanged();
    }

    protected override async Task OnInitializedAsync()
    {
        Roles = await Planet.GetRolesAsync();

        ItemObserver<PlanetRole>.OnAnyUpdated += OnRolesUpdate;
        ItemObserver<PlanetRole>.OnAnyDeleted += OnRoleDeletion;
    }


    public async Task GoBack() 
    {
        role = new PlanetRole()
        {
            Name = "New Role",
            Bold = false,
            Italics = false,
            PlanetId = Planet.Id
        };

        editMode = false;

        StateHasChanged();
    }

    public async Task OnClickEdit(PlanetRole editRole)
    {
        Selected = editRole;

        resultSpan = "";
        errorSpan = "";

        role = editRole;
        editMode = true;

        rolePermValues = new bool[PlanetPermissions.Permissions.Length];

        for (int i = 0; i < PlanetPermissions.Permissions.Length; i++)
        {
            rolePermValues[i] = ((editRole.Permissions & PlanetPermissions.Permissions[i].Value)
                                 == PlanetPermissions.Permissions[i].Value);
        }

        await JS.InvokeVoidAsync("SetColorPickerColor", role.GetColorHex());

        StateHasChanged();
    }

    public async Task DeleteRole(PlanetRole role)
    {
        ConfirmModalData cData =
        new ConfirmModalData(
            $"Delete {role.Name}?",
            "This cannot be undone",
            "Confirm",
            "Cancel",
            async () => {
                var response = await Selected.Node.DeleteAsync($"api/planet/{Planet.Id}/planetrole/{role.Id.ToString()}");

                if (!response.Success)
                {
                    errorSpan = "Error: " + response.Message;
                    return;
                }

                StateHasChanged();
            },
            async () => {
                StateHasChanged();
            }
        );

        ModalParameters mParams = new();
        mParams.Add("Data", cData);

        Modal.Show<ConfirmModalComponent>("Role Delete Confirm", mParams, new ModalOptions() { Class = "modal-shrink-fit" });
    }

    public async Task OnClickCreateMode()
    {
        role = new PlanetRole()
        {
            Name = "New Role",
            Bold = false,
            Italics = false,
            PlanetId = Planet.Id
        };

        rolePermValues = new bool[PlanetPermissions.Permissions.Length];
        editMode = true;

        StateHasChanged();
        //await editPlanetModal.Open();
    }

    public async Task OnClickSave()
    {
        resultSpan = "";
        errorSpan = "";

        // Get chosen color
        float[] color = await JS.InvokeAsync<float[]>("GetChosenColor");

        role.Red = (byte) Math.Round(color[0]);
        role.Green = (byte) Math.Round(color[1]);
        role.Blue = (byte) Math.Round(color[2]);

        Console.WriteLine($"Chosen color: rgb({role.Red.ToString()}, {role.Green.ToString()}, {role.Blue.ToString()})");

        // Create json payload to send to server for request
        // Id and authority is handled by the server

        //string json = JsonConvert.SerializeObject(role);

        TaskResult<PlanetRole> response;

        JsonContent content = JsonContent.Create(role);

        // If the id is not set, this is a new role to be created
        if (role.Id == 0)
            response = await Api.Items.Item.CreateAsync(role);
        // Otherwise we are editing a prior role
        else
            response = await Api.Items.Item.UpdateAsync(role);

        if (response.Success)
        {
            resultSpan = response.Message;

            // If creating, send back to role list afterwards
            if (role.Id == 0)
            {
                editMode = false;
            }
        }
        else
        {
            errorSpan = response.Message;
        }


        StateHasChanged();

        editMode = false;
    }

    public async Task OnRoleDeletion(PlanetRole role)
    {
        Roles = await Planet.GetRolesAsync();
    }

    // Handle role list changes that may occur while open
    public async Task OnRolesUpdate(PlanetRole role, bool newItem, int flags)
    {
        var oldRole = Roles.FirstOrDefault(x => x.Id == role.Id);

        if (oldRole == null)
        {
            Roles = await Planet.GetRolesAsync();
            StateHasChanged();
            return;
        }

        var index = Roles.IndexOf(oldRole);

    // Set to new role
        Roles[index] = role;

        StateHasChanged();
    }

}