@inherits ChannelListItemComponent
@implements IDisposable

@inject WindowManager WindowManager
@inject ClientCategoryManager CategoryManager
@inject ChannelListManager ListManager

<div class="category @(ShouldShowDragOver() ? "drag-over" : "")"
     draggable="true"
     depth="@(Depth % 6)"

     @onpointerdown:stopPropagation="true"
     @onpointerdown='async () => await ChannelListContextMenuComponent.SetSelectedItem(Category)'

     @onclick:stopPropagation="true"
     @onclick="OnClick"

     @ondragstart:stopPropagation="true"
     @ondragstart="() => ListManager.OnItemStartDragInCategory(Category, ParentCategory)"

     @ondragleave:stopPropagation="true"
     @ondragleave="@OnDragLeave"

     @ondrop:stopPropagation="true"
     @ondrop="OnDropOn"

     @ondragenter:stopPropagation="true"
     ondragenter="return false;">
    <div class="channel-wrapper">
        @if (ListManager.DragOverId == Category.Id &&
                 ListManager.DragIsTop)
        {
            <div
                class="drop-line"
                @ondragenter:stopPropagation="true"
                ondragenter="return false;">
            </div>
        }
        <div
            id="@Category.Id"
            class="channel">

            @if (IsNotification)
            {
                <img alt="Category with notifications" class="category-icon" src="_content/Valour.Client/media/Category-Icon-Notif.svg" style="@ArrowStyle">
            }
            else if (IsUnread)
            {
                <img alt="Category with unread messages" class="category-icon" src="_content/Valour.Client/media/Category-Icon-unread.svg" style="@ArrowStyle">
            }
            else
            {
                <img alt="Category without unread messages" class="category-icon" src="_content/Valour.Client/media/Category-Icon-read.svg" style="@ArrowStyle">
            }
            <p class="name">
                @Category.Name
            </p>

        </div>
        <div
            class="drop top"
            @ondragenter:stopPropagation="true"
            @ondragenter="@OnDragEnterTop">
        </div>
        <div
            class="drop bottom"
            @ondragenter:stopPropagation="true"
            @ondragenter="@OnDragEnterBottom">
        </div>
    </div>

    @if (IsOpen)
    {
        <div class="sub-list" ondragover="event.preventDefault();">
            @foreach (var item in ItemList)
            {
                if (item.ParentId != Category.Id)
                    continue;

                switch (item)
                {
                    case PlanetChatChannel chat:
                        <ChatChannelListComponent @key='$"{Category.Id}-{chat.Id}"' ParentCategory="@this" Channel="@chat"/>
                        break;
                    case PlanetVoiceChannel voice:
                        <VoiceChannelListComponent @key='@voice.Id' ParentCategory="@this" Channel="@voice" />
                        break;
                    case PlanetCategory cat:
                        <CategoryListComponent
                            @key='$"{Category.Id}-{cat.Id}"'
                            ParentCategory="@this"
                            Category="@cat"
                            Categories="@Categories"
                            Channels="@Channels"
                            VoiceChannels="@VoiceChannels"
                            ChannelWindow="@ChannelWindow"
                            Depth="@(this.Depth + 1)"/>
                        break;
                }
            }
        </div>
    }
    @if (ItemList.Count == 0)
    {
        <!-- Makes it so you can insert into empty categories -->
        <div
            class="inner-drop @((ListManager.HighlightInner?.GetItem()?.Id ?? 0) == this.Category.Id ? "highlight" : "")"
            @ondrop:stopPropagation="true"
            @ondrop="async () => await ListManager.OnItemDropIntoCategory(this)"
            @ondragenter:stopPropagation="true"
            @ondragenter="@OnDragEnterInnerDrop"
            @ondragleave="@Refresh">
            <span>Insert into @Category.Name</span>
        </div>
    }
    
    @if (ListManager.DragOverId == Category.Id &&
             !ListManager.DragIsTop &&
             !((ListManager.HighlightInner?.GetItem()?.Id ?? 0) == Category.Id))
    {
        <div
            class="drop-line"
            @ondragenter:stopPropagation="true"
            ondragenter="return false;">
        </div>
    }
</div>

@code {

    private bool ShouldShowDragOver()
    {
        return ListManager.DragOverId == Category.Id;
    }

    [Parameter]
    public bool IsTopLevel { get; set; }

    [Parameter]
    public PlanetCategory Category { get; set; }
    public override PlanetChannel GetItem() => Category;

    [Parameter]
    public List<PlanetChatChannel> Channels { get; set; }

    [Parameter]
    public List<PlanetVoiceChannel> VoiceChannels { get; set; }

    [Parameter]
    public List<PlanetCategory> Categories { get; set; }

    [Parameter]
    public ChatChannelWindow ChannelWindow { get; set; }

    public List<PlanetChatChannel> ChildChannels { get; set; }
    public List<PlanetVoiceChannel> ChildVoiceChannels { get; set; }
    public List<PlanetCategory> ChildCategories { get; set; }

    public bool IsOpen { get; set; } = true;
    
    public bool IsUnread { get; set; }
    
    public bool IsNotification { get; set; }

    public Planet Planet { get; set; }

    public List<PlanetChannel> ItemList = new List<PlanetChannel>();

    [Parameter]
    public int Depth { get; set; }

    protected override async Task OnInitializedAsync()
    {
        ModelObserver<PlanetCategory>.OnAnyUpdated += OnCategoryUpdate;
        ModelObserver<PlanetChatChannel>.OnAnyUpdated += OnChatChannelUpdate;
        ModelObserver<PlanetVoiceChannel>.OnAnyUpdated += OnVoiceChannelUpdate;

        // Handle Deletions
        ModelObserver<PlanetCategory>.OnAnyDeleted += OnCategoryDeletion;
        ModelObserver<PlanetChatChannel>.OnAnyDeleted += OnChatChannelDeletion;
        ModelObserver<PlanetVoiceChannel>.OnAnyDeleted += OnVoiceChannelDeletion;

        ValourClient.OnChannelOpen += OnChannelOpenedChange;
        ValourClient.OnChannelClose += OnChannelOpenedChange;
        ValourClient.OnCategoryOrderUpdate += OnCategoryOrderUpdate;

        ValourClient.OnNotificationReceived += OnNotification;

        Planet = await Category.GetPlanetAsync();

        IsOpen = CategoryManager.IsOpen(Category);

        BuildItemList();
        
        DetermineNotifications();
        DetermineUnread();
    }

    private async Task OnNotification(Notification notification)
    {
        if (notification.PlanetId != Category.PlanetId)
            return;
        
        if (ChildChannels.Any(x => x.Id == notification.ChannelId))
        {
            DetermineNotifications();
            Refresh();
        }
    }

    private void OnDragEnterInnerDrop()
    {
        ListManager.HighlightInner = this;
        Refresh();
    }
    
    private void OnDragEnterTop()
    {
        ListManager.OnDragEnterItem(Category.Id, true);
        Refresh();
    }
    
    private void OnDragEnterBottom()
    {
        ListManager.OnDragEnterItem(Category.Id, false);
        Refresh();
    }
    
    private async Task OnDropOn()
    {
        await ListManager.OnItemDropOnItem(this);
        Refresh();
    }

    private void OnDragLeave()
    {
        Refresh();
    }

    public async Task OnChannelOpenedChange(PlanetChatChannel channel)
    {
        //if (channel.ParentId == Category.Id)
            //StateHasChanged();
    }

    public void BuildItemList()
    {
        ItemList.Clear();
        
        ChildChannels = Channels.Where(x => x.ParentId == Category.Id).ToList();
        ChildVoiceChannels = VoiceChannels.Where(x => x.ParentId == Category.Id).ToList();
        ChildCategories = Categories.Where(x => x.ParentId == Category.Id).ToList();
        
        ItemList.AddRange(ChildChannels);
        ItemList.AddRange(ChildVoiceChannels);
        ItemList.AddRange(ChildCategories);
        SortItems();
    }

    public void SortItems()
    {
        ItemList.Sort((x, y) => x.Position.CompareTo(y.Position));
    }

    public void Dispose()
    {
        ModelObserver<PlanetCategory>.OnAnyUpdated -= OnCategoryUpdate;
        ModelObserver<PlanetChatChannel>.OnAnyUpdated -= OnChatChannelUpdate;
        ModelObserver<PlanetVoiceChannel>.OnAnyUpdated -= OnVoiceChannelUpdate;

        ModelObserver<PlanetCategory>.OnAnyDeleted -= OnCategoryDeletion;
        ModelObserver<PlanetChatChannel>.OnAnyDeleted -= OnChatChannelDeletion;
        ModelObserver<PlanetVoiceChannel>.OnAnyDeleted -= OnVoiceChannelDeletion;

        ValourClient.OnUserChannelStateUpdate -= OnUserChannelStateUpdate;
        ValourClient.OnChannelStateUpdate -= OnChannelStateUpdate;
        ValourClient.OnCategoryOrderUpdate -= OnCategoryOrderUpdate;

        ValourClient.OnNotificationReceived -= OnNotification;
    }

    private async Task OnCategoryOrderUpdate(CategoryOrderEvent eventData)
    {
        if (eventData.CategoryId != Category.Id)
            return;
        
        BuildItemList();
        SortItems();
        DetermineNotifications();
        DetermineUnread();
        Refresh();
    }
    
    public async Task OnUserChannelStateUpdate(UserChannelState state)
    {
        var channel = ItemList.FirstOrDefault(x => x.Id == state.ChannelId && x.Type == ChannelType.PlanetChatChannel);
        if (channel is null || channel.ParentId != Category.Id)
            return;

        DetermineUnread();
        Refresh();
    }

    public async Task OnChannelStateUpdate(ChannelStateUpdate state)
    {
        var channel = ItemList.FirstOrDefault(x => x.Id == state.ChannelId && x.Type == ChannelType.PlanetChatChannel);
        if (channel is null || channel.ParentId != Category.Id)
            return;
            
        DetermineUnread();
        Refresh();
    }

    public void OnClick()
    {
        ListManager.OnItemClickInCategory(Category, ParentCategory);

        IsOpen = !IsOpen;

        CategoryManager.SetOpen(Category, IsOpen);

        Refresh();
    }

    public string ArrowStyle
    {
        get
        {
            if (IsOpen)
            {
                return "transform: rotate(90deg);";
            }
            else
            {
                return "";
            }
        }
    }

    [Parameter]
    public RenderFragment ChildContent { get; set; }

    public async Task OnCategoryDeletion(PlanetCategory category)
    {

        var old = ChildCategories.FirstOrDefault(x => x.Id == category.Id);

        // just in case something weird happens
        if (old != null)
        {
            ChildCategories.Remove(old);
            BuildItemList();
            Refresh();
        }
    }

    public async Task OnCategoryUpdate(ModelUpdateEvent<PlanetCategory> eventData)
    {
        var category = eventData.Model;
        
        if (Category.Id == category.Id)
        {
            Refresh();
        }
        else
        {
            // If we contain the category and its position or category changed we need to factor for that
            var old = ChildCategories.FirstOrDefault(x => x.Id == category.Id);

            if (old != null)
            {
                // If removed from this category
                if (category.ParentId != Category.Id)
                {
                    ChildCategories.Remove(old);
                    BuildItemList();
                    
                    Refresh();
                }
            }
            // In this case it was just added to this category
            else if (category.ParentId == Category.Id)
            {

                // Insert
                ChildCategories.Add(category);
                // Resort
                BuildItemList();

                Console.WriteLine($"Inserted {category.Name} into {Category.Name}");

                Refresh();
            }
        }
    }

    public async Task OnVoiceChannelDeletion(PlanetVoiceChannel channel)
    {
        if (channel.ParentId == Category.Id)
        {
            var old = ChildChannels.FirstOrDefault(x => x.Id == channel.Id);
            ChildChannels.Remove(old);
            BuildItemList();
            Refresh();
        }
    }

    public async Task OnVoiceChannelUpdate(ModelUpdateEvent<PlanetVoiceChannel> eventData)
    {
        var channel = eventData.Model;
        
        // If we contain the category and its position or category changed we need to factor for that
        var old = ChildVoiceChannels.FirstOrDefault(x => x.Id == channel.Id);

        if (old != null)
        {
            // If removed from this category
            if (channel.ParentId != Category.Id)
            {
                ChildVoiceChannels.Remove(old);
                BuildItemList();
                Refresh();
            }
        }
        // In this case it was just added to this category
        else if (channel.ParentId == Category.Id)
        {
            // Add to childchannels
            ChildVoiceChannels.Add(channel);
            // Resort
            BuildItemList();

            Refresh();
        }
    }

    public async Task OnChatChannelDeletion(PlanetChatChannel channel)
    {
        if (channel.ParentId == Category.Id) {
            var old = ChildChannels.FirstOrDefault(x => x.Id == channel.Id);
            ChildChannels.Remove(old);
            BuildItemList();
            Refresh();
        }
    }

    public async Task OnChatChannelUpdate(ModelUpdateEvent<PlanetChatChannel> eventData)
    {
        var channel = eventData.Model;
        
        // Console.WriteLine($"This: {Category.Id} | New: {channel.Id} | New Parent: {channel.ParentId}");

        // If we contain the category and its position or category changed we need to factor for that
        var old = ChildChannels.FirstOrDefault(x => x.Id == channel.Id);

        if (old != null)
        {
            // If removed from this category
            if (channel.ParentId != Category.Id)
            {
                ChildChannels.Remove(old);
                BuildItemList();
                
                Refresh();
            }
        }
        // In this case it was just added to this category
        else if (channel.ParentId == Category.Id)
        {
            // Add to childchannels
            ChildChannels.Add(channel);
            // Resort
            BuildItemList();

            Refresh();
        }
    }

    // Get local index
    public int GetIndex(PlanetChannel item)
    {
        return ItemList.FindIndex(x => x.Id == item.Id);
    }

    public void DetermineNotifications()
    {
        IsNotification = false;
        
        foreach (var channel in ChildChannels)
        {
            if (ValourClient.GetChannelNotifications(channel.Id) > 0)
            {
                IsNotification = true;
                break;
            }
        }
    }

    public void DetermineUnread()
    {
        bool unread = false;
        
        foreach (var channel in ChildChannels)
        {
            if (ValourClient.GetChannelUnreadState(channel.Id))
            {
                unread = true;
                break;
            }
        }

        IsUnread = unread;
    }
}
