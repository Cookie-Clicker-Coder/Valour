@inherits ChannelListItemComponent
@implements IDisposable

@inject WindowManager WindowManager
@inject ChannelListManager ListManager

<div
    class="channel-wrapper"
    draggable="true"
    
    @onclick:stopPropagation="true"
    @onclick="OnClick"

    @ondragstart:stopPropagation="true"
    @ondragstart="@OnDragStart"

    @ondrop:stopPropagation="true"
    @ondrop="@OnDropOn"

    @onpointerdown:stopPropagation="true"
    @onpointerdown='@PrepareContext'

    @ondragleave:stopPropagation="true"
    @ondragleave="@OnDragLeave">
    
    @if (ListManager.DragOverId == Channel.Id &&
         ListManager.DragIsTop)
    {
        <div
            class="drop-line"
            @ondragenter:stopPropagation="true"
            ondragenter="return false;">
        </div>
    }
    <div
        class="@ChosenCss"
        id="@Channel.Id">

        @{ var iconData = GetIconData(); }

        @if (_notificationCount > 0)
        {
            <div class="channel-icon-holder">
                <img class="channel-icon" src="@iconData[0]" alt="@iconData[1]"/>
                <p>@_notificationCount</p>
            </div>
        }
        else
        {
            <img class="channel-icon" src="@iconData[0]" alt="@iconData[1]"/>
        }


        <p class="name">
            @Channel.Name
        </p>

    </div>
    @if (ListManager.DragOverId == Channel.Id &&
         !ListManager.DragIsTop)
    {
        <div
            class="drop-line"
            @ondragenter:stopPropagation="true"
            ondragenter="return false;">
        </div>
    }
    <div
        class="drop top"
        @ondragenter:stopPropagation="true"
        @ondragenter="@OnDragEnterTop">
    </div>
    <div
        class="drop bottom"
        @ondragenter:stopPropagation="true"
        @ondragenter="@OnDragEnterBottom">
    </div>
</div>

@code {

    private static string[] _lockUnreadSrc = new[] { "_content/Valour.Client/media/Channel-Filled-Icon-with-lock.svg", "Private chat channel with unread messages" };
    private static string[] _unlockUnreadSrc = new[] { "_content/Valour.Client/media/Channel-Filled-Icon.svg", "Chat channel with unread messages" };
    private static string[] _lockNotifSrc = new[] { "_content/Valour.Client/media/Channel-Notif-Icon-with-lock.svg", "Private chat channel with notifications" };
    private static string[] _unlockNotifSrc = new[] { "_content/Valour.Client/media/Channel-Notif-Icon.svg", "Chat channel with notifications" };
    private static string[] _lockReadSrc = new[] { "_content/Valour.Client/media/Channel-Icon-with-lock.svg", "Private chat channel without unread messages" };
    private static string[] _unlockReadSrc = new[] { "_content/Valour.Client/media/Channel-Icon.svg", "Chat channel without unread messages" };

    private string[] GetIconData()
    {
        if (_notificationCount > 0)
        {
            if (HasLock)
            {
                return _lockNotifSrc;
            }
            else
            {
                return _unlockNotifSrc;
            }
        }
        else if (IsUnread)
        {
            if (HasLock)
            {
                return _lockUnreadSrc;
            }
            else
            {
                return _unlockUnreadSrc;
            }
        }
        else
        {
            if (HasLock)
            {
                return _lockReadSrc;
            }
            else
            {
                return _unlockReadSrc;
            }
        }
    }
    
    // Demonstrates how a parent component can supply parameters
    [Parameter]
    public PlanetChatChannel Channel { get; set; }
    public override PlanetChannel GetItem() => Channel;
    
    public bool HasLock  { get; set; }
    
    public bool IsUnread { get; set; }

    private int _notificationCount = 0;

    public string ChosenCss
    {
        get
        {
            var css = "channel";

            if (WindowManager.GetWindows().OfType<ChatChannelWindow>().Any(x => x.Channel.Id == Channel.Id))
                css += " open";

            if (ListManager.DragOverId == Channel.Id)
                css += " drag-over";
            
            return css;
        }
    }

    private void OnDragEnterTop()
    {
        ListManager.OnDragEnterItem(this.Channel.Id, true);
        Refresh();
    }
    
    private void OnDragEnterBottom()
    {
        ListManager.OnDragEnterItem(this.Channel.Id, false);
        Refresh();
    }

    private void OnDragLeave()
    {
        Refresh();
    }

    private async Task OnDropOn()
    {
        await ListManager.OnItemDropOnItem(this);
        Refresh();
    }

    private async Task PrepareContext()
    {
        await ChannelListContextMenuComponent.SetSelectedItem(Channel);
    }

    private void OnDragStart()
    {
        ListManager.OnItemStartDragInCategory(Channel, ParentCategory);
    }

    private async Task OnClick()
    {

        ListManager.OnItemClickInCategory(Channel, ParentCategory);

        var window = WindowManager.GetSelectedWindow();
        
        if (window is ChatChannelWindow channelWindow)
        {
            // It's the same channel, cancel
            if (channelWindow.Channel.Id == Channel.Id)
                return;

            await channelWindow.Component.SwapChannel(Channel);
        }
        else
        {
            var planet = await Channel.GetPlanetAsync();
            await WindowManager.ReplaceWindow(window, new PlanetChatChannelWindow(planet, Channel));
        }
        
        Refresh();
    }

    public async Task OnChatChannelUpdate(ModelUpdateEvent<PlanetChatChannel> eventData)
    {
        var channel = eventData.Model;
        if (Channel.Id == channel.Id)
        {
            await DetermineLock();
            Refresh();
        }
    }

    public async Task OnChannelOpenedChange(PlanetChatChannel channel)
    {
        //if (channel.Id == Channel.Id)
        Refresh();
    }

    public async Task DetermineLock()
    {
        HasLock = false;
        Planet planet = await Channel.GetPlanetAsync();

        var role = await planet.GetDefaultRoleAsync();

        var node = await Channel.GetPermNodeAsync(role.Id, ChannelType.PlanetChatChannel);
        if (node is not null) {
            var state = node.GetPermissionState(ChatChannelPermissions.View);
            if (state == PermissionState.False)
                HasLock = true;
        }
    }

    protected override async Task OnInitializedAsync()
    {
        // Console.WriteLine("Init " + Channel.Name);

        ModelObserver<PlanetChatChannel>.OnAnyUpdated += OnChatChannelUpdate;

        ValourClient.OnChannelOpen += OnChannelOpenedChange;
        ValourClient.OnChannelClose += OnChannelOpenedChange;

        ValourClient.OnUserChannelStateUpdate += OnUserChannelStateUpdate;
        ValourClient.OnChannelStateUpdate += OnChannelStateUpdate;

        ValourClient.OnNotificationReceived += OnNotification;

        DetermineNotifications();
        DetermineUnread();
        await DetermineLock();
    }

    public async Task OnNotification(Notification notification)
    {
        if (notification.ChannelId != Channel.Id)
            return;
        
        DetermineNotifications();
        Refresh();
    }

    public async Task OnUserChannelStateUpdate(UserChannelState state)
    {
        if (state.ChannelId != Channel.Id)
            return;

        DetermineUnread();
        Refresh();
    }

    public async Task OnChannelStateUpdate(ChannelStateUpdate state)
    {
        if (state.ChannelId != Channel.Id)
            return;

        DetermineUnread();
        Refresh();
    }

    public void Dispose()
    {
        // Console.WriteLine("Disposed " + Channel.Name);

        ModelObserver<PlanetChatChannel>.OnAnyUpdated -= OnChatChannelUpdate;

        ValourClient.OnChannelOpen -= OnChannelOpenedChange;
        ValourClient.OnChannelClose -= OnChannelOpenedChange;
        ValourClient.OnUserChannelStateUpdate -= OnUserChannelStateUpdate;
        ValourClient.OnChannelStateUpdate -= OnChannelStateUpdate;
    }

    public void DetermineUnread()
    {
        IsUnread = ValourClient.GetChannelUnreadState(Channel.Id);
    }

    public void DetermineNotifications()
    {
        _notificationCount = ValourClient.GetChannelNotifications(Channel.Id);
    }
}