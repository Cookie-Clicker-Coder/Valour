@inherits ChannelListItemComponent
@using Valour.Client.Components.Calls
@implements IDisposable

@inject WindowManager WindowManager
@inject ChannelListManager ListManager

<div
    class="channel-wrapper"
    draggable="true"
    
    @onclick:stopPropagation="true"
    @onclick="OnClick"

    @ondragstart:stopPropagation="true"
    @ondragstart="@OnDragStart"

    @ondrop:stopPropagation="true"
    @ondrop="@OnDropOn"

    @onpointerdown:stopPropagation="true"
    @onpointerdown='@PrepareContext'

    @ondragleave:stopPropagation="true"
    @ondragleave="@OnDragLeave">
    
    @if (ListManager.DragOverId == Channel.Id &&
         ListManager.DragIsTop)
    {
        <div
            class="drop-line"
            @ondragenter:stopPropagation="true"
            ondragenter="return false;">
        </div>
    }
    <div
        class="@ChosenCss"
        id="@Channel.Id">
        
        <img class="channel-icon" src="_content/Valour.Client/media/volume-up-fill.svg" alt="Voice channel"/>

        <p class="name">
            @Channel.Name
        </p>

    </div>
    @if (ListManager.DragOverId == Channel.Id &&
         !ListManager.DragIsTop)
    {
        <div
            class="drop-line"
            @ondragenter:stopPropagation="true"
            ondragenter="return false;">
        </div>
    }
    <div
        class="drop top"
        @ondragenter:stopPropagation="true"
        @ondragenter="@OnDragEnterTop">
    </div>
    <div
        class="drop bottom"
        @ondragenter:stopPropagation="true"
        @ondragenter="@OnDragEnterBottom">
    </div>
</div>

@code {
    [Parameter]
    public PlanetVoiceChannel Channel { get; set; }
    public override PlanetChannel GetItem() => Channel;

    public string ChosenCss
    {
        get
        {
            var css = "channel";

            if (WindowManager.GetWindows().OfType<ChatChannelWindow>().Any(x => x.Channel.Id == Channel.Id))
                css += " open";

            if (ListManager.DragOverId == Channel.Id)
                css += " drag-over";
            
            return css;
        }
    }
    
    private void OnDragStart()
    {
        ListManager.OnItemStartDragInCategory(Channel, ParentCategory);
    }

    public async Task OnClick()
    {
        /* Very cool logic goes here */
        ListManager.OnItemClickInCategory(Channel, ParentCategory);

        await CallComponent.Instance.Initialize(Channel);
        
        StateHasChanged();
    }

    public async Task OnVoiceChannelUpdate(ModelUpdateEvent<PlanetVoiceChannel> eventData)
    {
        var channel = eventData.Model;
        
        if (Channel.Id == channel.Id)
        {
            StateHasChanged();
        }
    }

    protected override async Task OnInitializedAsync()
    {
        ModelObserver<PlanetVoiceChannel>.OnAnyUpdated += OnVoiceChannelUpdate;
    }

    public void Dispose()
    {
        ModelObserver<PlanetVoiceChannel>.OnAnyUpdated -= OnVoiceChannelUpdate;
    }
    
    private void OnDragEnterTop()
    {
        ListManager.OnDragEnterItem(this.Channel.Id, true);
        Refresh();
    }
    
    private void OnDragEnterBottom()
    {
        ListManager.OnDragEnterItem(this.Channel.Id, false);
        Refresh();
    }

    private void OnDragLeave()
    {
        Refresh();
    }

    private async Task OnDropOn()
    {
        await ListManager.OnItemDropOnItem(this);
        Refresh();
    }

    private async Task PrepareContext()
    {
        await ChannelListContextMenuComponent.SetSelectedItem(Channel);
    }
}