@if (_loading)
{
    <h6>Loading users...</h6>
    return;
}

<input class="form-control mt-2 mb-2" placeholder="Search name..." @onchange="@HandleNameSearch" />

<table>
    <thead>
        <tr>
            <th>ID</th>
            <th>Username</th>
            <th>Tag</th>
            <th>Actions</th>
        </tr>
    </thead>
    <tbody>
        @foreach (var user in _users)
        {
            <tr>
                <td>@user.Id</td>
                <td>@user.Name</td>
                <td>@user.Tag</td>
                <td>
                    <div class="button-row">
                        @if (user.Disabled)
                        {
                            <button class="v-btn primary" @onclick="@(async () => await EnableUser(user.Id))">Enable</button>
                        }
                        else 
                        {
                            <button class="v-btn secondary" @onclick="@(async () => await DisableUser(user.Id))">Disable</button>
                        }
                        <button class="v-btn danger" @onclick="@(async () => await DeleteUser(user))">Delete</button>
                    </div>
                </td>
            </tr>
        }
    </tbody>
</table>

@code {
    [CascadingParameter]
    public ModalRoot ModalRoot { get; set; }
    
    private bool _loading = true;
    
    private string _nameSearch = string.Empty;

    private UserQueryRequest _queryRequest;
    private PagedReader<User> _userReader;
    
    private List<User> _users;

    protected override async Task OnInitializedAsync()
    {
        _queryRequest = new();
        _userReader = StaffTools.GetUserQueryReader(_queryRequest, 50);
        _loading = false;

        await Requery();
        
        StateHasChanged();
    }

    private async Task HandleNameSearch(ChangeEventArgs e)
    {
        _queryRequest.UsernameAndTag = e.Value.ToString();
        await Requery();
    }
    
    private async Task Requery()
    {
        _userReader.SetPostData(_queryRequest);
        var response = await _userReader.NextPageAsync();
        _users = response.Items;
        
        StateHasChanged();
    }
    
    /* Staff Controls */
    
    private async Task DisableUser(long userId)
    {
        var toastData = new ProgressToastData<TaskResult>()
        {
            Title = "Disabling User",
            SuccessMessage = "User has been disabled",
            Message = "Waiting for result...",
            ProgressTask = StaffTools.SetUserDisabledAsync(userId, true)
        };
        
        var result = await ToastContainer.Instance.WaitToastWithTaskResult(toastData);

        if (result.Success)
        {
            await Requery();
        }
    }
    
    private async Task EnableUser(long userId)
    {
        var toastData = new ProgressToastData<TaskResult>()
        {
            Title = "Enabling User",
            SuccessMessage = "User has been enabled",
            Message = "Waiting for result...",
            ProgressTask = StaffTools.SetUserDisabledAsync(userId, false)
        };
        
        var result = await ToastContainer.Instance.WaitToastWithTaskResult(toastData);

        if (result.Success)
        {
            await Requery();
        }
    }
    
    private Task DeleteUser(User user)
    {
        ModalRoot.OpenModal<ConfirmModalComponent>(new ConfirmModalComponent.ModalParams()
        {
            Title = $"Hard Delete {user.NameAndTag}?",
            Description = "This CANNOT be undone. Are you sure you want to delete this user?",
            CancelText = "Cancel",
            ConfirmText = "DELETE",
            ConfirmEvent = async () =>
            {
                var toastData = new ProgressToastData<TaskResult>()
                {
                    Title = "Deleting User",
                    SuccessMessage = "User has been deleted",
                    Message = "Waiting for result...",
                    ProgressTask = StaffTools.DeleteUserAsync(user.Id)
                };
        
                var result = await ToastContainer.Instance.WaitToastWithTaskResult(toastData);

                if (result.Success)
                {
                    await Requery();
                }
            }
        });

        return Task.CompletedTask;
    }
    
    
}