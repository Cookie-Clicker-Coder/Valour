@using System.Web
@using System.Text.RegularExpressions
@using ExCSS
<div id="theme">
    <style>
        :root {
            --font-color: @("#" + CurrentTheme.FontColor);
            --font-alt-color: @("#" + CurrentTheme.FontAltColor);
            --link-color: @("#" + CurrentTheme.LinkColor);
            
            --main-1: @("#" + CurrentTheme.MainColor1);
            --main-2: @("#" + CurrentTheme.MainColor2);
            --main-3: @("#" + CurrentTheme.MainColor3);
            --main-4: @("#" + CurrentTheme.MainColor4);
            --main-5: @("#" + CurrentTheme.MainColor5);
            
            --modal-main: @("#" + CurrentTheme.MainColor1 + "55");
            --modal-medium: @("#" + CurrentTheme.MainColor1 + "aa");
            --modal-dark: @("#" + CurrentTheme.MainColor1 + "cc");
            
            --slight-tint: @("#" + CurrentTheme.TintColor + "15");
            --medium-tint: @("#" + CurrentTheme.TintColor + "30");
            --strong-tint: @("#" + CurrentTheme.TintColor + "55");
            
            /* Vibrant colors */
            --v-purple: @("#" + CurrentTheme.VibrantPurple);
            --v-blue:   @("#" + CurrentTheme.VibrantBlue);
            --v-cyan:   @("#" + CurrentTheme.VibrantCyan);
        
            /* Pastel colors */
            --p-cyan:        @("#" + CurrentTheme.PastelCyan);
            --p-cyan-purple: @("#" + CurrentTheme.PastelCyanPurple);
            --p-purple:      @("#" + CurrentTheme.PastelPurple);
            --p-red:         @("#" + CurrentTheme.PastelRed);

            /* Custom CSS */
            @GetSanitizedCustomCss()
        }
    </style>
</div>

@code {
    public static ThemeComponent Instance;
    
    [Parameter]
    public Theme CurrentTheme { get; set; } = Theme.Default;
    
    private StylesheetParser _parser = new StylesheetParser();

    private string GetSanitizedCustomCss()
    {
        try
        {
            var styles = _parser.Parse(CurrentTheme.CustomCss);

            if (styles is null)
            {
                Console.WriteLine("Custom CSS is invalid.");
                return string.Empty;
            }
            
            return styles.ToCss();
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
            return string.Empty;
        }
    }
    
    private bool AreBracketsValid(string input)
    {
        int count = 0;

        foreach (char c in input)
        {
            if (c == '{')
            {
                count++;
            }
            else if (c == '}')
            {
                count--;
                if (count < 0)
                {
                    return false; // More closing brackets than opening brackets
                }
            }
        }

        return count == 0; // True if opening and closing brackets match
    }
    
    protected override void OnInitialized()
    {
        Instance = this;
    }

    public void Refresh()
    {
        StateHasChanged();
    }
}