@inject WindowManager WindowManager

<div id="@Id" class="card-wrapper" style="@CssStyle">
        <TiltCard ShineCssStyle="border-radius: 20px">
            <div class="card-glow" style="background-color: @Profile.GlowColor">
            </div>
            <div
                @onclick:stopPropagation="true"
                class="profile-card">
                <span class="card-bg" style="@CardBackground"></span>
                <div class="inner-card">
                    <div class="top-section">
                        <img class="pfp" alt="@_name's profile picture" src="@_pfpUrl" @onerror="OnPfpError"/>
                        <div class="online-bubble @_statusClass"></div>
                        <div class="names">
                            <p class="nickname">@_name</p>
                            <p class="name-and-tag">@_nameAndTag</p>
                            <div class="status-bubble">
                                <div class="arrow"></div>
                                <p class="status-text">"@(_status)"</p>
                            </div>
                        </div>
                    </div>
                    <p class="headline">@Profile.Headline</p>
                    <div class="mid-section">
                        <b class="card-subtitle">Bio</b>
                        <hr/>
                        <div class="mid-inner">
                            <p class="body-text">@Profile.Bio</p>
                        </div>
                    </div>

                    @if (User.Id != ValourClient.Self.Id)
                    {
                        <div class="bottom-btns">
                            <button class="v-btn large" @onclick="OnClickMessage"><i class="bi bi-envelope-fill"></i> Message</button>
                            @if (_isFriend)
                            {
                                <button class="v-btn large" @onclick="OnClickRemoveFriend"><i class="bi bi-person-heart"></i> Remove Friend</button>
                            }
                            else if (_isFriendRequested)
                            {
                                <button class="v-btn large" @onclick="OnClickRemoveFriend"><i class="bi bi-person-heart"></i> Cancel Request</button>
                            }
                            else
                            {
                                <button class="v-btn large" @onclick="OnClickAddFriend"><i class="bi bi-person-heart"></i> Add Friend</button>
                            }
                        </div>
                    }
                </div>
            </div>
        </TiltCard>
    </div>

@code {
    
    [Parameter]
    public PlanetMember Member { get; set; }
    
    [Parameter]
    public User User { get; set; }
    
    [Parameter]
    public UserProfile Profile { get; set; }
    
    [Parameter]
    public string CssStyle { get; set; }

    public string CardBackground
    {
        get
        {
            var bg = (string.IsNullOrWhiteSpace(Profile.PrimaryColor) || User.Subscription == null) ?
                $"background-position: center center; background: {Profile.BorderColor};" :
                $"background-position: center center; background: linear-gradient(117deg, {Profile.PrimaryColor} 10%, {Profile.SecondaryColor} 50%, {Profile.TertiaryColor} 90%);";

            if (Profile.AnimatedBorder)
                bg += "animation: border-spin 5s linear infinite;";

            return bg;
        }
    }

    public readonly string Id = Guid.NewGuid().ToString();

    /* Values used to actually render the profile */
    private string _name;
    private string _nameAndTag;
    private string _status;
    private string _pfpUrl;
    private string _statusClass = "offline";
    
    private bool _isFriend { get; set; }
    private bool _isFriendRequested { get; set; }
    
    public async Task LoadDetailsAsync()
    {
        _isFriendRequested = ValourClient.FriendsRequested.Any(x => x.Id == User.Id);
        _isFriend = ValourClient.Friends.Any(x => x.Id == User.Id);
        
        _name = User.Name;
        _nameAndTag = User.NameAndTag;
        _status = User.Status;
        _statusClass = User.UserState.CssClassName;

        _pfpUrl = PfpUtility.GetPfpUrl(User, Member);
        
        StateHasChanged();
    }

    private void OnPfpError()
    {
        _pfpUrl = PfpUtility.GetFailedPfpUrl(User);
        StateHasChanged();
    }
    
    public async Task OnClickAddFriend()
    {
        var result = await ValourClient.AddFriendAsync(User.NameAndTag);

        if (!result.Success)
        {
            await Logger.Log($"Failed to add friend:\n{result.Message}", "orange");
            return;
        }

        _isFriend = true;
        StateHasChanged();
    }

    public async Task OnClickRemoveFriend()
    {
        var result = await ValourClient.RemoveFriendAsync(User.NameAndTag);

        if (!result.Success)
        {
            await Logger.Log($"Failed to remove friend:\n{result.Message}", "orange");
            return;
        }

        _isFriend = false;
        _isFriendRequested = false;
        StateHasChanged();
    }
    
    public async Task OnClickMessage()
    {
        var channel = await DirectChatChannel.FindAsyncByUser(User.Id);

        var newWindow = new DirectChatChannelWindow(channel);

        var oldWindow = WindowManager.GetSelectedWindow();
		
        Console.WriteLine($"Switching window {oldWindow.Id} to direct chat channel {channel.Id}");

        await WindowManager.ReplaceWindow(oldWindow, newWindow);
        await WindowManager.SetSelectedWindow(newWindow);
        await WindowManager.SetFocusedPlanet(null);
    }
}