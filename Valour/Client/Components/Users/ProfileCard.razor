<div id="@Id" class="card-wrapper" style="@CssStyle">
        <TiltCard ShineCssStyle="border-radius: 20px">
            <div class="card-glow" style="background-color: @Profile.GlowColor">
            </div>
            <div
                @onclick:stopPropagation="true"
                class="profile-card">
                <span class="card-bg" style="@CardBackground"></span>
                <div class="inner-card">
                    <div class="top-section">
                        <img class="pfp" alt="@_name's profile picture" src="@_pfpUrl"/>
                        <div class="online-bubble @_statusClass"></div>
                        <div class="names">
                            <p class="nickname">@_name</p>
                            <p class="name-and-tag">@_nameAndTag</p>
                            <div class="status-bubble">
                                <div class="arrow"></div>
                                <p class="status-text">"@(_status)"</p>
                            </div>
                        </div>
                    </div>
                    <p class="headline">@Profile.Headline</p>
                    <div class="mid-section">
                        <b class="card-subtitle">Bio</b>
                        <hr/>
                        <div class="mid-inner">
                            <p class="body-text">@Profile.Bio</p>
                        </div>
                    </div>


                </div>
            </div>
        </TiltCard>
    </div>

@code {
    
    [Parameter]
    public PlanetMember Member { get; set; }
    
    [Parameter]
    public User User { get; set; }
    
    [Parameter]
    public UserProfile Profile { get; set; }
    
    [Parameter]
    public string CssStyle { get; set; }

    public string CardBackground
    {
        get
        {
            var bg = (string.IsNullOrWhiteSpace(Profile.PrimaryColor) || User.Subscription == null) ?
                $"background-position: center center; background: {Profile.BorderColor};" :
                $"background-position: center center; background: linear-gradient(117deg, {Profile.PrimaryColor} 10%, {Profile.SecondaryColor} 50%, {Profile.TertiaryColor} 90%);";

            if (Profile.AnimatedBorder)
                bg += "animation: border-spin 5s linear infinite;";

            return bg;
        }
    }

    public readonly string Id = Guid.NewGuid().ToString();

    /* Values used to actually render the profile */
    private string _name;
    private string _nameAndTag;
    private string _status;
    private string _pfpUrl;
    private string _statusClass = "offline";
    
    public async Task LoadDetailsAsync()
    {
        _name = User.Name;
        _nameAndTag = User.NameAndTag;
        _status = User.Status;
        _statusClass = User.UserState.CssClassName;

        if (Member is not null)
        {
            _pfpUrl = await Member.GetPfpUrlAsync();
        }
        else
        {
            _pfpUrl = User.PfpUrl;
        }
        
        StateHasChanged();
    }
}