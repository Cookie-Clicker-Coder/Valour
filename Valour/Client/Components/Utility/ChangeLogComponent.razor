@inject ILocalStorageService LocalStorage

@if (!_show)
{
    return;
}

<div class="change-log" @onclick="OnClose">
    <h4>Valour 0.2.4.0 Changelog (Click to close)</h4>
    
    <img alt="Valour logo for version 0.2.4.0 changelog" style="width: 95%; margin-bottom: 18px" src="_content/Valour.Client/media/0.2.4.0.jpg" />
    
    <p style="color: #00ffff">PAYMENTS, ONBOARDING, AND INVITES!</p>
    <ul>
        <li style="color: #ff00ff">Add ability to buy Valour Credits!</li>
        <ul>
            <li>Easy and secure payment portal</li>
            <li>Supports the platform directly</li>
        </ul>
        <li>Improved Login/Register</li>
        <ul>
            <li>UX overhaul</li>
            <li>Redirects for referrals/invites</li>
            <li>A small easter egg</li>
            <li>User count for use in streams (valour.gg/usercount)</li>
        </ul>
        <li>Better invites!</li>
        <ul>
            <li>New experience for invited individuals who are not logged in</li>
            <li>Log in and Join / Register and Join buttons</li>
            <li>Visual improvements</li>
        </ul>
        <li>Rich embeds!</li>
        <ul>
            <li>Twitter and Reddit embeds</li>
            <li>Pretty slick looking</li>
            <li>u/spez is still a terrible CEO</li>
            <li>I still miss apollo</li>
        </ul>
        <li>Stonks!</li>
        <ul>
            <li>Typing a $TICKER in chat will give buttons</li>
            <li>TradingView charts and data in-chat</li>
        </ul>
        
        <li>Minecraft Integration! (mc.valour.gg)</li>
        <li>Removed herobrine</li>
        
        <li>Image expansion</li>
    </ul>
    <p>Thank you for using Valour! Go invite your friends ;) - Spike</p>
</div>

@code {

    private bool _show = false;
    
    protected override async Task OnInitializedAsync()
    {
        var version = typeof(ValourClient).Assembly.GetName().Version.ToString();
        
        if (!await LocalStorage.ContainKeyAsync("LastVersion") ||
            await LocalStorage.GetItemAsync<string>("LastVersion") != version)
        {
            _show = true;
            await LocalStorage.SetItemAsync<string>("LastVersion", version);
            
            StateHasChanged();
        }
    }
    
    private void OnClose()
    {
        _show = false;
        StateHasChanged();
    }

}