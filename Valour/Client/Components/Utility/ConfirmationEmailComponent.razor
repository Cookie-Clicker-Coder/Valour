@inject HttpClient Http
@inject NavigationManager NavManager
@inject ILocalStorageService LocalStorage
@inject ValourClient Client

<section>
    <h4>Please check your email!</h4>
    <h5>You can close this once you have clicked the link in the email</h5>

    @if (_responseResult.Success)
    {
        <span id="agreed-span" class="text-info">@_responseResult.Message</span>

    }
    else
    {
        <span id="agreed-span" class="text-danger">@_responseResult.Message</span>
    }

    <div class="form-group mt-4">
        <button class="btn v-btn primary mt-2" @onclick="OnClickResend" disabled="@_queuedMail">Resend Email</button>
    </div>
</section>

@code {
    private static readonly int RateLimitSeconds = 20;

    [Parameter]
    public RegisterUserRequest RegisterRequest { get; set; }

    private DateTime _time = DateTime.Now;
    private bool _queuedMail = false;

    // Spans
    private TaskResult _responseResult;

    private async Task OnClickResend(MouseEventArgs e)
    {
        _queuedMail = true;

        using PeriodicTimer periodicTimer = new(TimeSpan.FromSeconds(1));

        for (int i = (DateTime.Now - _time).Seconds; i < RateLimitSeconds + 1 && await periodicTimer.WaitForNextTickAsync(); i++)
        {
            _responseResult = new(true, $"Sending another email in {RateLimitSeconds - i} seconds!");
            StateHasChanged();
        }
        
        _responseResult = await Client.PrimaryNode.PostAsync("api/users/resendemail", RegisterRequest);

        _time = DateTime.Now;

        StateHasChanged();

        await Task.Delay(4000);

        _queuedMail = false;
        _responseResult = new TaskResult(true, "");
    }
}
