@inject IJSRuntime JsRuntime

<CascadingValue Value="@this" IsFixed="true">
    @ChildContent
</CascadingValue>

@code {
    [Parameter]
    public RenderFragment ChildContent { get; set; }
    
    public static DomWindowData Instance { get; private set; }

    protected override void OnInitialized()
    {
        Instance = this;
    }

    public class WindowDimensions
    {
        public int Width { get; set; }
        public int Height { get; set; }
    }

    public class ScreenPosition
    {
        public int X { get; set; }
        public int Y { get; set; }
    }
    
    private DotNetObjectReference<DomWindowData> _dotnetRef;
    private IJSInProcessObjectReference _jsModule;
    
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            _dotnetRef = DotNetObjectReference.Create(this);
            _jsModule = await JsRuntime.InvokeAsync<IJSInProcessObjectReference>("import", "./_content/Valour.Client/Components/Utility/DomWindowData.razor.js");
            
            await _jsModule.InvokeVoidAsync("initialize");
            
            await Logger.Log("Loaded DomWindowData component.", "cyan");
            var dims = await GetWindowDimensions();
            await Logger.Log("Starting window dimensions: " + dims.Width + "x" + dims.Height, "cyan");
        }
    }
    
    public async Task<WindowDimensions> GetWindowDimensions()
    {
        var dimensions = await _jsModule.InvokeAsync<WindowDimensions>("getWindowDimensions");
        return dimensions;
    }
    
    public async Task<ScreenPosition> GetMousePosition()
    {
        var position = await _jsModule.InvokeAsync<ScreenPosition>("getMousePosition");
        return position;
    }
}