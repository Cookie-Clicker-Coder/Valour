@inject IJSRuntime JsRuntime
@implements IAsyncDisposable

@code {
    public static MediaSoupWrapper Instance { get; private set; }

    protected override void OnInitialized()
    {
        Instance = this;
    }

    /// <summary>
    /// Module for calling Javascript functions
    /// </summary>
    private IJSInProcessObjectReference _jsModule;
    private string _clientId = Guid.NewGuid().ToString();

    /// <summary>
    /// Dotnet object reference for use in Javascript
    /// </summary>
    private DotNetObjectReference<MediaSoupWrapper> _thisRef;

    private VoiceChannelWindowComponent ActiveWindow { get; set; }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            _thisRef = DotNetObjectReference.Create(this);
            _jsModule = await JsRuntime.InvokeAsync<IJSInProcessObjectReference>("import", "./_content/Valour.Client/Components/Voice/MediaSoupWrapper.razor.js");
        }
    }

    async ValueTask IAsyncDisposable.DisposeAsync()
    {
        _thisRef.Dispose();
        await _jsModule.DisposeAsync();
    }

    public void SetActiveWindow(VoiceChannelWindowComponent window)
    {
        ActiveWindow = window;
    }

    /* Methods that invoke JS */
    
    public async Task Initialize(long channelId) => 
        await _jsModule.InvokeVoidAsync("initialize", _thisRef, _clientId, channelId);

    public async Task Join() => 
        await _jsModule.InvokeVoidAsync("join");
    
    public async Task JoinRoom() => 
        await _jsModule.InvokeVoidAsync("joinRoom");
    
    public async Task EnableMic() => 
        await _jsModule.InvokeVoidAsync("enableMic");

    public async Task<SendCameraStreamResponse> SendCameraStreams() =>
        await _jsModule.InvokeAsync<SendCameraStreamResponse>("sendCameraStreams");

    public async Task<StartScreenshareResponse> StartScreenshare() =>
        await _jsModule.InvokeAsync<StartScreenshareResponse>("startScreenshare");

    public async Task<StartCameraResponse> StartCamera() =>
        await _jsModule.InvokeAsync<StartCameraResponse>("startCamera");

    public async Task<CycleCameraResponse> CycleCamera() =>
        await _jsModule.InvokeAsync<CycleCameraResponse>("cycleCamera");

    public async Task<StopStreamsResponse> StopStreams() =>
        await _jsModule.InvokeAsync<StopStreamsResponse>("stopStreams");

    public async Task<LeaveRoomResponse> LeaveRoom() =>
        await _jsModule.InvokeAsync<LeaveRoomResponse>("leaveRoom");

    public async Task<SubscribeToTrackResponse> SubscribeToTrack(string peerId, string mediaTag) =>
        await _jsModule.InvokeAsync<SubscribeToTrackResponse>("subscribeToTrack", peerId, mediaTag);

    public async Task<UnsubscribeFromTrackResponse> UnsubscribeFromTrack(string peerId, string mediaTag) =>
        await _jsModule.InvokeAsync<UnsubscribeFromTrackResponse>("unsubscribeFromTrack", peerId, mediaTag);

    public async Task SetMicPaused(bool value) =>
        await _jsModule.InvokeVoidAsync("setMicPaused", value);

    public async Task SetCamPaused(bool value) =>
        await _jsModule.InvokeVoidAsync("setCamPaused", value);

    public async Task SetScreenPaused(bool value) =>
        await _jsModule.InvokeVoidAsync("setScreenPaused", value);

    public async Task SetScreenAudioPaused(bool value) =>
        await _jsModule.InvokeVoidAsync("setScreenAudioPaused", value);

    public async Task HookPeerElementMediaTrack(string elementId, string peerId, string mediaTag) =>
        await _jsModule.InvokeVoidAsync("hookPeerElementMediaTrack", elementId, peerId, mediaTag);


    /* Methods that are invoked by JS */


    /// <summary>
    /// This is called when the user closes the screen share through the browser
    /// UI rather than through Valour's
    /// </summary>
    [JSInvokable]
    public async Task OnScreenshareForceStop()
    {

    }

    [JSInvokable]
    public async Task OnUnexpectedLeaveRoom()
    {

    }

    [JSInvokable]
    public async Task OnSpeakerUpdate(ActiveSpeaker speaker)
    {
        if (ActiveWindow is null)
            return;

        await ActiveWindow.OnSpeakerUpdate(speaker);
    }

    [JSInvokable]
    public async Task OnPeerListUpdate(Dictionary<string, MediaPeer> peers)
    {
        if (ActiveWindow is null)
            return;

        await ActiveWindow.OnPeerListUpdate(peers);
    }

    [JSInvokable]
    public async Task OnReadyBuildPeer(string peerId, string mediaTag, string kind)
    {
        Console.WriteLine("Got peer build request, forwarding to active window...");

        if (ActiveWindow is null)
            return;

        await ActiveWindow.OnReadyBuildPeer(peerId, mediaTag, kind);
    }

    [JSInvokable]
    public async Task NotifyNeedDisposePeer(string peerId, string mediaTag)
    {
        if (ActiveWindow is null)
            return;

        await ActiveWindow.DisposePeer(peerId, mediaTag);
    }
}
