@using Valour.Shared.Channels
@implements IDisposable

<div class="currentlytyping-container">
    @if (DisplayData.Count > 0)
    {
        <img class="icon" src="_content/Valour.Client/media/CurrentIsTypingIcon.svg" />
    }
    @for (int i = 0; i < DisplayData.Count; i++)
    {
        <span class="is-typing-name" style="color: @DisplayData[i].rolecolor;">@DisplayData[i].name</span>
        @if (i != DisplayData.Count && DisplayData.Count > 1)
        {
            <span class="is-typing-name">, </span>
        }

    }
    @if (DisplayData.Count == 1)
    {
        <span class="is-typing-name">&nbsp;is typing...</span>
    }
    @if (DisplayData.Count > 1)
    {
        <span class="is-typing-name">&nbsp;are typing...</span>
    }

    @{
        // Amount we are *not* showing
        int remaining = TotalCount - DisplayData.Count;

        @if (remaining > 0)
        {
            <div class="remainder-text">
                + @remaining typing
            </div>
        }
    }
</div>

@code {

    [Parameter]
    public IChannel Channel { get; set; }

    [Parameter]
    public ChatChannelWindowComponent ParentComponent { get; set; }

    /// <summary>
    /// User names with their role color to be displayed
    /// </summary>
    public List<(string rolecolor, string name)> DisplayData { get; set; }

    /// <summary>
    /// The total number of currently typing users
    /// </summary>
    public int TotalCount { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        DisplayData = new();
        ValourClient.OnChannelCurrentlyTypingUpdate += OnCurrentlyTypingUpdate;
        ParentComponent.OnChannelChange += OnParentChannelChange;
    }

    public async Task OnParentChannelChange(IChatChannel channel)
    {
        Clear();
    }

    public void Clear()
    {
        TotalCount = 0;
        DisplayData.Clear();
        StateHasChanged();
    }

    void IDisposable.Dispose()
    {
        ParentComponent.OnChannelChange -= OnParentChannelChange;
        ValourClient.OnChannelCurrentlyTypingUpdate -= OnCurrentlyTypingUpdate;
    }

    /// <summary>
    /// Updates when SignalR sends a channel watching update
    /// This is virtual to allow specific channels to change how it works
    /// </summary>
    public virtual async Task OnCurrentlyTypingUpdate(ChannelTypingUpdate update)
    {
        if (update.ChannelId != Channel.Id)
            return;

        DisplayData.Clear();

        // Take first four where the userid does not equal our userid
        // if you want to test currently typing by yourself then remove the Where(..) below and the line for TotalCount
        foreach (var userId in update.UserIds.Where(x => x != ValourClient.Self.Id).Take(4))
        {
            if (ParentComponent.Window.Component.GetInputComponentType() == typeof(PlanetChatChannelInputComponent))
            {
                var planetChatChannel = Channel as PlanetChatChannel;
                var planet = await planetChatChannel.GetPlanetAsync();
                var member = await PlanetMember.FindAsyncByUser(userId, planet.Id);
                DisplayData.Add((await member.GetRoleColorAsync(), (await member.GetUserAsync()).Name));
            }
            else if (ParentComponent.Window.Component.GetInputComponentType() == typeof(DirectChatChannelInputComponent))
            {
                var user = await User.FindAsync(userId);
                DisplayData.Add(("#ffffff", user.Name));
            }
        }

        TotalCount = update.UserIds.Where(x => x != ValourClient.Self.Id).Count();

        StateHasChanged();
    }
}
