@using Valour.Shared.Channels
@implements IDisposable

<SmoothDraggable StartX="20" StartY="40" FromRight="true">
    <div class="watching-container">
        
        <p class="watching-title">Watching:</p>
        
        <div class="icons">
            @foreach (var user in DisplayData)
            {
                <WatchingIconComponent @key='@user.Id' User="@user" />
            }

            @{
                // Amount we are *not* showing
                int remaining = TotalCount - DisplayData.Count;

                @if (remaining > 0)
                {
                    <div class="remainder-text">
                        + @remaining watching
                    </div>
                }
            }
        </div>
    </div>
</SmoothDraggable>

@code {

    [Parameter]
    public IChannel Channel { get; set; }

    [Parameter]
    public ChatChannelWindowComponent ParentComponent { get; set; }

    /// <summary>
    /// Icons to be displayed
    /// </summary>
    public List<User> DisplayData { get; set; }

    /// <summary>
    /// The total number of watching users
    /// </summary>
    public int TotalCount { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        DisplayData = new();
        ValourClient.OnChannelWatchingUpdate += OnWatchingUpdate;
        ParentComponent.OnChannelChange += OnParentChannelChange;
    }

    public async Task OnParentChannelChange(IChatChannel channel)
    {
        Clear();
    }

    public void Clear()
    {
        TotalCount = 0;
        DisplayData.Clear();
        StateHasChanged();
    }

    void IDisposable.Dispose()
    {
        ParentComponent.OnChannelChange -= OnParentChannelChange;
        ValourClient.OnChannelWatchingUpdate -= OnWatchingUpdate;
    }

    /// <summary>
    /// Updates when SignalR sends a channel watching update
    /// This is virtual to allow specific channels to change how it works
    /// </summary>
    public virtual async Task OnWatchingUpdate(ChannelWatchingUpdate update)
    {
        if (update.ChannelId != Channel.Id)
            return;

        DisplayData.Clear();

        // Take first ten
        foreach (var userId in update.UserIds.Take(10))
        {
            var user = await User.FindAsync(userId);
            if (user is not null)
            {
                DisplayData.Add(user);
            }
        }

        TotalCount = update.UserIds.Count();

        StateHasChanged();
    }
}
