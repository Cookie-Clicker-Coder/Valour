@implements IDisposable
@inject WindowManager WindowManager

<!-- Cascade a bunch of values that messages and subcomponents need -->
<CascadingValue Value='Channel' IsFixed="true">
    <CascadingValue Value='Window' IsFixed="true">
        <CascadingValue Value='this' IsFixed="true">
            <WindowFrameComponent @ref="@WindowFrame" Window="@Window" Title="@Title" Description="@Description">
                <ChannelWatchingComponent ParentComponent="this" Channel="Channel" />
                <CascadingValue Value='ChannelPermissions'>
                    <MessageHolderComponent @ref="MessageHolder" @key="@($"mh-{Window.Id}")" />
                </CascadingValue>
                <DynamicComponent Type="Window.Component.GetInputComponentType()" />
            </WindowFrameComponent>
        </CascadingValue>
    </CascadingValue>
</CascadingValue>

@code {
    [Parameter]
    public ChatChannelWindow Window { get; set; }

    [CascadingParameter]
    public IModalService Modal { get; set; }

    public WindowFrameComponent WindowFrame { get; set; }
    
    public IChatChannel Channel;

    public event Func<IChatChannel, Task> OnChannelChange;

    public MessageHolderComponent MessageHolder { get; set; }

    public InputComponent InputComponent { get; set; }

    public PermissionsNode ChannelPermissions { get; set; }

    public bool CanRenderFlag { get; set; }

    public string Title { get; set; }

    public string Description { get; set; }

    private DotNetObjectReference<ChatChannelWindowComponent> _thisRef;

    // Runs when page is initialized
    protected override async Task OnInitializedAsync()
    {
        _thisRef = DotNetObjectReference.Create(this);

        Window.SetComponent(this);

        Console.WriteLine("Initializing channel window component.");

        Channel = Window.Channel;

        ValourClient.OnMessageReceived += OnReceiveMessage;
        ValourClient.OnMessageEdited += OnReceiveMessageEdit;

        await Channel.Open();
    }

    public void Refresh()
    {
        CanRenderFlag = true;
        StateHasChanged();
    }

    public virtual Type GetInputComponentType() => 
        typeof(InputComponent);

    public virtual Task<string> GetChannelDisplayTitleAsync() =>
        Task.FromResult(Channel.Name);

    public virtual Task<string> GetChannelDisplayDescriptionAsync() =>
        Task.FromResult(Channel.Description);

    public virtual async Task SetupNewChannelAsync()
    {
        Title = await GetChannelDisplayTitleAsync();
        Description = await GetChannelDisplayDescriptionAsync();
        
        Refresh();
        
        MessageHolder.Clear();

        var messages = ClientMessageWrapper.FromList(await Channel.GetLastMessagesGenericAsync(64));

        foreach (var msg in messages)
        {
            await ValourCache.Put(msg.Message.Id, msg.Message);
            if (msg.Reply is not null)
            {
                await ValourCache.Put(msg.Reply.Message.Id, msg.Reply.Message);
            }
        }

        await MessageHolder.AddMessages(messages, true, true);
    }

    public async Task SwapChannel(Channel newChannel)
    {
        Channel = newChannel;

        await WindowManager.SwapWindowChannel(Window, newChannel);

        await SetupNewChannelAsync();
        await InputComponent.SetupNewChannelAsync();

        if (OnChannelChange is not null)
            await OnChannelChange.Invoke(Channel);

        Refresh();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await SetupNewChannelAsync();
        }
        
        await base.OnAfterRenderAsync(firstRender);
        CanRenderFlag = false;
    }

    public async Task OnWindowClosed()
    {
        Console.WriteLine($"Gracefully exiting channel {Channel.Id} due to window change.");
        await Channel.Close();
    }

    public async Task OpenEditMode(MessageComponent message)
    {
        await InputComponent.OnBeginEdit(message, message.MessageData);
    }

    public async Task CloseEditMode(bool cancel = false)
    {
        await InputComponent.OnStopEdit(cancel);
    }

    protected override bool ShouldRender()
        => CanRenderFlag;

    void IDisposable.Dispose()
    {
        ValourClient.OnMessageReceived -= OnReceiveMessage;

        _thisRef.Dispose();
    }

    public Task OnChatChannelUpdate(ModelUpdateEvent eventData)
    {
        Refresh();
        return Task.CompletedTask;
    }

    public virtual async Task OnReceiveMessage(Message message)
    {
    // Ignore messages not meant for this channel
        if (message.ChannelId != Channel.Id)
            return;
        
        ValourClient.SetChannelLastViewedState(Channel.Id, message.TimeSent);

        // Create client wrapper
        ClientMessageWrapper wrapper = new ClientMessageWrapper(message);

        await MessageHolder.AddMessage(wrapper);
        InputComponent.PreviewMessageComponent.SetLast(MessageHolder.GetLastMessage());
        InputComponent.PreviewMessageComponent.CheckMinimal();
        InputComponent.PreviewMessageComponent.ReRender();
    }
    
    public virtual async Task OnReceiveMessageEdit(Message message)
    {
        // Ignore messages not meant for this channel
        if (message.ChannelId != Channel.Id)
            return;

        foreach (var m in MessageHolder.RenderedMessages)
        {
            if (m.MessageData.Message.Id == message.Id)
            {
                m.MessageData.Message.EditedTime = DateTime.UtcNow;
                m.MessageData.Message.Content = message.Content;
                m.MessageData.Message.AttachmentsData = message.AttachmentsData;
                m.MessageData.Message.MentionsData = message.MentionsData;
                m.MessageData.Clear();

                if (m.Edit)
                {
                    await m.CloseEditMode();
                }
                
                await m.BuildMessage(true);
            }
        }
    }

    public virtual Task OnClickWindow()
        => Task.CompletedTask;
}
