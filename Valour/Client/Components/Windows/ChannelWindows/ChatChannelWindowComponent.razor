@inherits WindowContentComponent<Channel>
@inject ValourClient Client
@inject MessageService MessageService
@inject ChannelStateService ChannelStateService

@using System.Threading.Channels
@using Channel = Valour.Sdk.Models.Channel
@implements IAsyncDisposable

<!-- Cascade a bunch of values that messages and subcomponents need -->
<CascadingValue Value="@Channel" IsFixed="true">
    <CascadingValue Value="@WindowCtx" IsFixed="true">
        <CascadingValue Value="this" IsFixed="true">
            <ChannelWatchingComponent ParentComponent="this" Channel="Channel" />
            <CascadingValue Value="@ChannelPermissions">
                <MessageHolderComponent @ref="MessageHolder" @key="@($"mh-{WindowCtx.Id}")" />
            </CascadingValue>
        </CascadingValue>
    </CascadingValue>
</CascadingValue>

@code {

    public class Content : WindowContent<ChatChannelWindowComponent, Channel>
    {
        public override async Task ImportData(string data, ValourClient client)
        {
            // Exported data is channel id
            long channelId = JsonSerializer.Deserialize<long>(data);
            var channel = await client.ChannelService.FetchChannelAsync(channelId);
            Data = channel;
        }

        public override string ExportData(ValourClient clientc)
        {
            if (Data is null)
                return null;
            
            return JsonSerializer.Serialize(Data.Id);
        }
    }
    
    public static async Task<Content> GetDefaultContent(Channel channel)
    {
        return new()
        {
            Icon = await channel.GetIconAsync(),
            Title = await channel.GetTitleAsync(),
            PlanetId = channel.PlanetId,
            Data = channel
        };
    }
    
    public MessageHolderComponent MessageHolder { get; set; }

    public PermissionsNode ChannelPermissions { get; set; }
    
    public Channel Channel;

    private DotNetObjectReference<ChatChannelWindowComponent> _thisRef;
    
    private readonly string _instanceId = Guid.NewGuid().ToString();

    // Runs when page is initialized
    protected override Task OnInitializedAsync()
    {
        _thisRef = DotNetObjectReference.Create(this);
        
        Console.WriteLine("Initializing channel window component.");

        Channel = Data;
        
        Channel.MessageReceived += OnReceiveMessage;
        Channel.MessageEdited += OnReceiveMessageEdit;
        
        WindowCtx.Tab.OnStartFloating += OnStartFloating;
        
        return Task.CompletedTask;
    }

    public virtual Type GetInputComponentType() => 
        typeof(InputComponent);
    
    public string WindowChannelKey => WindowCtx.Id + _instanceId;

    public virtual async Task SetupNewChannelAsync()
    {
        await Channel.Open(WindowChannelKey);
        
        // Planet stuff
        if (Channel.PlanetId is not null)
        {
            Channel.Planet.Deleted += OnPlanetDeleted;
            Channel.Planet.MyMember.Deleted += OnSelfMemberDeleted;
            ChannelPermissions = await Channel.GetFlattenedPermissionsAsync(Channel.Planet.MyMember.Id);
        }
        
        Channel.Updated += OnChatChannelUpdate;
        
        ReRender();
        
        MessageHolder.Clear();
        await MessageHolder.LoadRecentMessages(64);
        await Channel.UpdateUserState(DateTime.UtcNow);
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await SetupNewChannelAsync();
        }

        await base.OnAfterRenderAsync(firstRender);
    }

    public async Task OpenEditMode(MessageComponent message)
    {
        await MessageHolder.InputComponent.OnBeginEdit(message, message.Message);
    }

    public async Task CloseEditMode(bool cancel = false)
    {
        await MessageHolder.InputComponent.OnStopEdit(cancel);
    }
    
    public void OnChatChannelUpdate(ModelUpdateEvent<Channel> eventData)
    {
        ReRender();
    }

    public virtual async Task OnReceiveMessage(Message message)
    {
    // Ignore messages not meant for this channel
        if (message.ChannelId != Channel.Id)
            return;
        
        ChannelStateService.SetChannelLastViewedState(Channel.Id, message.TimeSent);
        
        await MessageHolder.AddMessage(message);
        MessageHolder.InputComponent.PreviewMessageComponent.SetLast(MessageHolder.GetLastMessage());
        MessageHolder.InputComponent.PreviewMessageComponent.CheckMinimal();
        MessageHolder.InputComponent.PreviewMessageComponent.ReRender();
    }
    
    public virtual async Task OnReceiveMessageEdit(Message message)
    {
        // Ignore messages not meant for this channel
        if (message.ChannelId != Channel.Id)
            return;

        foreach (var messageComponent in MessageHolder.RenderedMessages)
        {
            if (messageComponent.Message.Id == message.Id)
            {
                messageComponent.Message.EditedTime = DateTime.UtcNow;
                messageComponent.Message.Content = message.Content;
                messageComponent.Message.AttachmentsData = message.AttachmentsData;
                messageComponent.Message.MentionsData = message.MentionsData;

                if (messageComponent.Edit)
                {
                    await messageComponent.CloseEditMode();
                }
                
                messageComponent.BuildMessage(true);
            }
        }
    }

    public async Task OnClickWindow()
    {
        await WindowCtx.Tab.NotifyFocused();
    }
    
    public Task OnStartFloating()
    {
        return MessageHolder.ScrollToBottom();
    }

    public Task OnPlanetDeleted()
    {
        return WindowCtx.Tab.SetContent(HomeWindowComponent.DefaultContent);
    }

    public Task OnSelfMemberDeleted()
    {
        return WindowCtx.Tab.SetContent(HomeWindowComponent.DefaultContent);
    }
    
    public async Task<List<PlanetMember>> GetLastChatMembers(int count)
    {
        // Not applicable for non-planet channels
        if (Channel.PlanetId is null)
            return new List<PlanetMember>();
        
        var lastMessages = MessageHolder.DisplayedMessages.TakeLast(20).Reverse();
        List<PlanetMember> chatters = new();

        foreach (var message in lastMessages)
        {
            var member = await message.FetchAuthorMemberAsync();
            if (!chatters.Contains(member))
                chatters.Add(member);
        }

        return chatters;
    }

    public async ValueTask DisposeAsync()
    {
        await HandleWindowClose();

        if (Channel.PlanetId is not null)
        {
            Channel.Planet.Deleted -= OnPlanetDeleted;
            
            if (Channel.Planet.MyMember is not null)
                Channel.Planet.MyMember.Deleted -= OnSelfMemberDeleted;
        }
        
        Channel.MessageReceived -= OnReceiveMessage;
        
        _thisRef.Dispose();
    }

    public async Task HandleWindowClose()
    {
        await Channel.Close(WindowChannelKey);
    }
}
