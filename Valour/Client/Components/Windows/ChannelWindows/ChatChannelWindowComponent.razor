@inject WindowManager windowManager
@implements IDisposable
@inject SoundManager soundManager

<!-- Cascade a bunch of values that messages and subcomponents need -->
<CascadingValue Value='Channel' IsFixed="true">
    <CascadingValue Value='Window' IsFixed="true">
        <CascadingValue Value='this' IsFixed="true">
            <div class="d-flex flex-column window" style="height:99%; max-width:100%;" id="window" @onclick="@OnClickWindow">

                <div class="channel-info">

                    <h3 class="title">
                        @Title
                    </h3>

                    <p class="description">
                        @Description
                    </p>

                    <div class="button-watching-bar">
                        <ChannelWatchingComponent ParentComponent="this" Channel="Channel"></ChannelWatchingComponent>

                        <WindowButtonsComponent Window="Window" OnClickHome="ReturnHome" OnClickExit="CloseWindow"></WindowButtonsComponent>
                    </div>
                </div>

                <CascadingValue Value='ChannelPermissions'>
                    <MessageHolderComponent @ref="MessageHolder" @key='$"mh-{Window.Id}"'></MessageHolderComponent>
                </CascadingValue>
                
                <DynamicComponent Type="Window.Component.GetInputComponentType()"></DynamicComponent>

            </div>
        </CascadingValue>
    </CascadingValue>
</CascadingValue>

@code {

    /// <summary>
    /// True if the client has negotiated a channel connection
    /// </summary>
    private bool channelConnected;

    [Parameter]
    public ChatChannelWindow Window { get; set; }

    [CascadingParameter]
    public IModalService Modal { get; set; }

    public IChatChannel Channel;

    public Func<Task> ForceRefreshMessages;

    public event Func<IChatChannel, Task> OnChannelChange;

    public bool ForceMessageRefresh;

    public MessageHolderComponent MessageHolder { get; set; }

    public InputComponent InputComponent { get; set; }

    public PermissionsNode ChannelPermissions { get; set; }

    public MessageComponent MessageEditing { get; set; }

    public bool CanRenderFlag { get; set; }

    public string Title { get; set; }

    public string Description { get; set; }

    private DotNetObjectReference<ChatChannelWindowComponent> _thisRef;

    // Runs when page is initialized
    protected override async Task OnInitializedAsync()
    {
        _thisRef = DotNetObjectReference.Create(this);

        Window.SetComponent(this);

        Console.WriteLine("Initializing channel window component.");

        Channel = Window.Channel;

        ValourClient.OnMessageRecieved += OnRecieveMessage;

        await Channel.Open();
    }

    public void Refresh()
    {
        CanRenderFlag = true;
        StateHasChanged();
    }

    public virtual Type GetInputComponentType() => 
        typeof(InputComponent);

    public virtual async Task<string> GetChannelDisplayTitleAsync() =>
        Channel.Name;

    public virtual async Task<string> GetChannelDisplayDescriptionAsync() =>
        Channel.Description;

    public async virtual Task SetupNewChannelAsync()
    {
        Title = await GetChannelDisplayTitleAsync();
        Description = await GetChannelDisplayDescriptionAsync();

        Refresh();

        MessageHolder.Clear();

        var msgs = ClientMessageWrapper.FromList(await Channel.GetLastMessagesGenericAsync(64));

        foreach (var msg in msgs)
            await ValourCache.Put(msg.Message.Id, msg.Message);

        MessageHolder.AddMessages(msgs);

        await MessageHolder.ScrollToBottom();
    }

    public async Task SwapChannel(IChatChannel newchannel)
    {
        Channel = newchannel;

        await windowManager.SwapWindowChannel(Window, newchannel);

        await SetupNewChannelAsync();
        await InputComponent.SetupNewChannelAsync();

        if (OnChannelChange is not null)
            await OnChannelChange.Invoke(Channel);

        Refresh();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await base.OnAfterRenderAsync(firstRender);
        CanRenderFlag = false;
    }

    public async Task OnWindowClosed()
    {
        Console.WriteLine($"Gracefully exiting channel {Channel.Id} due to window change.");
        await Channel.Close();
    }

    public async Task OpenEditMode(MessageComponent message)
    {
        await InputComponent.OnBeginEdit(message.MessageData);
    }

    protected override bool ShouldRender()
        => CanRenderFlag;

    void IDisposable.Dispose()
    {
        ValourClient.OnMessageRecieved -= OnRecieveMessage;

        _thisRef.Dispose();
    }

    public async Task OnChatChannelUpdate(ModelUpdateEvent eventData)
    {
        Refresh();
    }

    public async Task CloseWindow()
    {
        await windowManager.CloseWindow(Window);
    }

    public async Task ReturnHome()
    {
        HomeWindow newWindow = new HomeWindow();
        await windowManager.ReplaceWindow(Window, newWindow);
        await windowManager.SetFocusedPlanet(null);
    }

    public virtual async Task OnRecieveMessage(Message message)
    {
        // Ignore messages not meant for this channel
        if (message.ChannelId != Channel.Id)
            return;
        
        ValourClient.SetChannelLastViewedState(Channel.Id, message.TimeSent);

        // Create client wrapper
        ClientMessageWrapper wrapper = new ClientMessageWrapper(message);
        await CheckForSelfMention(wrapper);

        await MessageHolder.AddMessage(wrapper);
        InputComponent.PreviewMessageComponent.SetLast(MessageHolder.GetLastMessage());
        InputComponent.PreviewMessageComponent.CheckMinimal();
        InputComponent.PreviewMessageComponent.ReRender();
    }

    public virtual async Task CheckForSelfMention(ClientMessageWrapper messageWrapper)
    {
        if (messageWrapper.Message.Mentions.Any(x => x.Type == MentionType.User && x.TargetId == ValourClient.Self.Id))
            await soundManager.PlaySound("Notification.mp3");
    }

    public virtual Task OnClickWindow()
        => Task.CompletedTask;
}
