@inherits ChatChannelWindowComponent
@implements IDisposable
@inject SoundManager soundManager
@inject WindowManager windowManager

@{
    // Renders the base component
    base.BuildRenderTree(__builder);
}

@code {

    public DirectChatChannel DirectChannel { get; set; }
    public User OtherUser { get; set; }

    public override async Task SetupNewChannelAsync()
    {
        DirectChannel = Channel as DirectChatChannel;

        if (DirectChannel.UserOneId == ValourClient.Self.Id)
            OtherUser = await User.FindAsync(DirectChannel.UserTwoId);
        else
            OtherUser = await User.FindAsync(DirectChannel.UserOneId);

        await base.SetupNewChannelAsync();
    }

    public override Type GetInputComponentType() => 
    typeof(DirectChatChannelInputComponent);

    public override async Task<string> GetChannelDisplayTitleAsync() =>
        OtherUser?.Name ?? "User Not Found";

    public override async Task<string> GetChannelDisplayDescriptionAsync() =>
        "Private conversation";

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
            await SetupNewChannelAsync();

        await base.OnAfterRenderAsync(firstRender);
    }

    public override async Task CheckForSelfMention(ClientMessageWrapper messageWrapper)
    {
        if (messageWrapper.Message.Mentions.Any(x => x.Type == MentionType.User && x.TargetId == ValourClient.Self.Id))
            await soundManager.PlaySound("Notification.mp3");
    }

    public override async Task OnClickWindow()
    {
        await windowManager.SetFocusedPlanet(null);
    }
}