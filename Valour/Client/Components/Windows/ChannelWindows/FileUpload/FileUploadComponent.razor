@inject IJSRuntime JS

@if (_attachment is null)
{
    <h5>Loading content...</h5>
    return;
}

<div class="preview-container" @onkeydown='OnKeyDown'>
	<h4>Upload?</h4>

    <div class="attachment-holder">
        @switch (_displayType){
            case DisplayType.Image:
                <ImageAttachmentComponent Attachment="@_attachment"/>
                break;
            case DisplayType.Video:
                <VideoAttachmentComponent Attachment="@_attachment" />
                break;
            case DisplayType.Audio:
                <AudioAttachmentComponent Attachment="@_attachment" />
                break;
            default:
                <FileAttachmentComponent Attachment="@_attachment" />
                break;
        }
    </div>

    <div class="d-flex flex-row justify-content-around">
        <button class='btn v-button' style="float: right" @onclick='OnClickConfirm'>Go for it</button>
        <button class='btn v-button danger' @onclick='OnClickCancel'>Cancel</button>
    </div>
</div>

@code
{
    [Parameter]
    public IBrowserFile File { get; set; }

    [Parameter]
    public byte[] Data { get; set; }

    [Parameter]
    public Func<Task> OnConfirm { get; set; }

    [CascadingParameter]
    public BlazoredModalInstance Instance { get; set; }

    public enum DisplayType {
        Image,
        Video,
        Audio,
        File
    }

    private MessageAttachment _attachment { get; set; }

    private DisplayType _displayType;

    protected override async Task OnInitializedAsync(){

        _displayType = GetDisplayType(File);

        // Load into blob form and get url
        string blobUrl = await JS.InvokeAsync<string>("createBlob", Data, File.ContentType);

        // Build attachment object
        _attachment = new MessageAttachment() { FileName = File.Name, Location = blobUrl, MimeType = File.ContentType };
    }

    public async Task OnKeyDown(KeyboardEventArgs e){
        if (e.Key.ToLower() == "enter")
            await OnClickConfirm();
    }

    public DisplayType GetDisplayType(IBrowserFile file){
        var mime = file.ContentType.ToLower();

        if (mime.StartsWith("image"))
            return DisplayType.Image;
        else if (mime.StartsWith("video"))
            return DisplayType.Video;
        else if (mime.StartsWith("audio"))
            return DisplayType.Audio;

        return DisplayType.File;
    }

    public async Task OnClickCancel(){
        await Instance.CloseAsync();
    }

    public async Task OnClickConfirm(){
        await Instance.CloseAsync();
        await OnConfirm.Invoke();
    }
}