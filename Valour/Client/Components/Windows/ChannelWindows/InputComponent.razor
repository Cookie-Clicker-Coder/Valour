@inject IJSRuntime JsRuntime
@inject WindowManager windowManager
@implements IAsyncDisposable
@using System.Net.Http.Headers
@using Valour.Api.Models.Messages;
@using Valour.TenorTwo.Models
@using Media = Valour.TenorTwo.Models.Media

<div class='@(CanUserPost ? string.Empty : "no-perms")'>
    <div class="preview-message">
        <MessageComponent @key="@(Window.Id + "-preview-message")" @ref="PreviewMessageComponent" MessageData="PreviewMessage" Ghost="true" LastMessage="WindowComponent.MessageHolder.GetLastMessage()" ></MessageComponent>
    </div>

    <ChannelCurrentlyTypingComponent ParentComponent="WindowComponent" Channel="WindowComponent.Channel"></ChannelCurrentlyTypingComponent>

    <div class="textbox-holder" @onclick="@MessageHolder.ScrollToBottomAnimated">
        <div style="position: relative">
            <TenorMenuComponent @key="@("tenor-menu-" + Window.Id)" @ref="TenorMenu" ChannelWindow="Window"></TenorMenuComponent>
        </div>
        <MentionSelectComponent @ref="MentionSelector" InputComponent="this"></MentionSelectComponent>
        <EmojiMart @ref="@_emojis" EmojiSet="twitter" OnClickOutside="@CloseEmojis" OnEmojiClick="@OnEmojiSelectedAsync" CssClass="emoji-mart-wrapper-custom"></EmojiMart>
        
        <div class="textbox" @ref="DropZoneElement">
            <InputFile id="@("upload-core-" + Window.Id)" @ref="InputFile_Ref" style="width: 0; height: 0; display: none;" OnChange="LoadFiles"></InputFile>
            <button tabindex="0" class="upload-btn" @onmousedown="@ShowUploadMenu" onmouseup="this.focus()" @onblur="@HideUploadMenu">
                <img class="upload" src="_content/Valour.Client/media/Plus-Icon.svg" alt="Upload File"/>
            </button>
            
            <button id="emoji-button" class="emoji-button" @onclick="@ToggleEmojis">
                <img alt="Smiling face emoji" src="https://cdn.jsdelivr.net/gh/jdecked/twemoji@14.1.2/assets/72x72/1f604.png" />
            </button>

            <div class="upload-menu" style="@_uploadMenuStyle">
                <div class="content tenor" @onmousedown:stopPropagation="true">
                    @* Somewhat creative way to call main upload element *@
                    <button class="button" @onmousedown="@OnClickUploadAsync">
                        Upload a File
                    </button>
                    <button class="button tenor" @onmousedown="@ShowTenorMenu">
                        Gifs via Tenor
                    </button>
                    <button class="button" @onmousedown="@OnClickSendCurrency">
                        Send Currency
                    </button>
                </div>
                <div class="carrot"></div>
            </div>


            @if (DeviceInfo.IsMobile && CanUserPost){
                <div class="send-wrapper" @onclick="@OnSubmitClick" @onclick:stopPropagation="true" @onclick:preventDefault="true">
                    <img class='send-button' src="_content/Valour.Client/media/send-icon.svg" alt="Send Message" />
                </div>
            }
            
            @if (!CanUserPost)
            {
                <p class="input-placeholder">You lack permission to send messages in this channel</p>
            }
            else if (PreviewMessage is null || PreviewMessage.IsEmpty)
            {
                <p class="input-placeholder">@PlaceholderText</p>
            }

            <div class="textbox-wrapper">
                <div @ref="InnerInputRef" tabindex="1" role="textbox" contenteditable='@(CanUserPost ? "true" : "false")' class="textbox-inner" id="text-input-@Window.Id" data-window="@Window.Id" rows="1" @onclick:stopPropagation="true" @onclick:preventDefault="true" onclick="document.getElementById('text-input-@Window.Id').focus()" autofocus>
                </div>
            </div>
        </div>
    </div>
</div>



@code {

    [CascadingParameter]
    public ChatChannelWindowComponent WindowComponent { get; set; }

    [CascadingParameter]
    public ChatChannelWindow Window { get; set; }

    [CascadingParameter]
    public IModalService Modal { get; set; }
    
    /// <summary>
    /// A reference to the container for message rendering
    /// </summary>
    protected MessageHolderComponent MessageHolder { get; set; }

    /// <summary>
    /// Placeholder text shown in the input box when empty
    /// </summary>
    protected virtual string PlaceholderText { get; }

    /// <summary>
    /// The tenor menu component
    /// </summary>
    private TenorMenuComponent TenorMenu { get; set; }

    /// <summary>
    /// A reference to the inner input component
    /// </summary>
    private ElementReference InnerInputRef { get; set; }

    /// <summary>
    /// The component that displays the mention selection
    /// </summary>
    private MentionSelectComponent MentionSelector { get; set; }

    /// <summary>
    /// True if this input is currently editing a message
    /// </summary>
    public bool IsEditing { get; set; }

    /// <summary>
    /// The message component for the preview message
    /// </summary>
    public MessageComponent PreviewMessageComponent { get; private set; }
    
    /// <summary>
    /// The message (if any) that is currently being edited
    /// </summary>
    public MessageComponent EditingMessageComponent { get; private set; }
    private string EditingOriginalText { get; set; }

    /// <summary>
    /// The preview message
    /// </summary>
    protected ClientMessageWrapper PreviewMessage { get; set; }

    /// <summary>
    /// Dotnet object reference for use in Javascript
    /// </summary>
    private DotNetObjectReference<InputComponent> _thisRef;

    /// <summary>
    /// Module for calling Javascript functions
    /// </summary>
    private IJSInProcessObjectReference _jsModule;

    /// <summary>
    /// If the current user is able to post messages using this input
    /// </summary>
    protected bool CanUserPost { get; set; } = true; // Start as true

    /// <summary>
    /// Allows this component to render when true
    /// </summary>
    public bool CanRenderFlag { get; set; }

    private DateTime _lastTypingUpdateSent = DateTime.MinValue;

    private string _uploadMenuStyle = "display: none;";

    private EmojiMart _emojis;

    private void ToggleEmojis()
    {
        _emojis.ToggleVisible();
    }
    
    private Task CloseEmojis(OutsidePickerClickEvent e)
    {
        if (e.Target == "emoji-button")
            return Task.CompletedTask;
        
        _emojis.ToggleVisible();

        return Task.CompletedTask;
    }
    
    /// <summary>
    /// Run when the component is initialized
    /// </summary>
    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        await SetupNewChannelAsync();
    }

    protected override bool ShouldRender()
        => CanRenderFlag;

    public void Refresh()
    {
        CanRenderFlag = true;
        StateHasChanged();
    }

    private void OnClickSendCurrency()
    {
        Modal.Show<EcoPayModal>();
    }

    public async Task ShowTenorMenu()
    {
        await TenorMenu.Show();
    }

    private async Task ShowUploadMenu()
    {
        if (_uploadMenuStyle != "")
        {
            _uploadMenuStyle = "";
            Refresh();
        }
    }

    private void HideUploadMenu()
    {
        if (_uploadMenuStyle != "display: none;")
        {
            _uploadMenuStyle = "display: none;";
            Refresh();   
        }
    }

    private async Task OnClickUploadAsync()
    {
        await _jsModule.InvokeVoidAsync("OpenUploadFile", Window.Id);
    }

    async ValueTask IAsyncDisposable.DisposeAsync()
    {
        windowManager.NotYetSentMessages.Remove(WindowComponent.Channel.Id, out var _);
        _thisRef.Dispose();
        await _jsModule.DisposeAsync();
    }

    public virtual async Task SetupNewChannelAsync()
    {
        WindowComponent.InputComponent = this;
        MessageHolder = WindowComponent.MessageHolder;

        PreviewMessage = new(BuildNewMessage());

        Refresh();
    }

    public virtual Message BuildNewMessage()
    {
        // Other message building
        return null;
    }

    private async Task OnEmojiSelectedAsync(EmojiClickEvent e)
    {
        await InjectEmojiAsync(e.Id, e.Native);
    }

    public async Task SetInputContent(string content)
    {
        await _jsModule.InvokeVoidAsync("setInputContent", Window.Id, content);
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            _thisRef = DotNetObjectReference.Create(this);
            _jsModule = await JsRuntime.InvokeAsync<IJSInProcessObjectReference>("import", "./_content/Valour.Client/Components/Windows/ChannelWindows/InputComponent.razor.js?version=2");
            await SetupJSAsync();
            await JsRuntime.InvokeAsync<IJSObjectReference>("initializeFileDropZone", DropZoneElement, InputFile_Ref.Element);

            await OnAfterJsSetupAsync();
        }

        CanRenderFlag = false;
    }

    public virtual Task OnAfterJsSetupAsync()
    {
        return Task.CompletedTask;
    }

    #region File Drop System

    // Drop zone stuff
    public InputFile InputFile_Ref { get; set; }
    ElementReference DropZoneElement { get; set; }
    IJSObjectReference dropZoneInstance;

    public async Task OnBeginEdit(MessageComponent component, ClientMessageWrapper message)
    {
        EditingMessageComponent = component;
        PreviewMessage = message;
        EditingOriginalText = PreviewMessage.Message.Content;
        await PreviewMessageComponent.SetMessage(PreviewMessage);

        await OnChatboxUpdate(message.Message.Content, message.Message.Content.Split(' ').LastOrDefault());

        await SetInputContent(message.Message.Content);

        Refresh();

        await SelectEnd();
    }

    public async Task OnStopEdit(bool cancelled = false)
    {
        if (cancelled)
        {
            // Return to original
            //EditingMessageComponent.MessageData.Clear();
            EditingMessageComponent.MessageData.Message.Content = EditingOriginalText;
        }

        // Clear preview
        EditingMessageComponent = null;
        PreviewMessage = new(BuildNewMessage());
        await PreviewMessageComponent.SetMessage(PreviewMessage);

        // Clear input
        await OnChatboxUpdate(null, "");
        await SetInputContent(string.Empty);
        
        PreviewMessageComponent.ReRender();
    }

    private async Task LoadFiles(InputFileChangeEventArgs e)
    {
        //var file = await e.File.RequestImageFileAsync("jpeg", 256, 256);

        var file = e.File;

        if (file == null)
        {
            Console.WriteLine("Could not load file as an image.");
        }

        if (file.Size > 10240000)
        {
            Console.WriteLine("Max upload size is 10mb.");
        }

        byte[] data = new byte[file.Size];

        await file.OpenReadStream(10240000).ReadAsync(data);

        var content = new MultipartFormDataContent();
        var arrContent = new ByteArrayContent(data);
        if (!string.IsNullOrWhiteSpace(file.ContentType))
        {
            arrContent.Headers.ContentType = new MediaTypeHeaderValue(file.ContentType);
        }

        content.Add(arrContent, file.Name, file.Name);

        MessageAttachmentType type = MessageAttachmentType.File;

        // Determine if audio or video or image

        var mime = file.ContentType;
        string uploadPath = "file";
        
        // We only actually need to check the first letter,
        // since only 'image/' starts with i
        if (mime[0] == 'i')
        {
            type = MessageAttachmentType.Image;
            uploadPath = "image";
        }
        // Same thing here - only 'video/' starts with v
        else if (mime[0] == 'v')
        {
            type = MessageAttachmentType.Video;
        }
        // Unfortunately 'audio/' and 'application/' both start with 'a'
        else if (mime[0] == 'a' && mime[1] == 'u')
        {
            type = MessageAttachmentType.Audio;
        }

        MessageAttachment newAttachment = new(type)
        {
            MimeType = file.ContentType,
            FileName = file.Name,
        };

        ModalParameters modalParams = new();
        modalParams.Add("Data", data);
        modalParams.Add("Attachment", newAttachment);
        modalParams.Add("OnConfirm", 
            async () => {
                var result = await ValourClient.PrimaryNode.PostAsyncWithResponse<string>($"upload/{uploadPath}", content);

                if (result.Success)
                {
                    newAttachment.Location = result.Data;
                    await AddMessageAttachment(newAttachment);
                }
                else
                {
                    Console.WriteLine(result.Message);
                }
            }
        );

        Modal.Show<FileUploadComponent>("File Upload", modalParams);

        Refresh();
    }

    public async Task RemoveAttachment(int id)
    {
        var attachments = PreviewMessage.Message.Attachments;
        if (attachments is null)
            return;

        if (id > attachments.Count - 1)
            return;

        attachments.RemoveAt(id);

        PreviewMessage.Message.SetAttachments(attachments);

        await RefreshPreviewMessage();
        Refresh();
    }

    #endregion

    public async Task AddTenor(Media media)
    {
        var format = media.GetFormat(MediaFormatType.gif);

        await AddMessageAttachment(new MessageAttachment(MessageAttachmentType.Image)
        {
            Location = format.Url,
            MimeType = "image/gif",
            Width = format.Dims[0],
            Height = format.Dims[1],
            FileName = media.Title + ".gif"
        });
    }

    public async Task UpdateMentionMenu(string text)
    {
        //Console.WriteLine(text);

        if (text.StartsWith('@') || text.StartsWith('#'))
        {
            if (!MentionSelector.Visible)
            {
                await MentionSelector.SetVisible(true, text[0]);
            }

            await MentionSelector.SetText(text);
        }
        else
        {
            if (MentionSelector.Visible){
                await MentionSelector.SetVisible(false);
            }
        }

        Refresh();
    }

    public async Task AddMessageAttachment(MessageAttachment attachment)
    {
        var attachments = PreviewMessage.Message.Attachments;
        attachments ??= new List<MessageAttachment>();

        attachments.Add(attachment);
        PreviewMessage.Message.SetAttachments(attachments);

        await RefreshPreviewMessage();
        Refresh();
    }

    public async Task RefreshPreviewMessage() {
        PreviewMessage.Clear();
        PreviewMessage.Message.TimeSent = DateTime.UtcNow;
        PreviewMessage.GenerateForPost();
        await PreviewMessageComponent.SetMessage(PreviewMessage);
    }

    public async Task SetReplyMessage(ClientMessageWrapper message)
    {
        PreviewMessageComponent.MessageData.Reply = message;
        PreviewMessage.Message.ReplyToId = message?.Message?.Id;

        await RefreshPreviewMessage();
        Refresh();

        await InnerInputRef.FocusAsync();
    }

    public async Task RemoveReply()
    {
        PreviewMessage.Message.ReplyToId = null;
        PreviewMessageComponent.MessageData.Reply = null;
        PreviewMessageComponent.ReRender();
    }

    public async Task PostMessage(ClientMessageWrapper messageWrapper)
    {
        messageWrapper.GenerateForPost();
        
        // New message
        if (messageWrapper.Message.Id == 0)
        {
            MessageHolder.AddQueuedMessage(messageWrapper);
            
            var result = await messageWrapper.Message.PostMessageAsync();

            if (!result.Success)
            {
                MessageHolder.RemoveQueuedMessage(messageWrapper.Message.Fingerprint);

                DirectMessage errorMsg = new()
                {
                    Content = $"Hey there, friend! Your message didn't post properly.\n Reason: {result.Message}",
                    AuthorUserId = long.MaxValue,
                    ChannelId = Window.Channel.Id,
                    Id = 0 
                };

                MessageHolder.RemoveErrorMessage();
                await MessageHolder.AddMessage(new ClientMessageWrapper(errorMsg));
            }
            else
            {
                MessageHolder.RemoveErrorMessage();
            }
            
            PreviewMessageComponent.MessageData.Reply = null;
            PreviewMessage.Clear();
            PreviewMessageComponent.ReRender();
            windowManager.NotYetSentMessages.Remove(WindowComponent.Channel.Id, out var _);
        }
        // Editing message
        else
        {
            var result = await messageWrapper.Message.EditMessageAsync();
            if (!result.Success)
            {
                DirectMessage errorMsg = new()
                {
                    Content = $"Hey there, friend! Your message didn't edit properly.\n Reason: {result.Message}",
                    AuthorUserId = long.MaxValue,
                    ChannelId = Window.Channel.Id,
                    Id = 0 
                };

                MessageHolder.RemoveErrorMessage();
                await MessageHolder.AddMessage(new ClientMessageWrapper(errorMsg));
            }
            else
            {
                PreviewMessage = new(BuildNewMessage());
                await PreviewMessageComponent.SetMessage(PreviewMessage);
            }
        }
    }

    /////////////////////
    // JS Interop Zone //
    /////////////////////

    // C# -> JS
    private async Task SetupJSAsync()
    {
        await _jsModule.InvokeVoidAsync("setup", Window.Id, _thisRef);
    }

    public async Task InjectElementAsync(string text, string coverText, string classList, string styleList)
    {
        await _jsModule.InvokeVoidAsync("injectElement", text, coverText, classList, styleList, Window.Id);
    }
    
    public async Task InjectEmojiAsync(string emoji, string native)
    {
        await _jsModule.InvokeVoidAsync("injectEmoji", emoji, native, Window.Id);
    }

    public async Task OnSubmitClick()
    {
        await _jsModule.InvokeVoidAsync("submitMessage", Window.Id, true);
    }

    private async Task SelectEnd()
    {
        await _jsModule.InvokeVoidAsync("selectEnd", Window.Id);
    }

    // JS -> C#
    [JSInvokable]
    public async Task OnCaretUpdate(string currentWord)
    {
        await UpdateMentionMenu(currentWord);
    }

    /// <summary>
    /// This runs every time a key is pressed when the chatbox is selected
    /// </summary>
    [JSInvokable]
    public async Task OnChatboxUpdate(string input, string currentWord)
    {
        //Console.WriteLine(input);

        await UpdateMentionMenu(currentWord);

        if (input is not null)
        {
            // Fix for dumb formatting in HTML
            input = input.Replace("\n\n«", "«").Replace("» \n\n", "»");
        }

        windowManager.NotYetSentMessages[WindowComponent.Channel.Id] = input;
        PreviewMessage.Message.Content = input;
        await RefreshPreviewMessage();

        if (EditingMessageComponent is not null)
        {
            await EditingMessageComponent.BuildMessage();
        }

        await MessageHolder.ScrollToBottom();

        if (DateTime.UtcNow > _lastTypingUpdateSent.AddSeconds(5))
        {
            WindowComponent.Channel.SendIsTyping();
            _lastTypingUpdateSent = DateTime.UtcNow;
        }

        Refresh();
    }

    [JSInvokable]
    public async Task MentionSubmit()
    {
        await MentionSelector.Submit();

        Refresh();
    }

    [JSInvokable]
    public void MoveMentionSelect(int n)
    {
        MentionSelector.MoveSelect(n);
    }

    [JSInvokable]
    public async Task OnUpArrowNonMention()
    {
        if (!string.IsNullOrEmpty((PreviewMessage.Message.Content)))
        {
            return;
        }
        
        // Get last message where author is the current user
        var lastMessage = MessageHolder.RenderedMessages
            .LastOrDefault(m => m.MessageData.Message.AuthorUserId == ValourClient.Self.Id);

        if (lastMessage is null)
        {
            return;
        }

        await lastMessage.OpenEditMode();
        await SelectEnd();
    }

    [JSInvokable]
    public async Task OnEscape()
    {
        if (EditingMessageComponent is null)
            return;
        
        await EditingMessageComponent.CloseEditMode(true);
    }

    [JSInvokable]
    public async Task OnChatboxSubmit()
    {
        if (PreviewMessage.Message.Content is not null)
        {
            PreviewMessage.Message.Content =
                PreviewMessage.Message.Content.TrimEnd('\n');

            PreviewMessage.Message.Content =
                PreviewMessage.Message.Content.Trim();
        }

        if (PreviewMessage.IsEmpty)
        {
            return;
        }

        var postMessage = new ClientMessageWrapper(PreviewMessage.Message);

        // New message for preview
        PreviewMessage = new(BuildNewMessage());
        await PreviewMessageComponent.SetMessage(PreviewMessage);

        await OnChatboxUpdate(null, "");

        // Post message to server
        //StateHasChanged();
        await PostMessage(postMessage);
    }
}
