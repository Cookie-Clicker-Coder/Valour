@inject IJSRuntime JsRuntime

@if (Visible)
{
    <div class="mention-select">
        @{
            var i = 0;

            foreach (var match in _matches)
            {
                var x = i;
                switch (match.Item)
                {
                    case PlanetRole role:
                        <MentionSelectRoleComponent @key="@role.Id" Index="x" Parent="this" Role="@role" Selected="(x == Selected)" ></MentionSelectRoleComponent>
                        break;
                    case PlanetMember member:
                        <MentionSelectMemberComponent @key="member.Id" Index="x" Parent="this" Member="member" Selected="(x == Selected)" ></MentionSelectMemberComponent>
                        break;
                    case User user:
                        <MentionSelectUserComponent @key="user.Id" Index="x" Parent="this" User="user" Selected="(x == Selected)" ></MentionSelectUserComponent>
                        break;
                    case Channel channel:
                        <MentionSelectChannelComponent @key="channel.Id" Index="x" Parent="this" Channel="channel" Selected="(x == Selected)" ></MentionSelectChannelComponent>
                        break;
                }

                i++;
            }
        }
    </div>
}

@code {

    [CascadingParameter]
    public Channel Channel { get; set; }

    [CascadingParameter]
    public ChatChannelWindowComponent ChannelComponent { get; set; }

    [Parameter]
    public InputComponent InputComponent { get; set; }

    public bool Visible { get; set; }

    public string Text { get; set; }

    public int Selected { get; set; }

    public char Mode { get; set; }
    
    private class MentionMatch
    {
        public long Id { get; set; }
        public object Item { get; set; }
    }
    
    private List<MentionMatch> _matches;

    private Planet _planet;

    private List<Channel> _chatChannels;
    private List<PlanetMember> _members;
    private List<PlanetRole> _roles;
    private List<User> _users;

    protected override void OnInitialized()
    {
        _matches = new();
    }

    public async Task SetVisible(bool value, char mode = ' ')
    {
        Visible = value;

        if (value)
        {
            // On made visible, fetch all needed data
            if (Channel.PlanetId is not null)
            {
                _planet = await Channel.GetPlanetAsync();
                _members = await _planet.GetMembersAsync();
                _chatChannels = await _planet.GetChatChannelsAsync();
                _roles = await _planet.GetRolesAsync();
            }
            else
            {
                _users = await Channel.GetChannelMemberUsersAsync();
            }
            
            // Set mode
            this.Mode = mode;
        }

        StateHasChanged();
    }

    public async Task Submit()
    {
        var selected = _matches[Selected].Item;
        switch (selected)
        {
            case PlanetMember member:
            {
                var tag = $"«@m-{member.Id}» ";
                var text = "@" + await member.GetNameAsync();
                var classList = "mention";
                var styleList = $"color: {await member.GetRoleColorAsync()}";
                await InputComponent.InjectElementAsync(tag, text, classList, styleList);
                break;
            }
            case User user:
            {
                var tag = $"«@u-{user.Id}» ";
                var text = "@" + user.Name;
                var classList = "mention";
                var styleList = $"color: white";

                await InputComponent.InjectElementAsync(tag, text, classList, styleList);
                break;
            }
            case PlanetRole role:
            {
                var tag = $"«@r-{role.Id}» ";
                var text = "@" + role.Name;
                var classList = "mention";
                var styleList = $"color: {role.Color}";

                await InputComponent.InjectElementAsync(tag, text, classList, styleList);
                break;
            }
            case Channel channel:
            {
                var tag = $"«@c-{channel.Id}» ";
                var text = "#" + channel.Name;
                var classlist = "channel-mention";

                await InputComponent.InjectElementAsync(tag, text, classlist, "");
                break;
            }
        }

        await SetVisible(false);

        Selected = 0;
    }

    public async Task SetText(string newText)
    {
        Text = newText.TrimStart(Mode).ToLower();
        
        _matches.Clear();

        if (Mode == '@')
        {
            if (Channel.PlanetId is not null)
            {
                if (string.IsNullOrEmpty(Text))
                {
                    _matches.AddRange((await ChannelComponent.GetLastChatMembers(10))
                        .Select(x => new MentionMatch { Id = x.Id, Item = x }));
                }
                else
                {
                    // Get members which may match
                    var members = _members.Where(x => x.Nickname.ToLower().Contains(Text))
                                     .OrderByDescending(x => x.Nickname.ToLower().StartsWith(Text))
                                     .ThenBy(x => x.Nickname.Length)
                                     .Take(10)
                                     .Select(x => new MentionMatch(){ Id = x.Id, Item = x });
                    
                    _matches.AddRange(members);

                    var canMentionAll = false;
                    var selfMember = await PlanetMember.FindAsyncByUser(ValourClient.Self.Id, Channel.PlanetId.Value);
                    if (selfMember is not null)
                    {
                        if (await selfMember.HasPermissionAsync(PlanetPermissions.MentionAll))
                        {
                            canMentionAll = true;
                        }
                    }

                    var roleQuery = _roles.Where(x => x.Name.ToLower().Contains(Text));
                    if (!canMentionAll)
                        roleQuery = roleQuery.Where(x => x.AnyoneCanMention);
                    
                    var roles = 
                        roleQuery.OrderByDescending(x => x.Name.ToLower().StartsWith(Text))
                        .ThenBy(x => x.Name.Length)
                        .Take(5)
                        .Select(x => new MentionMatch() { Id = x.Id, Item = x });
                    
                    _matches.AddRange(roles);
                }
            }
            else
            {
                _matches.AddRange(_users.Where(x => x.Name.ToLower().Contains(Text))
                                                 .OrderByDescending(x => x.Name.ToLower().StartsWith(Text))
                                                 .ThenBy(x => x.Name.Length)
                                                 .Take(10)
                                                 .Select(x => new MentionMatch(){ Id = x.Id, Item = x}));
            }
        }
        else if (Mode == '#'){
            _matches.AddRange(_chatChannels.Where(x => x.Name.ToLower().Contains(Text))
                             .OrderByDescending(x => x.Name.ToLower().StartsWith(Text))
                             .ThenBy(x => x.Name.Length)
                             .Take(10)
                             .Select(x => new MentionMatch(){ Id = x.Id, Item = x }));
        }

        StateHasChanged();
    }

    public void MoveSelect(int n)
    {
        Selected += n;
        
        if (Selected > _matches.Count - 1)
        {
            Selected = 0;
        }
        else if (Selected < 0)
        {
            Selected = _matches.Count - 1;
        }
        
        StateHasChanged();
    }
}
