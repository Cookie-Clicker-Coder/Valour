@inject IJSRuntime JS

@if (Visible)
{
    <div class="mention-select">
        @{
            var i = 0;

            foreach (var match in Matches)
            {
                var x = i;
                switch (match.Item)
                {
                    case PlanetRole role:
                        <MentionSelectRoleComponent @key="@role.Id" Index="x" Parent="this" Role="@role" Selected="(x == Selected)" ></MentionSelectRoleComponent>
                        break;
                    case PlanetMember member:
                        <MentionSelectMemberComponent @key="member.Id" Index="x" Parent="this" Member="member" Selected="(x == Selected)" ></MentionSelectMemberComponent>
                        break;
                    case User user:
                        <MentionSelectUserComponent @key="user.Id" Index="x" Parent="this" User="user" Selected="(x == Selected)" ></MentionSelectUserComponent>
                        break;
                    case IChatChannel channel:
                        <MentionSelectChannelComponent @key="channel.Id" Index="x" Parent="this" Channel="channel" Selected="(x == Selected)" ></MentionSelectChannelComponent>
                        break;
                }

                i++;
            }
        }
    </div>
}

@code {

    [CascadingParameter]
    public IChatChannel Channel { get; set; }

    [CascadingParameter]
    public ChatChannelWindowComponent ChannelComponent { get; set; }

    [Parameter]
    public InputComponent InputComponent { get; set; }

    public bool Visible { get; set; }

    public string Text { get; set; }

    public int Selected { get; set; }

    public char Mode { get; set; }
    
    private class MentionMatch
    {
        public long Id { get; set; }
        public object Item { get; set; }
    }
    
    private List<MentionMatch> Matches;

    public PlanetChatChannel PlanetChannel { get; set; }

    public PlanetChatChannelWindowComponent PlanetChannelWindow { get; set; }

    public Planet Planet { get; set; }

    public List<IChatChannel> Channels;
    public List<PlanetMember> Members;
    public List<PlanetRole> Roles;
    public List<User> Users;

    protected override async Task OnInitializedAsync()
    {
        Matches = new();
    }

    public async Task SetVisible(bool value, char mode = ' ')
    {
        Visible = value;

        if (value)
        {
            // On made visible, fetch all needed data
            if (Channel is PlanetChatChannel)
            {
                PlanetChannel = Channel as PlanetChatChannel;
                PlanetChannelWindow = ChannelComponent as PlanetChatChannelWindowComponent;
                Planet = await ((PlanetChatChannel)Channel).GetPlanetAsync();
                Members = (await Planet.GetMembersAsync()).DistinctBy(x => x.Id).ToList();
                Channels = (await Planet.GetChannelsAsync())
                    .Cast<IChatChannel>().ToList();
                Roles = await Planet.GetRolesAsync();
            }
            else if (Channel is DirectChatChannel)
            {
                var channel = Channel as DirectChatChannel;
                Users = new();
                var userOne = await User.FindAsync(channel.UserOneId);
                var userTwo = await User.FindAsync(channel.UserTwoId);

                Users.Add(userOne);
                Users.Add(userTwo);
            }
            
            // Set mode
            this.Mode = mode;
        }

        StateHasChanged();
    }

    public async Task Submit()
    {
        var selected = Matches[Selected].Item;
        switch (selected)
        {
            case PlanetMember member:
            {
                var tag = $"«@m-{member.Id}» ";
                var text = "@" + await member.GetNameAsync();
                var classList = "mention";
                var styleList = $"color: {await member.GetRoleColorAsync()}";
                await InputComponent.InjectElementAsync(tag, text, classList, styleList);
                break;
            }
            case User user:
            {
                var tag = $"«@u-{user.Id}» ";
                var text = "@" + user.Name;
                var classList = "mention";
                var styleList = $"color: white";

                await InputComponent.InjectElementAsync(tag, text, classList, styleList);
                break;
            }
            case PlanetRole role:
            {
                var tag = $"«@r-{role.Id}» ";
                var text = "@" + role.Name;
                var classList = "mention";
                var styleList = $"color: {role.Color}";

                await InputComponent.InjectElementAsync(tag, text, classList, styleList);
                break;
            }
            case IChatChannel channel:
            {
                var tag = $"«#c-{channel.Id}» ";
                var text = "#" + channel.Name;
                var classlist = "channel-mention";

                await InputComponent.InjectElementAsync(tag, text, classlist, "");
                break;
            }
        }

        await SetVisible(false);

        Selected = 0;
    }

    public async Task SetText(string new_text)
    {
        Text = new_text.TrimStart(Mode).ToLower();
        
        Matches.Clear();

        if (Mode == '@')
        {
            if (Channel is PlanetChatChannel)
            {
                if (string.IsNullOrEmpty(Text))
                {
                    Matches.AddRange((await PlanetChannelWindow.GetLastChatters(10))
                        .Select(x => new MentionMatch { Id = x.Id, Item = x }));
                }
                else
                {
                    // Get members which may match
                    var members = Members.Where(x => x.Nickname.ToLower().Contains(Text))
                                     .OrderByDescending(x => x.Nickname.ToLower().StartsWith(Text))
                                     .ThenBy(x => x.Nickname.Length)
                                     .Take(10)
                                     .Select(x => new MentionMatch(){ Id = x.Id, Item = x });
                    
                    Matches.AddRange(members);

                    var roles = Roles.Where(x => x.Name.ToLower().Contains(Text))
                        .OrderByDescending(x => x.Name.ToLower().StartsWith(Text))
                        .ThenBy(x => x.Name.Length)
                        .Take(5)
                        .Select(x => new MentionMatch() { Id = x.Id, Item = x });
                    
                    Matches.AddRange(roles);
                }
            }
            else
            {
                Matches.AddRange(Users.Where(x => x.Name.ToLower().Contains(Text))
                                                 .OrderByDescending(x => x.Name.ToLower().StartsWith(Text))
                                                 .ThenBy(x => x.Name.Length)
                                                 .Take(10)
                                                 .Select(x => new MentionMatch(){ Id = x.Id, Item = x}));
            }
        }
        else if (Mode == '#'){
            Matches.AddRange(Channels.Where(x => x.Name.ToLower().Contains(Text))
                             .OrderByDescending(x => x.Name.ToLower().StartsWith(Text))
                             .ThenBy(x => x.Name.Length)
                             .Take(10)
                             .Select(x => new MentionMatch(){ Id = x.Id, Item = x }));
        }

        StateHasChanged();
    }

    public void MoveSelect(int n)
    {
        Selected += n;
        
        if (Selected > Matches.Count - 1)
        {
            Selected = 0;
        }
        else if (Selected < 0)
        {
            Selected = Matches.Count - 1;
        }
        
        StateHasChanged();
    }
}
