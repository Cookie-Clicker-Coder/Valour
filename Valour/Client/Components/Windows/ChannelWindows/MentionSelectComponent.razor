@inject IJSRuntime JS

@if (Visible)
{
    <div class="mention-select">
        @if (Mode == '@'){

            int i = 0; 

            foreach (var member in MemberMatches)
            {
                var x = i;

                <MentionSelectMemberComponent @key="member.Id" Index="x" Parent="this" Member="member" Selected="(x == Selected)" ></MentionSelectMemberComponent>
                i++;
            }

            i = 0;

            foreach (var user in UserMatches)
            {
                var x = i;

                <MentionSelectUserComponent @key="user.Id" Index="x" Parent="this" User="user" Selected="(x == Selected)" ></MentionSelectUserComponent>
                i++;
            }
        }
        else if (Mode == '#'){
            int i = 0; 

            foreach (var channel in ChannelMatches)
            {
                var x = i;

                <MentionSelectChannelComponent @key="channel.Id" Index="x" Parent="this" Channel="channel" Selected="(x == Selected)" ></MentionSelectChannelComponent>
                i++;
            }
        }
    </div>
}

@code {

    public bool Visible { get; set; }

    public string Text { get; set; }

    public int Selected { get; set; }

    public char Mode { get; set; }

    public List<IChatChannel> ChannelMatches;

    public List<PlanetMember> MemberMatches;

    public List<User> UserMatches;

    [CascadingParameter]
    public IChatChannel Channel { get; set; }

    [CascadingParameter]
    public ChatChannelWindowComponent ChannelComponent { get; set; }

    public Planet Planet { get; set; }

    public List<IChatChannel> Channels;

    public List<PlanetMember> Members;

    public List<User> Users;

    protected override async Task OnInitializedAsync()
    {
        UserMatches = new();
        MemberMatches = new();
        ChannelMatches = new();

        if (Channel is PlanetChatChannel)
        {
            Planet = await ((PlanetChatChannel)Channel).GetPlanetAsync();
            Members = await Planet.GetMembersAsync();
            Channels = (await Planet.GetChannelsAsync())
                .Cast<IChatChannel>().ToList();
        }
        else if (Channel is DirectChatChannel)
        {
            var channel = Channel as DirectChatChannel;
            Users = new();
            var userOne = await User.FindAsync(channel.UserOneId);
            var userTwo = await User.FindAsync(channel.UserTwoId);

            Users.Add(userOne);
            Users.Add(userTwo);
        }
    }

    public void SetVisible(bool value, char mode = ' ')
    {
        Visible = value;

        if (value)
            this.Mode = mode;

        StateHasChanged();
    }

    public async Task Submit()
    {
        if (Mode == '@')
        {
            if (Channel is PlanetChatChannel)
            {
                var selected = MemberMatches[Selected];

                string tag = $"«@m-{selected.Id}» ";

                string text = "@" + await selected.GetNameAsync();
                string classlist = "mention";
                string stylelist = $"color: {await selected.GetRoleColorAsync()}";

                await JS.InvokeVoidAsync("InjectElement", tag, text, classlist, stylelist, ChannelComponent.Window.Id, true);
            }
            else
            {
                var selected = UserMatches[Selected];

                string tag = $"«@u-{selected.Id}» ";

                string text = "@" + selected.Name;
                string classlist = "mention";
                string stylelist = $"color: white";

                await JS.InvokeVoidAsync("InjectElement", tag, text, classlist, stylelist, ChannelComponent.Window.Id, true);
            }
        }

        else if (Mode == '#')
        {
            var selected = ChannelMatches[Selected];

            string tag = $"«#c-{selected.Id}» ";

            string text = "#" + selected.Name;
            string classlist = "channel-mention";

            await JS.InvokeVoidAsync("InjectElement", tag, text, classlist, "", ChannelComponent.Window.Id, true);
        }

        SetVisible(false);

        Selected = 0;
    }

    public async Task SetText(string new_text)
    {
        Text = new_text.TrimStart(Mode).ToLower();

        if (Mode == '@')
        {
            if (Channel is PlanetChatChannel)
            {
                // Get members which may match
                MemberMatches = Members.Where(x => x.Nickname.ToLower().Contains(Text))
                                 .OrderByDescending(x => x.Nickname.ToLower().StartsWith(Text))
                                 .ThenBy(x => x.Nickname.Length)
                                 .Take(10)
                                 .ToList();
            }
            else
            {
                UserMatches = Users.Where(x => x.Name.ToLower().Contains(Text))
                                                 .OrderByDescending(x => x.Name.ToLower().StartsWith(Text))
                                                 .ThenBy(x => x.Name.Length)
                                                 .Take(10)
                                                 .ToList();
            }
        }
        else if (Mode == '#'){
            ChannelMatches = Channels.Where(x => x.Name.ToLower().Contains(Text))
                             .OrderByDescending(x => x.Name.ToLower().StartsWith(Text))
                             .ThenBy(x => x.Name.Length)
                             .Take(10)
                             .ToList();
        }

        StateHasChanged();
    }

    public void MoveSelect(int n)
    {
        Selected += n;

        if (Mode == '@'){
            if (Channel is PlanetChatChannel){
                if (Selected > MemberMatches.Count - 1)
                {
                    Selected = 0;
                }
                else if (Selected < 0)
                {
                    Selected = MemberMatches.Count - 1;
                }
            }
            else
            {
                if (Selected > UserMatches.Count - 1)
                {
                    Selected = 0;
                }
                else if (Selected < 0)
                {
                    Selected = UserMatches.Count - 1;
                }
            }
        }
        else if (Mode == '#'){
            if (Selected > ChannelMatches.Count - 1)
            {
                Selected = 0;
            }
            else if (Selected < 0)
            {
                Selected = ChannelMatches.Count - 1;
            }
        }

        StateHasChanged();
    }
}
