@inject IJSRuntime JsRuntime
@implements IAsyncDisposable
@using Valour.Api.Models.Messages
@using System.Reflection.Metadata
@using Microsoft.AspNetCore.Components.Rendering

<ContextMenuTrigger @key="@_id" Id="@_id" CssClass="chat-holder mt-auto"  MouseButtonTrigger="MouseButtonTrigger.ContextOrHold" @onpointerdown:stopPropagation="true" MenuId="message-context">
    <CascadingValue Value="this" IsFixed="true">
        @MessagesTemplate
    </CascadingValue>
    
    <div id="anchor" style="overflow-anchor: auto; height: 1px; margin-top: -1px;"></div>
</ContextMenuTrigger>

@code {

    /*
     *
     * switch (messageData.Message) {
            case PlanetMessage:
                <PlanetMessageComponent MessageData="@messageData" IsInnerReply="@false" LastMessage="@last"  />
                break;
            case DirectMessage: 
                <DirectMessageComponent MessageData="@messageData" IsInnerReply="@false" LastMessage="@last" />
                break;
            default:
                <MessageComponent MessageData="@messageData" IsInnerReply="@false" LastMessage="@last" />
                break;
        }
     */
    
    public class MessageComponentParams
    {
        public ClientMessageWrapper MessageData { get; set; }
        public bool IsInnerReply { get; set; }
        public ClientMessageWrapper LastMessage { get; set; }
        public bool Ghost { get; set; }
    }

    [CascadingParameter]
    public ChatChannelWindow Window { get; set; }

    [Parameter]
    public List<ClientMessageWrapper> DisplayedMessageData { get; set; }

    public List<ClientMessageWrapper> QueuedMessageData { get; set; }

    public List<MessageComponent> RenderedMessages { get; set; }

    private DotNetObjectReference<MessageHolderComponent> _thisRef;

    private IJSInProcessObjectReference _jsModule;

    private string _id;

    private bool _canRenderFlag = false;
    
    public Type MessageType;

    public void TypedMessagesTemplate<T>(RenderTreeBuilder builder) where T : MessageComponent
    {
        ClientMessageWrapper lastMessage = null;
        
        // Displayed messages
        if (!(DisplayedMessageData == null || !DisplayedMessageData.Any()))
        {
            // Render each message
            foreach (var messageData in DisplayedMessageData)
            {
                var messageParams = new MessageComponentParams()
                {
                    MessageData = messageData,
                    IsInnerReply = false,
                    LastMessage = lastMessage,
                    Ghost = false,
                };

                builder.OpenComponent<T>(0);
                builder.AddAttribute(1, "ParamData", messageParams);
                builder.SetKey(messageData.Message.Id);
                builder.CloseComponent();

                lastMessage = messageData;
            }
        }
        
        // Queued messages
        if (!(QueuedMessageData == null || !QueuedMessageData.Any()))
        {
            // Render each message
            foreach (var messageData in QueuedMessageData)
            {
                var messageParams = new MessageComponentParams()
                {
                    MessageData = messageData,
                    IsInnerReply = false,
                    LastMessage = lastMessage,
                    Ghost = true,
                };

                builder.OpenComponent<T>(0);
                builder.AddAttribute(1, "MessageParams", messageParams);
                builder.SetKey(messageData.Message.Id);
                builder.CloseComponent();

                lastMessage = messageData;
            }
        }
    }


    public RenderFragment MessagesTemplate;

    protected override void OnInitialized()
    {
        
         // Using generics instead of reflection gives better performance,
         // and we only have to set the render template once
        switch (Window)
        {
            case PlanetChatChannelWindow:
                MessagesTemplate = TypedMessagesTemplate<PlanetMessageComponent>;
                break;
            case DirectChatChannelWindow:
                MessagesTemplate = TypedMessagesTemplate<DirectMessageComponent>;
                break;
            default:
                MessagesTemplate = TypedMessagesTemplate<MessageComponent>;
                break;
        }
        
        _id = $"innerWindow-{Window.Id}";
        
        RenderedMessages = new List<MessageComponent>();
        DisplayedMessageData = new List<ClientMessageWrapper>();
        QueuedMessageData = new List<ClientMessageWrapper>();

        ValourClient.OnMessageDeleted += OnDeleteMessage;

        _thisRef = DotNetObjectReference.Create(this);
    }

    public void AddQueuedMessage(ClientMessageWrapper message)
    {
        QueuedMessageData.Add(message);
        Refresh();
    }

    public void RemoveQueuedMessage(string fingerprint)
    {
        var queued = QueuedMessageData.FirstOrDefault(x => x.Message.Fingerprint == fingerprint);
        if (queued != null) { QueuedMessageData.Remove(queued); }

        Refresh();
    }

    public void RemoveErrorMessage()
    {
        var error = DisplayedMessageData.FirstOrDefault(x => x.Message.Id == 0);
        if (error != null) { 
            QueuedMessageData.Remove(error); 
            Refresh();
        }
    }

    public void Clear()
    {
        DisplayedMessageData.Clear();
        QueuedMessageData.Clear();
        RenderedMessages.Clear();
        
        Refresh();
    }

    public ClientMessageWrapper GetLastMessage()
    {
        if (QueuedMessageData != null && QueuedMessageData.Any())
        {
            return QueuedMessageData.Last();
        }
        else if (DisplayedMessageData != null && DisplayedMessageData.Any())
        {
            return DisplayedMessageData.Last();
        }

        return null;
    }

    public async Task AddMessages(List<ClientMessageWrapper> messages, bool refresh = true, bool scroll = false)
    {
        DisplayedMessageData.AddRange(messages);

        if (refresh)
        {
            Refresh();
        }
        
        if (scroll)
        {
            await ScrollToBottom();
        }
    }

    public void InsertMessages(int position, List<ClientMessageWrapper> messages, bool refresh = true)
    {
        DisplayedMessageData.InsertRange(position, messages);

        if (refresh)
        {
            Refresh();
        }
    }

    public async Task AddMessage(ClientMessageWrapper renderData, bool refresh = true)
    {
        QueuedMessageData.RemoveAll(x => x.Message.Fingerprint == renderData.Message.Fingerprint);

        //Get current window scroll pos
        var atBottom = await _jsModule.InvokeAsync<bool>("isAtBottom", _id);

        // check if theres too many messages
        if (atBottom && DisplayedMessageData.Count > 120)
        {
            DisplayedMessageData.RemoveRange(0, DisplayedMessageData.Count - 120);
        }

        DisplayedMessageData.Add(renderData);

        // Flag for UI refresh
        if (refresh)
        {
            Refresh();
        }

        await ScrollToBottom();
    }

    public void Refresh()
    {
        _canRenderFlag = true;
        StateHasChanged();
    }

    /* This is called by the MessageComponent when it is rendered */
    public void AddRenderedMessage(MessageComponent message)
    {
        RenderedMessages.Add(message);
    }

    /* This is called by the MessageComponent when it is rendered */
    public void RemoveRenderedMessage(MessageComponent message)
    {
        RenderedMessages.Remove(message);
    }

    //protected override async Task OnParametersSetAsync()
    //{

    //}

    async ValueTask IAsyncDisposable.DisposeAsync()
    {
        ValourClient.OnMessageDeleted -= OnDeleteMessage;
        await _jsModule.DisposeAsync();
    }

    public async Task OnDeleteMessage(PlanetMessage message)
    {
        if (message.ChannelId != Window.Channel.Id)
            return;

        DisplayedMessageData.RemoveAll(x => x.Message.Id == message.Id);
        QueuedMessageData.RemoveAll(x => x.Message.Id == message.Id);

        var nextMessage = RenderedMessages.FirstOrDefault(x => x.MessageData.Message.Id > message.Id);
        if (nextMessage != null){
            var lastMessage = RenderedMessages
                .OrderByDescending(x => x.MessageData.Message.Id)
                .FirstOrDefault(x => x.MessageData.Message.Id < message.Id);
            
            if (lastMessage is not null)
                nextMessage.SetLast(lastMessage.MessageData);
            
            await nextMessage.RefreshMessage();
            nextMessage.ReRender();
        }

        Refresh();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            _jsModule = await JsRuntime.InvokeAsync<IJSInProcessObjectReference>("import", "./_content/Valour.Client/Components/Windows/ChannelWindows/MessageHolderComponent.razor.js");
            await SetupJs();
            await ScrollToBottom();
        }
        
        #if DEBUG
        Console.WriteLine($"Message holder render! ({firstRender})");
        #endif

        _canRenderFlag = false;
    }

    protected override bool ShouldRender() => _canRenderFlag;

    /////////////////////
    // JS Interop Zone //
    /////////////////////

    public async Task SetupJs()
    {
        await _jsModule.InvokeVoidAsync("setup", _id, _thisRef);
    }

    public async Task ScrollToBottom(bool force = false)
    {
        if (_jsModule is not null)
            await _jsModule.InvokeVoidAsync("scrollToBottom", _id, force);
    }

    public async Task ScrollToBottomAnimated()
    {
        await _jsModule.InvokeVoidAsync("scrollToBottomAnimated", _id);
    }

    public async Task UpdateScrollPosition()
    {
        await _jsModule.InvokeVoidAsync("updateScrollPosition", _id);
    }

    public async Task ScaleScrollPosition()
    {
        await _jsModule.InvokeVoidAsync("scaleScrollPosition", _id);
    }

    [JSInvokable("OnScrollTopInvoke")]
    public async Task OnScrollTop()
    {
        if (DisplayedMessageData == null ||
            DisplayedMessageData.Count == 0)
        {
            return;
        }

        var firstId = DisplayedMessageData[0].Message.Id;

        Console.WriteLine($"Fetching older messages from id {firstId} for window {Window.Id}");

        var messages = await Window.Channel.GetMessagesGenericAsync(firstId, 64);

        if (messages is null || !messages.Any())
            return;

        foreach (var msg in messages)
        {
            await msg.AddToCache(msg);
            var reply = msg.GetReply();
            if (reply is not null)
            {
                await reply.AddToCache(reply);
            }
        }

        await UpdateScrollPosition(); // This saves the scroll position

        InsertMessages(0, ClientMessageWrapper.FromList(messages));

        await ScaleScrollPosition(); // This ensures the page doesnt move harshly
    }
}