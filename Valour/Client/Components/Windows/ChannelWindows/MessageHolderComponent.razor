@inject IJSRuntime JS
@implements IDisposable
@using Valour.Api.Items.Messages

<div @key='"holder-" + Window.Id' id="innerwindow-@Window.Id" class="chat-holder mt-auto" style="overflow-y: scroll;" onscroll="OnScrollChannel('@Window.Id')">
    <CascadingValue Value="this">
        @{
            ClientMessageWrapper last;    

            if (DisplayedMessageData != null && DisplayedMessageData.Count > 0)
            {
                last = null;

                foreach (ClientMessageWrapper messageData in DisplayedMessageData)
                {
                    Dictionary<string, object> messageParams = new()
                    {
                        { "MessageData", messageData },
                        { "IsInnerReply", false },
                        { "LastMessage", last },
                    };

                    <DynamicComponent Type="@messageData.GetComponentType()" Parameters="messageParams" @key='messageData'></DynamicComponent>

                    last = messageData;
                }
            }

            if (QueuedMessageData != null && QueuedMessageData.Count > 0){

                last = null;

                if (DisplayedMessageData != null)
                {
                    last = DisplayedMessageData.Last();
                }

                foreach (ClientMessageWrapper messageData in QueuedMessageData)
                {
                    Dictionary<string, object> messageParams = new()
                    {
                        { "MessageData", messageData },
                        { "IsInnerReply", false },
                        { "LastMessage", last },
                        { "Ghost", true }
                    };

                    <DynamicComponent Type="@messageData.GetComponentType()" Parameters="messageParams" @key='messageData'></DynamicComponent>

                    last = messageData;
                }
            }
        }
    </CascadingValue>
</div>

@code {
    [CascadingParameter]
    public ChatChannelWindow Window { get; set; }

    [Parameter]
    public List<ClientMessageWrapper> DisplayedMessageData { get; set; }

    public List<ClientMessageWrapper> QueuedMessageData { get; set; }

    public List<MessageComponent> RenderedMessages { get; set; }

    public string state = "none";

    //public HashSet<string> Keys = new HashSet<string>();

    public void AddQueuedMessage(ClientMessageWrapper message)
    {
        QueuedMessageData.Add(message);
        StateHasChanged();
    }

    public void RemoveQueuedMessage(string fingerprint)
    {
        var queued = QueuedMessageData.FirstOrDefault(x => x.Message.Fingerprint == fingerprint);
        if (queued != null) { QueuedMessageData.Remove(queued); }

        StateHasChanged();
    }

    public void RemoveErrorMessage()
    {
        var error = DisplayedMessageData.FirstOrDefault(x => x.Message.MessageIndex == long.MaxValue);
        if (error != null) { 
            QueuedMessageData.Remove(error); 
            StateHasChanged();
        }
    }

    public void Clear()
    {
        DisplayedMessageData.Clear();
    }

    public ClientMessageWrapper GetLastMessage()
    {
        if (QueuedMessageData != null && QueuedMessageData.Count > 0){
            return QueuedMessageData.Last();
        }
        else if (DisplayedMessageData != null && DisplayedMessageData.Count > 0)
        {
            return DisplayedMessageData.Last();
        }

        return null;
    }

    public void AddMessages(List<ClientMessageWrapper> messages, bool refresh = true)
    {
        DisplayedMessageData.AddRange(messages);

        if (refresh)
        {
            StateHasChanged();
        }
    }

    public void InsertMessages(int position, List<ClientMessageWrapper> messages, bool refresh = true)
    {
        //foreach(var m in messages)
        //{
        //    Console.WriteLine(m.Content);
        //}

        DisplayedMessageData.InsertRange(position, messages);

        if (refresh)
        {
            StateHasChanged();
        }
    }

    public async Task AddMessage(ClientMessageWrapper renderData, bool refresh = true)
    {
        QueuedMessageData.RemoveAll(x => x.Message.Fingerprint == renderData.Message.Fingerprint);

        //Get current window scroll pos
        bool IsAtBottom = await JS.InvokeAsync<bool>("IsAtBottom", Window.Id);

        // check if theres too many messages
        if (IsAtBottom && DisplayedMessageData.Count > 120)
        {
            DisplayedMessageData.RemoveRange(0, DisplayedMessageData.Count - 120);
        }

        DisplayedMessageData.Add(renderData);

        // Flag for UI refresh
        if (refresh)
        {
            StateHasChanged();
        }

        await Window.Component.ScrollToBottom();
    }

    public void ForceRefresh()
    {
        state = "force-ref";
        StateHasChanged();
    }

    public void AddRenderedMessage(MessageComponent message)
    {
        RenderedMessages.Add(message);
    }

    public void RemoveRenderedMessage(MessageComponent message)
    {
        RenderedMessages.Remove(message);
    }

    //protected override async Task OnParametersSetAsync()
    //{

    //}

    protected override void OnInitialized()
    {
        RenderedMessages = new List<MessageComponent>();
        DisplayedMessageData = new List<ClientMessageWrapper>();
        QueuedMessageData = new List<ClientMessageWrapper>();

        ValourClient.OnMessageDeleted += OnDeleteMessage;

        StateHasChanged();
    }

    void IDisposable.Dispose()
    {
        ValourClient.OnMessageDeleted -= OnDeleteMessage;
    }

    public async Task OnDeleteMessage(PlanetMessage message)
    {
        if (message.ChannelId != Window.Channel.Id)
            return;

        DisplayedMessageData.RemoveAll(x => x.Message.Id == message.Id);
        QueuedMessageData.RemoveAll(x => x.Message.Id == message.Id);

        var nextMessage = RenderedMessages.Where(x => x.MessageData.Message.MessageIndex > message.MessageIndex).FirstOrDefault();
        if (nextMessage != null){
            var lastMessage = RenderedMessages.OrderByDescending(x => x.MessageData.Message.MessageIndex)
                                              .Where(x => x.MessageData.Message.MessageIndex < message.MessageIndex)
                                              .FirstOrDefault();
            nextMessage.SetLast(lastMessage.MessageData);
            await nextMessage.RefreshMessage();
            nextMessage.ReRender();
        }

        ForceRefresh();
    }

    

    protected override void OnAfterRender(bool firstRender)
    {
        // Console.WriteLine("Rendered messages");
        state = GetState();
    }

    public string GetState()
    {
        if (DisplayedMessageData == null || DisplayedMessageData.Count == 0)
        {
            return "none";
        }
        else
        {
            return $"{DisplayedMessageData.First().Message.MessageIndex}-{DisplayedMessageData.Last().Message.MessageIndex}-{QueuedMessageData.Count}";
        }
    }

    protected override bool ShouldRender()
    {
        return GetState() != state;
    }
}