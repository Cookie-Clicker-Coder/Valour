@inherits InputComponent
@inject WindowManager windowManager

@{
    // Renders the base component
    base.BuildRenderTree(__builder);
}

@code {
    private PlanetMember SelfMember { get; set; }
    private PlanetChatChannel PlanetChannel { get; set; }

    protected override string PlaceholderText =>
        $"Discuss in {PlanetChannel.Name}";

    public override async Task SetupNewChannelAsync()
    {
        WindowComponent.InputComponent = this;
        MessageHolder = WindowComponent.MessageHolder;

        PlanetChannel = (PlanetChatChannel)MessageHolder.Window.Channel;
        SelfMember = await PlanetMember.FindAsyncByUser(ValourClient.Self.Id, PlanetChannel.PlanetId);

        PreviewMessage = new(BuildNewMessage());
        
        CanUserPost = await PlanetChannel.HasPermissionAsync(SelfMember, ChatChannelPermissions.PostMessages);

        Refresh();
    }

    public override Message BuildNewMessage()
    {
        windowManager.NotYetSentMessages.TryGetValue(PlanetChannel.Id, out var prevcontent);
        return new PlanetMessage()
        {
            AuthorUserId = ValourClient.Self.Id,
            Content = prevcontent,
            ChannelId = Window.Channel.Id,
            AuthorMemberId = SelfMember.Id,
            TimeSent = DateTime.UtcNow,
            ReplyToId = null,
            PlanetId = SelfMember.PlanetId,
            Fingerprint = Guid.NewGuid().ToString()
        };
    }

    public override async Task OnAfterJsSetupAsync()
    {
        if (PreviewMessage.Message.Content is not null)
        {
            await SetInputContent(PreviewMessage.Message.Content);
            await RefreshPreviewMessage();
        }
        else {
            await SetInputContent("");
            await RefreshPreviewMessage();
        }
    }

}