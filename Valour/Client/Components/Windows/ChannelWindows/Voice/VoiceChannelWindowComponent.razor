@inject WindowManager windowManager

<CascadingValue Value="Channel">
    <CascadingValue Value="Window">
        <CascadingValue Value='this'>
            <WindowFrameComponent Window="@Window" Title="@Title" Description="@Description">
                @* Actual window *@
                <div class="peer-container">
                    @foreach (var peer in VisiblePeers)
                    {
                        <MediaPeerComponent @key='@($"peer-{peer.PeerId}-{peer.MediaTag}")' Parent="this" Peer="peer"></MediaPeerComponent>
                    }
                </div>
            </WindowFrameComponent>
        </CascadingValue>
    </CascadingValue>
</CascadingValue>

@code {

    public List<VisiblePeer> VisiblePeers { get; set; }

    [Parameter]
    public VoiceChannelWindow Window { get; set; }

    [CascadingParameter]
    public IModalService Modal { get; set; }

    protected IVoiceChannel Channel;

    public bool CanRenderFlag { get; set; }

    public string Title { get; set; }

    public string Description { get; set; }

    public event Func<IVoiceChannel, Task> OnChannelChange;

    public PermissionsNode ChannelPermissions { get; set; }

    public MediaSoupWrapper MediaSoup { get; set; } = MediaSoupWrapper.Instance;

    public virtual Task<string> GetChannelDisplayTitleAsync() =>
        Task.FromResult(Channel.Name);

    public virtual Task<string> GetChannelDisplayDescriptionAsync() =>
        Task.FromResult(Channel.Description);

    protected override async Task OnInitializedAsync()
    {
        MediaSoup.SetActiveWindow(this);

        VisiblePeers = new List<VisiblePeer>();

        Window.SetComponent(this);

        Console.WriteLine("Initializing voice window component.");

        Channel = Window.Channel;

        // TODO: Eventually move this stuff to the API

        await MediaSoup.SendCameraStreams();
    }

    protected override bool ShouldRender()
        => CanRenderFlag;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await base.OnAfterRenderAsync(firstRender);
        CanRenderFlag = false;
    }

    public async Task OnVoiceChannelUpdate(ModelUpdateEvent eventData)
    {
        Refresh();
    }

    public void Refresh()
    {
        CanRenderFlag = true;
        StateHasChanged();
    }

    public async virtual Task SetupNewChannelAsync()
    {
        Title = await GetChannelDisplayTitleAsync();
        Description = await GetChannelDisplayDescriptionAsync();

        Refresh();
    }

    public async Task SwapChannel(IVoiceChannel newchannel)
    {
        Channel = newchannel;

        await windowManager.SwapVoiceWindowChannel(Window, newchannel);

        await SetupNewChannelAsync();

        if (OnChannelChange is not null)
            await OnChannelChange.Invoke(Channel);

        Refresh();
    }

    public async Task OnWindowClosed()
    {
        Console.WriteLine($"Gracefully exiting channel {Channel.Id} due to window change.");
        await MediaSoup.LeaveRoom();
        await Channel.Close();
    }

    public async Task CloseWindow()
    {
        await MediaSoup.LeaveRoom();
        await windowManager.CloseWindow(Window);
    }

    public async Task ReturnHome()
    {
        HomeWindow newWindow = new HomeWindow();
        await windowManager.ReplaceWindow(Window, newWindow);
        await windowManager.SetFocusedPlanet(null);
    }

    public virtual Task OnClickWindow()
        => Task.CompletedTask;

    /// <summary>
    /// Called by a child media peer component to begin the hook process
    /// for the content stream
    /// </summary>
    public async Task NotifyPeerElementReady(VisiblePeer peer)
    {
        await MediaSoup.HookPeerElementMediaTrack(peer.ElementId, peer.PeerId, peer.MediaTag);
    }

    /* Fun part - events from MediaSoup integration */
    public async Task OnSpeakerUpdate(ActiveSpeaker speaker)
    {

    }

    public async Task OnPeerListUpdate(Dictionary<string, MediaPeer> peers)
    {

    }

    public async Task OnReadyBuildPeer(string peerId, string mediaTag, string kind)
    {
        if (!VisiblePeers.Any(x => x.PeerId == peerId && x.MediaTag == mediaTag))
        {
            VisiblePeers.Add(new()
            {
                PeerId = peerId,
                MediaTag = mediaTag,
                Kind = kind
            });

            Refresh();
        }
    }

    public async Task DisposePeer(string peerId, string mediaTag)
    {
        VisiblePeers.RemoveAll(x => x.PeerId == peerId && x.MediaTag == mediaTag);
        Refresh();
    }
}
