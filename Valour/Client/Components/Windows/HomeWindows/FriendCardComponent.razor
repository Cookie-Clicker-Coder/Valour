@inject WindowManager windowManager
@inject IJSRuntime JS
@implements IDisposable

<div id="flipper-friend-@Friend.Id-@Window.Id" class="flipper" ontouchstart="determineFlip('flipper-friend-@Friend.Id-@Window.Id', 240)" onmouseover="determineFlip('flipper-friend-@Friend.Id-@Window.Id', 240)" @onclick="OnClick"> 
    <ContextMenuTrigger style="display: inline-block;" MouseButtonTrigger="MouseButtonTrigger.ContextOrHold" MenuId='user-context' @onpointerdown='async () => await UserContextMenuComponent.Initialize(Friend)'>
        <div class="outer-circle">
            <div class="text-hide-circle" />
            <img src='@iconUrl' class="icon" @onerror='OnIconError' style='@image_style'/>
            @if (IsUnread)
            {
                <div class="noti">
                </div>
            }
            <div class="rect-slide">
                <div class="text-wrapper">
                    <div class="text-flex">
                        <b class="friend-name">@Friend.Name</b>
                    </div>
                </div>
            </div>
        </div>
    </ContextMenuTrigger>
</div>

@code {
    [Parameter]
    public User Friend { get; set; }

    [Parameter]
    public HomeWindow Window { get; set; }

    [Parameter]
    public HomeWindowComponent HomeWindowComponent { get; set; }

    public string iconUrl = "_content/Valour.Client/media/logo/logo-256.png";

    public string image_style = "";
    public bool IsUnread = false;

    protected override async Task OnInitializedAsync(){
        if (!string.IsNullOrWhiteSpace(Friend.PfpUrl))
        {
            iconUrl = Friend.PfpUrl;
        }

        HomeWindowComponent.RerenderFriendCards += Refresh;
    }

    public async Task Refresh()
    {
        // We use the client list because we do *not* want to send off an API request for every single
        // person you do not have a conversation with - the list is loaded at startup
        
        var channel = ValourClient.DirectChatChannels.FirstOrDefault(x => x.UserOneId == Friend.Id || 
                                                                          x.UserTwoId == Friend.Id);

        if (channel is null)
        {
            IsUnread = false;
        }
        else
        {
            IsUnread = ValourClient.GetChannelUnreadState(channel.Id);
        }
        
        StateHasChanged();
    }

    public void Dispose()
    {
        HomeWindowComponent.RerenderFriendCards -= Refresh;
    }
    

    public async Task OnClick()
    {
        // Get dm channel (and create it if it does not exist)
        // this can probably be optimized to only create the channel if the first message
        // is being sent, but this is fine for now
        var channel = await DirectChatChannel.FindAsyncByUser(Friend.Id, create: true);
        var newWindow = new DirectChatChannelWindow(channel);

        Console.WriteLine($"Switching window {Window.Id} to direct chat channel {channel.Id}");

        await windowManager.ReplaceWindow(Window, newWindow);
        await windowManager.SetSelectedWindow(newWindow);
        await windowManager.SetFocusedPlanet(null);

        StateHasChanged();
    }

    protected void OnIconError()
    {
        iconUrl = "_content/Valour.Client/media/logo/logo-256.png";

        int r = Random.Shared.Next(24) * 15;

        image_style = $"filter: hue-rotate({r}deg)";

        StateHasChanged();
    }
}