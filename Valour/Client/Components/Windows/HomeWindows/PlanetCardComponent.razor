@inject WindowManager windowManager
@inject IJSRuntime JS

<div id="flipper-planet-@Planet.Id-@Window.Id" class="flipper" ontouchstart="determineFlip('flipper-planet-@Planet.Id-@Window.Id', 240)" onmouseover="determineFlip('flipper-planet-@Planet.Id-@Window.Id', 240)" @onclick="OnClick"> 
    <ContextMenuTrigger style="display: inline-block;" MouseButtonTrigger="MouseButtonTrigger.ContextOrHold" MenuId='planet-context' @onpointerdown='async () => await PlanetContextMenuComponent.SetSelectedPlanet(Planet)'>
        
        <div class="outer-circle">
            <div class="text-hide-circle" />
            <img src='@iconUrl' class="icon" @onerror='OnIconError' style='@image_style'/>
            @if (IsUnread)
            {
                <div class="noti">
                </div>
            }
            <div class="rect-slide">
                <div class="text-wrapper">
                    <div class="text-flex">
                        <b class="planet-name">@Planet.Name</b>
                    </div>
                </div>
            </div>
        </div>
    </ContextMenuTrigger>
</div>

@code {
    [Parameter]
    public Planet Planet { get; set; }

    [Parameter]
    public HomeWindow Window { get; set; }
    
    [Parameter]
    public HomeWindowComponent HomeWindowComponent { get; set; }

    private string iconUrl = "_content/Valour.Client/media/logo/logo-256.png";

    private string image_style = "";

    private bool IsUnread = false;

    protected override async Task OnInitializedAsync(){
        if (!string.IsNullOrWhiteSpace(Planet.IconUrl))
        {
            iconUrl = Planet.IconUrl;
        }

        HomeWindowComponent.RerenderPlanetCards += Refresh;
    }

    public async Task Refresh()
    {
        IsUnread = ValourClient.GetPlanetUnreadState(Planet.Id);
        StateHasChanged();
    }
    
    public async Task OnClick()
    {
        // Load planet first for personal reasons (let me keep the kids thanks)
        await ValourClient.OpenPlanet(Planet);
        await windowManager.SetFocusedPlanet(Planet);

        PlanetChatChannel channel = await Planet.GetPrimaryChannelAsync();

        Console.WriteLine($"Switching window {Window.Id} to {channel.Name}");

        var newWindow = new PlanetChatChannelWindow(channel);

        await windowManager.ReplaceWindow(Window, newWindow);
        await windowManager.SetSelectedWindow(newWindow);

        StateHasChanged();
    }

    protected void OnIconError()
    {
        iconUrl = "_content/Valour.Client/media/logo/logo-256.png";

        int r = Random.Shared.Next(24) * 15;

        image_style = $"filter: hue-rotate({r}deg)";

        StateHasChanged();
    }
}