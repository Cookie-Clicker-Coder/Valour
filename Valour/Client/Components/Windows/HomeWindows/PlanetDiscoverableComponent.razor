@using System.Text
@using global::Markdig.Extensions.TaskLists
@inject IJSRuntime JsRuntime
@inject ContextMenuService ContextMenuService

<div id="flipper-discover-@Planet.Id-@Window.Id" class="flipper" ontouchstart="determineFlip('flipper-discover-@Planet.Id-@Window.Id', 240)" onmouseover="determineFlip('flipper-discover-@Planet.Id-@Window.Id', 240)" @onclick="OnClick"> 
    <div class="outer-circle"
         @oncontextpress="@OnContextPress">
        @if (!string.IsNullOrWhiteSpace(_iconText))
        {
            <img alt="planet icon" src="@Planet.GetIconUrl(IconFormat.Webp64)" class="icon" />

            <div class="icon-text-holder">
                <h1 class="icon-text" style="@_iconTextStyle">@_iconText</h1>
            </div>
        }
        else
        {
            @if (Planet.HasAnimatedIcon)
            {
                <style>
                    .outer-circle:hover .discovery-icon-@Planet.Id {
                        background-image: url(@_animatedIconUrl), url(@_iconUrl), url(@_fallbackIconUrl) !important;
                    }
                </style>
            }
            <div class="icon discovery-icon-@Planet.Id" style="background-image: url(@_iconUrl), url(@_fallbackIconUrl)"></div>
        }
        <div class="rect-slide">
            <div class="text-wrapper">
                <div class="text-flex">
                    <b class="planet-name">@Planet.Name</b>
                </div>
            </div>
        </div>
    </div>
</div>

@code {
    [Parameter]
    public Planet Planet { get; set; }

    [Parameter]
    public WindowData Window { get; set; }

    [CascadingParameter]
    public ModalRoot ModalRoot { get; set; }

    private string _iconUrl = DefaultImage;
    private string _animatedIconUrl = "";
    private string _fallbackIconUrl = "_content/Valour.Client/media/logo-circle-icon.svg";
    private const string DefaultImage = "_content/Valour.Client/media/logo-circle-icon.svg";
    
    private string _iconText;
    private string _iconTextStyle = "";
    private int _iconImageColor;

    protected override void OnInitialized(){
        if (Planet.HasCustomIcon)
        {
            _iconUrl = Planet.GetIconUrl(IconFormat.Webp256);

            if (Planet.HasAnimatedIcon)
            {
                _animatedIconUrl = Planet.GetIconUrl(IconFormat.WebpAnimated256);
            }
        }
        else
        {
            GenerateAutoGraphic();
        }
    }
    
    private void OnContextPress(ContextPressEventArgs e)
    {
        ContextMenuService.Root.OpenMenu<PlanetContextMenu>(e,
            new PlanetContextMenu.PlanetContextParams()
            {
                Planet = Planet
            }
            );
    }
    
    private string GetCommunityShortCode(string communityName)
    {
        if (communityName.Length < 5)
        {
            return communityName.ToUpper();
        }

        var sb = new StringBuilder();

        for (int i = 0; i < communityName.Length; i++)
        {
            if (i == 0)
            {
                sb.Append(char.ToUpper(communityName[0]));
                continue;
            }
            
            bool spaceFound = false;
            char currentChar = communityName[i];

            if (i > 0 && (communityName[i - 1] == ' ' || 
                          (char.IsUpper(currentChar) && char.IsLower(communityName[i - 1]))))
            {
                spaceFound = true;
            }

            if (spaceFound)
            {
                sb.Append(char.ToUpper(currentChar));
            }

            if (sb.Length >= 4)
            {
                break;
            }
        }

        return sb.ToString();
    }
    
    private void GenerateAutoGraphic()
    {
        _iconUrl = "_content/Valour.Client/media/logo-circle.svg";
        _iconText = GetCommunityShortCode(Planet.Name);
        _iconImageColor = Planet.Id.GetHashCode();

        _iconTextStyle = $"font-size: {100f / (_iconText.Length + 1)}px;";
    }

    private async Task OnClick()
    {
        // Attempt to join planet
        var result = await ToastContainer.Instance.WaitToastWithTaskResult(new ProgressToastData<TaskResult<PlanetMember>>(
            $"Joining {Planet.Name}",
            "...",
            ValourClient.JoinPlanetAsync(Planet),
            "Joined successfully!"
        ));
    }
}