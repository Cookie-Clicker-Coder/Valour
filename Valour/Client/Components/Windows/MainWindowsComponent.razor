@using Valour.Client.Pages
@inject IJSRuntime JS

<!-- Pass WindowManager this down to all children -->
<CascadingValue Value="this">
	@{
		<DockContainer @ref="@_dock" />
	}
</CascadingValue>

@code {
	
	[Parameter]
	public StartScreenData StartData { get; set; }
	
	private DockContainer _dock;
	
	public bool CanRender { get; set; }

	protected override async Task OnInitializedAsync()
	{

		DockContainer.MainDock = _dock;

	/*
		// Build empty window list
		Windows = new();

		WindowManager.MainWindowsComponent = this;
		
		Console.WriteLine(JsonSerializer.Serialize(StartData));

		if (Windows.Count() == 0)
		{
			ClientWindow newWindow = null;
			
			if (StartData is not null)
			{
				switch (StartData.Start)
				{
					case StartScreen.PlanetChannel:
					{
						var planet = ValourCache.Get<Planet>(StartData.StartPlanetId);
						if (planet is null)
							break;

						var channel = (await planet.GetChatChannelsAsync()).FirstOrDefault(x => x.Id == StartData.StartChannelId);
						if (channel is null)
							break;
						
						await ValourClient.OpenPlanet(planet);
						await WindowManager.SetFocusedPlanet(planet);

						newWindow = new ChatChannelWindow(channel);
						break;
					}
					case StartScreen.DirectChannel:
					{
						var channel = ValourCache.Get<Channel>(StartData.StartChannelId);
						if (channel is null)
							break;
						
						newWindow = new ChatChannelWindow(channel);
						
						break;
					}
				}
			}
			
			if (newWindow is null)
				newWindow = new HomeWindow();
			
			// Add a new window with self as the target
			await WindowManager.AddWindowAsync(newWindow, this);
		}
		*/
	}

	protected override bool ShouldRender()
		=> CanRender;

	public async Task RefreshAsync()
	{
		CanRender = true;
		StateHasChanged();
	}

	protected override async Task OnAfterRenderAsync(bool firstRender)
	{
		if (firstRender)
		{
			await _dock.AddWindowAsync(new WindowData()
			{
				Data = null,
				Icon = "./_content/Valour.Client/media/logo/logo-128.png",
				Type = typeof(HomeWindowComponent),
				Title = "Home"
			});
		}
		
		/*
		if (!DeviceInfo.IsMobile && Windows.Count > 0)
		{
			await JS.InvokeVoidAsync("SplitWindows", "window-man");
			CanRender = false;	
		}
		*/
	}
}