<button
    class="label context-btn @(_show ? "sub-open" : "")"
    @onclick:stopPropagation="true"
    @ontouchstart:stopPropagation="true"
    @onclick="@OnClicked"
    @onmouseenter="@OnMouseEnter"
    @onmouseleave="@OnMouseLeave">
    
    <div class="context-bg @(_show ? "open" : "")" style="background-color: @Color"></div>

    <span class="label-wrapper" style="color: @Color">
        <span class="text">@Label</span>

        @if (Icon is not null)
        {
            <span class="icon">
                @Icon
            </span>
        }
    </span>

    @if (_show)
    {
        <div
            @ontouchend:stopPropagation="true"
            @onclick:stopPropagation="true"
            @ref="@_contentElement"
            class="content-wrapper">
            <div class="focus-bar"></div>
            <div class="sub-content">
                @Content
                <div
                    class="mobile-back"
                    @onclick="@OnClickBack">
                    <ContextMenuItem>â—„ Go Back</ContextMenuItem>
                </div>
            </div>
        </div>
    }
</button>

@code {
    
    [CascadingParameter]
    public ContextMenuRoot ContextMenuRoot { get; set; }
    
    [Parameter]
    public RenderFragment Icon { get; set; }
    
    [Parameter]
    public RenderFragment Label { get; set; }
    
    [Parameter]
    public RenderFragment Content { get; set; }
    
    [Parameter]
    public string Color { get; set; } = "#fff";

    private DateTime _openTime;

    private ElementReference _contentElement;

    private bool _show;

    private bool _render;
    
    private bool _wasClicked;

    private void OnClicked()
    {
        if (_wasClicked)
        {
            _wasClicked = false;
            OnMouseLeave();
            return;
        }
        
        _wasClicked = true;
        
        OnMouseEnter();
    }
    
    private void OnMouseEnter()
    {
        _show = true;
        _openTime = DateTime.Now;
        Refresh();
    }

    private void OnMouseLeave()
    {
        // If it was a click, we do not want
        // to close the menu when the mouse leaves
        if (_wasClicked)
            return;
        
        _show = false;
        Refresh();
    }

    private void OnClickBack()
    {
        // Ensure at least 100ms passed since open
        if ((DateTime.Now - _openTime).TotalMilliseconds < 100)
            return;
        
        _show = false;
        _wasClicked = false;
        
        Refresh();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (_show)
        {
            await ContextMenuRoot.NotifySubmenuOpen(_contentElement);
        }
        else
        {
            await ContextMenuRoot.NotifySubmenuClose(_contentElement);
        }
        
        _render = false;
    }

    protected override bool ShouldRender() => _render;
    
    public void Refresh()
    {
        _render = true;
        StateHasChanged();
    }
}