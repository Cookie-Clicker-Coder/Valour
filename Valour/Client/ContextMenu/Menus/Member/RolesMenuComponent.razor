@implements IDisposable

@foreach (var role in Member.Planet.Roles)
{
	var cRole = role;
	var hasRole = Member.Roles.ContainsId(role.Id);

	<ContextMenuItem>
		<div class="role-row" @onpointerdown="@(() => OnRoleClick(cRole, !hasRole))">
			<div class="v-checkmark-wrapper">
				<input class="role-checkbox" type="checkbox"
                			       checked="@hasRole" disabled />
				<span class="v-checkmark" style="@(hasRole ? $"background-color: {role.Color};" : "")"></span>
				<i class="bi bi-check v-checkmark-fill"></i>
			</div>
			<p style="color:@role.Color; display: inline-block; margin: 0;">@role.Name</p>
		</div>
	</ContextMenuItem>
}

@code {
	[Parameter]
	public PlanetMember Member { get; set; }

	protected override void OnInitialized()
	{
		Member.Planet.Roles.Changed += OnRoleUpdate;
		Member.Roles.Changed += OnMemberRoleUpdate;
	}

	void IDisposable.Dispose()
	{
		Member.Planet.Roles.Changed -= OnRoleUpdate;
		Member.Roles.Changed -= OnMemberRoleUpdate;
	}

	private void OnRoleUpdate(ModelListChangeEvent<PlanetRole> eventData)
	{
		StateHasChanged();
	}
	
	private void OnMemberRoleUpdate(ModelListChangeEvent<PlanetRole> eventData)
	{
		StateHasChanged();
	}

	private async Task OnRoleClick(PlanetRole role, bool value)
	{
		if (value)
			// Add role
			await Member.Node.PostAsync($"api/members/{Member.Id}/roles/{role.Id}", null);
		else
			// Remove role
			await Member.Node.DeleteAsync($"api/members/{Member.Id}/roles/{role.Id}");


		StateHasChanged();
	}
}
