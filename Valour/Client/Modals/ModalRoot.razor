@inject IJSRuntime JsRuntime

<CascadingValue IsFixed="true" Value="@this">
    @ChildContent
</CascadingValue>

@foreach (var modal in _openModals)
{
    var data = new Dictionary<string, object>
    {
        { "ModalId", modal.Id },
        { "Data", modal.Data }
    };
    
    <div class="fade-wrap">
        <Fade @ref="@modal.FadeRef" OnFadeOut="@(() => { RemoveModal(modal.Id); return Task.CompletedTask; })">
            <!-- Outer wrapper covers entire screen with darken effect -->
            <div id="@modal.Id" class="modal-bg" @key="@(modal.Id + "-bg")" @onclick="CloseTopModal">
                <div @onclick:stopPropagation="true">
                    <DynamicComponent @key="@modal.Id" Type="@modal.Type" Parameters="@data"></DynamicComponent>
                </div>
            </div>
        </Fade>
    </div>
}


@code { 
    private readonly TimeSpan _fadeDuration = TimeSpan.FromMilliseconds(300);
    
    private class ModalInstance
    {
        public string Id { get; set; } = "modal-" + Guid.NewGuid();
        public Type Type { get; set; }
        public object Data { get; set; }
        public Fade FadeRef { get; set; }
    }
    
    [Parameter]
    public RenderFragment ChildContent { get; set; }
    
    /// <summary>
    /// Module for calling Javascript functions
    /// </summary>
    private IJSInProcessObjectReference _jsModule;
    
    /// <summary>
    /// All the open modals in the application
    /// These are rendered in order, with the last one being the topmost
    /// </summary>
    private readonly List<ModalInstance> _openModals = new();
    
    public void OpenModal<T>(object data = null) where T : ComponentBase
    {
        var modal = new ModalInstance
        {
            Type = typeof(T),
            Data = data
        };
        
        _openModals.Add(modal);
        
        StateHasChanged();
    }

    public async Task CloseModal(string id)
    {
        var modal = _openModals.FirstOrDefault(x => x.Id == id);

        if (modal is null)
            return;

        await modal.FadeRef.FadeOut();
    }
    
    public async Task CloseTopModal()
    {
        var modal = _openModals.LastOrDefault();
        
        if (modal is null)
            return;
        
        await modal.FadeRef.FadeOut();
    }
    
    public async Task CloseAllModals()
    {
        foreach (var modal in _openModals)
        {
            await modal.FadeRef.FadeOut();
        }
    }
    
    private void RemoveModal(string id)
    {
        var modal = _openModals.FirstOrDefault(x => x.Id == id);
        
        if (modal is null)
            return;
        
        _openModals.Remove(modal);
        StateHasChanged();
    }
    
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            _jsModule = await JsRuntime.InvokeAsync<IJSInProcessObjectReference>("import", "./_content/Valour.Client/Modals/ModalRoot.razor.js?version=$(SHORTHASH)");
        }
    }
}