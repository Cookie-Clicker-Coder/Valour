@page "/authorize"
@    using Valour.Shared.Models

@inject NavigationManager navManager
@inject IJSRuntime JS

@if (finishedAuth)
{
    <br />
    <div style="text-align: center;">
        <h4>You have authorized the application.</h4>
        <h5>You can close this page.</h5>
    </div>
    return;
}

@if (isError) {
    <br />
    <div style="text-align: center;">
        <h4>Whoops! We have an issue.</h4>
        <p class="m-2">@errorString</p>
    </div>
    return;
}

@if (App is null){
    <br />
    <div style="text-align: center;">
        <h4>Loading!</h4>
        <p class="m-2">We promise it's worth the wait.</p>
    </div>
    return;
}

<body class="login-background">
    <div class="popup-box">
        <div class="col-md-12">
            <section>
                <h3 class="invite-title">@ValourClient.Self.Name,</h3>
                <h2 class="invite-title">Do you authorize</h2>
                <div style="text-align: center">
                    <h3 class="text-info invite-name">@App.Name</h3>
                    &nbsp;
                    <h3 class="invite-name">to</h3>
                </div>

                <div style="text-align: center;">
                    <img class="app-icon" src="@App.ImageUrl" />
                </div>

                <ul>
                    @for (int i = 0; i < UserPermissions.Permissions.Length; i++){
                        if ((UserPermissions.Permissions[i].Value & scope) == UserPermissions.Permissions[i].Value){

                            var perm = UserPermissions.Permissions[i];

                            <li class="mb-4">
                                <h5>@perm.Name</h5>
                                <p>@perm.Description</p>
                            </li>
                        }
                    }
                </ul>

                

                <br />

                <span class="text-info center-text" style="text-align:center">@infoSpan</span>
                <span class="text-danger center-text" style="text-align:center">@errorSpan</span>

                <div style="text-align: center;">
                    <button class='btn v-button' @onclick='OnAuthorizeAsync'>Authorize</button>
                </div>
            </section>
        </div>
    </div>
</body>



@code {
    [Parameter]
    [SupplyParameterFromQuery(Name = "response_type")]
    public string response_type { get; set; }

    [Parameter]
    [SupplyParameterFromQuery(Name = "client_id")]
    public long client_id { get; set; }

    [Parameter]
    [SupplyParameterFromQuery(Name = "redirect_uri")]
    public string redirect_uri { get; set; }

    [Parameter]
    [SupplyParameterFromQuery(Name = "scope")]
    public long scope { get; set; }

    [Parameter]
    [SupplyParameterFromQuery(Name = "state")]
    public string state { get; set; }

    public bool isError = false;
    public string errorString = "An unknown error occured.";

    public PublicOauthAppData App { get; set; }

    public string infoSpan;
    public string errorSpan;

    bool finishedAuth = false;


    protected override async Task OnInitializedAsync()
    {
        if (ValourClient.Self is null){
            isError = true;
            errorString = "Please log in!";
            StateHasChanged();
            return;
        }

        if (response_type == null || string.IsNullOrWhiteSpace(response_type))
        {
            isError = true;
            errorString = "Response type is missing.";
            StateHasChanged();
            return;
        }

        response_type = response_type.ToLower();

        App = await OauthApp.FindPublicDataAsync(client_id);

        if (App is null){
            isError = true;
            errorString = $"Could not find app with id {client_id}";
            StateHasChanged();
            return;
        }

        StateHasChanged();
    }

    public async Task OnAuthorizeAsync()
    {
        switch (response_type){
            case "code": {

                    var model = new AuthorizeModel(){
                    ClientId = client_id,
                    RedirectUri = redirect_uri,
                    UserId = ValourClient.Self.Id,
                    ResponseType = response_type,
                    Scope = scope,
                    State = state
                };

                var res = await ValourClient.PrimaryNode.PostAsyncWithResponse<string>($"api/oauth/authorize", model);

                if (!res.Success)
                {
                    isError = true;
                    errorString = res.Message;
                    StateHasChanged();
                    return;
                }

                await JS.InvokeAsync<object>("open", res.Data, "_blank");

                finishedAuth = true;

                break;
            }
            default: {
                isError = true;
                errorString = $"Response type {response_type} is not yet supported!";
                StateHasChanged();
                return;
            }
        }

        StateHasChanged();
    }
}