@page "/"

@using Valour.Shared
@using Valour.Shared.Categories;
@inject HttpClient Http
@inject NavigationManager navManager
@using Microsoft.AspNetCore.SignalR.Client;
@inject IJSRuntime JS
@inject WindowManager windowManager

<!-- Check login status -->
@if (!ValourClient.IsLoggedIn)
{
	<LoginComponent FromVerified="false"></LoginComponent>
	return;
}

<link href="https://fonts.googleapis.com/css2?family=Ubuntu:ital,wght@0,300;0,400;0,500;0,700;1,300;1,400;1,500;1,700&display=swap" rel="stylesheet">
<body class="mainrow">
	<div class="sidebar-menu">
		<div class="sidebar" id="sidebar1">

			<div style="width: 250px; height: 64px">
				<LogoComponent></LogoComponent>					

				<div style="display:inline-block; vertical-align: middle">
					<p class="valour-name">
						Valour
					</p>
					<p class="valour-version">
						Version @typeof(ISharedUser).Assembly.GetName().Version.ToString() Pre-Alpha
					</p>
				</div>
			</div>
			<FriendListComponent></FriendListComponent>
			<MemberListComponent></MemberListComponent>
		</div>

		<ChannelListOpenTabComponent></ChannelListOpenTabComponent>

		<div class="sidebar-2" id="sidebar2">
			<CurrentPlanetComponent></CurrentPlanetComponent>

			<div class="top-bar">
			</div>
			<UserInfoComponent User="@ValourClient.Self"></UserInfoComponent>

			<ChannelListComponent></ChannelListComponent>
		</div>
	</div>
	<div class="channel-and-topbar" id="mainwindow">
		<div class="topbar">
		</div>
		<div class="topline">
		</div>

		<!-- It's so nice when it's hidden away, just like my fears -->
		<MainWindowsComponent></MainWindowsComponent>
	</div>

	<ContextMenuHolderComponent></ContextMenuHolderComponent>
</body>


@code {

	protected override async Task OnInitializedAsync()
	{
		await base.OnInitializedAsync();

		windowManager.OnPlanetFocused += OnPlanetChange;
		ValourClient.OnLogin += OnLoginAsync;
	}

	public async Task OnLoginAsync()
	{
		StateHasChanged();
	}

	public void Dispose()
	{
		windowManager.OnPlanetFocused -= OnPlanetChange;
	}

	protected override async void OnAfterRender(bool firstRender)
	{
		await JS.InvokeVoidAsync("FixClip");
		await JS.InvokeVoidAsync("FitMobile");

		var isMobile = await JS.InvokeAsync<bool>("IsMobile");
		var isEmbedded = await JS.InvokeAsync<bool>("IsEmbedded");

		DeviceInfo.IsMobile = isMobile;
		DeviceInfo.IsEmbedded = isEmbedded;
	}

	public async Task OnPlanetChange(Planet planet)
	{
		if (planet != null)
		{
			Console.WriteLine("Index planet change: " + planet.Name);
		}
		else
		{
			Console.WriteLine("Index planet change: null");
		}
	}

	[JSInvokable("OnRefocus")]
	public static async Task OnRefocus()
	{
		Console.WriteLine("Detected refocus event.");
		await ValourClient.RefreshNodes();
	}

	public void ForceRefresh()
	{
		StateHasChanged();
	}
}