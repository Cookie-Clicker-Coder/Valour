@page "/"

@inject IJSRuntime JS
@inject WindowManager windowManager

<!-- Check login status -->
@if (!ValourClient.IsLoggedIn)
{
	<LoginComponent FromVerified="false"></LoginComponent>
	return;
}

<MediaSoupWrapper></MediaSoupWrapper>

<link href="https://fonts.googleapis.com/css2?family=Ubuntu:ital,wght@0,300;0,400;0,500;0,700;1,300;1,400;1,500;1,700&display=swap" rel="stylesheet">
<div class="mobile-holder @MobileClass">
	<!-- Modal management -->
	<CascadingBlazoredModal Size="ModalSize.Automatic" HideHeader='true' HideCloseButton='true'>
		<body class="mainrow">
			<Sidebar></Sidebar>
			<div class="channel-and-topbar" id="mainwindow">
				<div class="topbar">
				</div>
				<div class="topline">
				</div>

				<!-- It's so nice when it's hidden away, just like my fears -->
				<MainWindowsComponent></MainWindowsComponent>
			</div>
			@if (!DeviceInfo.IsMobile)
			{
				<Sidebar Flip="@true"></Sidebar>
			}
		
			<ContextMenuHolderComponent></ContextMenuHolderComponent>
		</body>
	</CascadingBlazoredModal>
</div>


@code {
	
	private string MobileClass => DeviceInfo.IsMobile ? "mobile" : "desktop";

	protected override async Task OnInitializedAsync()
	{
		await base.OnInitializedAsync();

		windowManager.OnPlanetFocused += OnPlanetChange;
		ValourClient.OnLogin += OnLoginAsync;
	}

	public async Task OnLoginAsync()
	{
		StateHasChanged();
	}

	public void Dispose()
	{
		windowManager.OnPlanetFocused -= OnPlanetChange;
	}

	protected override async void OnAfterRender(bool firstRender)
	{
		await JS.InvokeVoidAsync("FixClip");
		await JS.InvokeVoidAsync("FitMobile");
		
		if (firstRender)
			StateHasChanged();
	}

	public async Task OnPlanetChange(Planet planet)
	{
		if (planet != null)
		{
			Console.WriteLine("Index planet change: " + planet.Name);
		}
		else
		{
			Console.WriteLine("Index planet change: null");
		}
	}

	[JSInvokable("OnRefocus")]
	public static async Task OnRefocus()
	{
		Console.WriteLine("Detected refocus event.");
		await ValourClient.RefreshNodes();
	}

	public void ForceRefresh()
	{
		StateHasChanged();
	}
}