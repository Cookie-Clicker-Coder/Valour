@page "/Register"
@page "/Register/I/{InviteCode}"
@page "/Register/from/{Source}"
@page "/Register/referral/{Referral}"

@inject IJSRuntime JsRuntime
@inject NavigationManager NavManager

<body class="login-background" style="background-image: url(_content/Valour.Client/media/Abstract-Background.png)">
    <div class="popup-box">
        <div class="col-md-12">
            @if (!_completed)
            {
                <section>
                    <h2>Register for Valour</h2>

                    <h4>Welcome to our app!</h4>
                    <hr />
                    <div asp-validation-summary="All" class="text-danger"></div>
                    <div class="form-group mt-2">
                        <label>Username</label>
                        <input class="form-control" @bind-value="@_username" />
                    </div>
                    <div class="form-group mt-2">
                        <label>Email</label>
                        <input type="email" class="form-control" @bind-value="@_email" />
                    </div>
                    <div class="form-group mt-2">
                        <label>Password</label>
                        <input type="password" class="form-control" @bind-value="@_password" />
                    </div>
                    <div class="form-group mt-2">
                        <label>Confirm Password</label>
                        <input type="password" class="form-control" @bind-value="@_passwordConf" />
                    </div>
                    <div class="form-group mt-2">
                        <label>Birthday</label>
                        <InputDate @bind-Value="@_dob" class="form-control"></InputDate>
                        <br />
                        <span id="date-span" class="text-danger">@_dobSpan</span>
                    </div>
                    <div class="form-group mt-2">
                        <label>Referral (Optional)</label>
                        <input type="text" class="form-control" @bind-value="@_referral" disabled="@_lockReferral" />
                        <span id="referral-info-span" class="text-info">This is the username of a user who sent you to Valour! (ie SpikeViper#0000)</span>
                    </div>
                    <div class="form-group mt-4">
                        <div style="display: inline-block">
                            <p>
                                <input type="checkbox" @bind-value="@_termsAgreed" /> &nbsp; By checking this box, you acknowledge you have read and agree to the Valour <a href="https://github.com/SpikeViper/Valour/blob/main/TERMS_OF_SERVICE.md">Terms of Service </a>
                                and to follow the <a href="https://github.com/SpikeViper/Valour/blob/main/PLATFORM_RULES.md"> Platform Rules</a> and <a href="https://github.com/SpikeViper/Valour/blob/main/PLATFORM_ECO_RULES.md"> Eco Rules</a>.
                            </p>
                        </div>
                    </div>
                    <span id="error-span" class="text-danger">@_errorSpan</span>
                    <span id="success-span" class="text-info">@_successSpan</span>

                    <div class="form-group mt-4">
                        <button class="btn v-btn primary mt-2" @onclick="OnClickSubmit">Submit</button>
                    </div>
                </section>
            }
            else
            {
                <ConfirmationEmailComponent RegisterRequest="@_regRequest"></ConfirmationEmailComponent>
            }
        </div>
    </div>
</body>

@code {

    [Parameter]
    public string InviteCode { get; set; }
    
    [Parameter]
    public string Source { get; set; }
    
    [Parameter]
    public string Referral { get; set; }

    private bool _completed;
    
    private RegisterUserRequest _regRequest;
    
    // Input fields
    private string _email;
    private string _password;
    private string _passwordConf;
    private string _username;
    private string _referral;
    private bool _lockReferral;
    private DateTime _dob = DateTime.Today;
    private bool _termsAgreed;

    // Spans
    private string _errorSpan;
    private string _successSpan;
    private string _dobSpan;

    protected override void OnInitialized()
    {
        if (!string.IsNullOrWhiteSpace(Referral))
        {
            _referral = Referral;
            _lockReferral = true;
        }
    }

    private async Task OnClickSubmit(MouseEventArgs e)
    {
        _errorSpan = "";
        _successSpan = "";

        if (!_termsAgreed)
        {
            _errorSpan = "You must read and accept the Terms of Service and Platform Rules to use Valour.";
            return;
        }

        if (string.IsNullOrWhiteSpace(_email))
        {
            _errorSpan = "Please input an email.";
            return;
        }

        if (string.IsNullOrWhiteSpace(_password))
        {
            _errorSpan = "Please input a password.";
            return;
        }

        if (!string.Equals(_password, _passwordConf))
        {
            _errorSpan = "Passwords do not match";
            return;
        }

        if (string.IsNullOrWhiteSpace(_username))
        {
            _errorSpan = "Please input an username.";
            return;
        }

        var now = DateTime.Today;
        var age = now.Year - _dob.Year;
        if (_dob > now.AddYears(-age)) age--;
        
        switch (age)
        {
            case 0:
                _dobSpan = "Welcome to life newborn! We may not know how you even wrote the date but unfortunately you are going to have to wait till 13 years to use Valour.";
                return;
            case < 0:
                _dobSpan = $"Congratulations on not being born! Maybe try again when you are 13 in {Math.Abs(age) + 13} years?";
                return;
            case < 13:
                _dobSpan = "You must be 13 years of age or older to use Valour.";
                return;
            case > 120:
                _dobSpan = $"If you are actually {age} years old, please contact us at support@valour.gg and we will buy you a cake.";
                return;
        }

        // We have to do this for data localization laws
        var isEuropean = await JsRuntime.InvokeAsync<bool>("isEuropeanUnion");
        var locale = isEuropean ? Locality.EuropeanUnion : Locality.General;

        _regRequest = new RegisterUserRequest()
        {
            Username = _username,
            Email = _email,
            Password = _password,
            Referrer = _referral,
            DateOfBirth = _dob,
            Locality = locale,
            InviteCode = InviteCode,
            Source = Source,
        };

        var result = await ValourClient.PostAsync("api/users/register", _regRequest);

        if (!result.Success)
        {
            _errorSpan = result.Message;
        }
        else
        {
            // This is important so that the flag cannot be unset by a double click of the button
            _completed = true;
            _successSpan = "Logging you in!";
        }
    }
    }
