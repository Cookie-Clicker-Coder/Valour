@inject ClientWindowManager windowManager
@inject ChannelListManager listManager

<div class="@GetCssClass()" id="list-@Planet.Id">
    <div style="cursor:pointer" id="list-inner-@Planet.Id" @oncontextmenu="OnContextMenu">
        <div @onclick='@OnClick'
             @ondrop="async () => await listManager.OnItemDropOnPlanet(this)"
             style="width:85%; display:inline-block" ondragover="event.preventDefault();">
            <img class="arrow" src="media/Category-Icon.svg" style="@GetArrowStyle()">
            <p class="name">
                @Planet.Name
            </p>
        </div>
    </div>
    <div style="padding-left: 25px">
        <!-- The Modal -->
        @if (Open)
        {
            @foreach (PlanetCategoryChannel category in TopCategories)
            {
                <ChannelListCategoryComponent Categories="Categories"
                                              Channels="Channels"
                                              Category="category"
                                              IsTopLevel="true"
                                              @key='category.Id'>
                </ChannelListCategoryComponent>
            }

        }
    </div>
</div>

@code {
    [Parameter]
    public Planet Planet { get; set; }

    public bool Open { get; set; }

    public List<PlanetCategoryChannel> TopCategories;
    public List<PlanetCategoryChannel> Categories { get; set; }
    public List<PlanetChatChannel> Channels { get; set; }

    protected override async Task OnInitializedAsync()
    {
        // Initialize collections
        Categories = new List<PlanetCategoryChannel>();
        Channels = new List<PlanetChatChannel>();
        TopCategories = new List<PlanetCategoryChannel>();

        // Handle list change
        PlanetCategoryChannel.OnAnyUpdated += OnCategoryUpdate;
        PlanetChatChannel.OnAnyUpdated += OnChatChannelUpdate;

        // Handle Deletions
        PlanetCategoryChannel.OnAnyDeleted += OnCategoryDeletion;
        PlanetChatChannel.OnAnyDeleted += OnChatChannelDeletion;

        await GetCategories();
        await GetChannels();
        GetTopLevelCategories();
    }

    public async Task OnContextMenu()
    {

    }

    public string GetCssClass()
    {
        if (Open)
        {
            return "category is-open top-level-category planet-list";
        }
        else
        {
            return "category top-level-category planet-list";
        }
    }

    public string GetArrowStyle()
    {
        if (Open)
            return "transform: rotate(90deg);";
        return "";
    }

    public void OnClick()
    {
        Open = !Open;
        StateHasChanged();
    }

    public void GetTopLevelCategories()
    {
        if (Categories == null) return;

        TopCategories = Categories.Where(x => x.ParentId == null)
                                  .OrderByDescending(x => x.Position)
                                  .ToList();

        Console.WriteLine($"Found {TopCategories.Count} top level categories");
    }

    public async Task OnChatChannelDeletion(PlanetChatChannel channel)
    {
        var oldChannel = Channels.FirstOrDefault(x => x.Id == channel.Id);

        if (oldChannel != null)
        {
            Channels.Remove(oldChannel);
        
            StateHasChanged();
        }
    }

    public async Task OnCategoryDeletion(PlanetCategoryChannel category)
    {
        var old = TopCategories.FirstOrDefault(x => x.Id == category.Id);

        if (old != null)
        {
            TopCategories.Remove(old);
            Categories.Remove(old);
            StateHasChanged();
        }
    }

    public async Task OnCategoryUpdate(PlanetCategoryChannel category, int flags)
    {
        // If we contain the category and its position or category changed we need to factor for that
        var old = TopCategories.FirstOrDefault(x => x.Id == category.Id);

        if (old != null)
        {
            // If removed from this
            if (category.ParentId != null)
            {
                TopCategories.Remove(old);
            }
            // If moved within this category
            else
            {
                // Get old index
                var index = TopCategories.IndexOf(old);
                // Remove old
                TopCategories.Remove(old);
                // Replace with new
                TopCategories.Insert(index, category);
            }

            StateHasChanged();
        }
        // In this case it was just added to this category
        else if (category.ParentId == null)
        {

            // Insert into position
            TopCategories.Insert(category.Position, category);

            StateHasChanged();
            return;
        }
    }

    public async Task GetCategories()
    {
        Categories = await Planet.GetCategoriesAsync();
        GetTopLevelCategories();
    }

    public async Task OnChatChannelUpdate(PlanetChatChannel channel, int flags)
    {

        //Console.WriteLine(channel.Name);

        var oldChannel = Channels.FirstOrDefault(x => x.Id == channel.Id);

        //Console.WriteLine(oldChannel.Name);

        if (oldChannel == null)
        {
            Channels.Add(channel);
        
            StateHasChanged();
            return;
        }

        var index = Channels.IndexOf(oldChannel);

        // Set to new channel
        Channels[index] = channel;

        StateHasChanged();
    }

    public async Task GetChannels()
    {
        Channels = await Planet.GetChannelsAsync();
    }
}
