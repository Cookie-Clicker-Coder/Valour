@inject HttpClient Http
@inject NavigationManager navManager
@inject IJSRuntime JS
@using Valour.Shared.Categories

<section>
    <h2 class="title">Create a Channel</h2>

    <div asp-validation-summary="All" class="text-info"></div>
    <div class="form-group mt-2">
        <label>Channel Name</label>
        <input class="form-control" @bind-value="@name" />
    </div>
    <div style="margin-top:20px;">
        <div class="perm-list-name mb-1">
            Private Channel
        </div>
        <div type="button" style="float: right">
            <label class="switch">
                <input type="checkbox" @onclick="PrivateSwitch" checked="@isprivate">
                <span class="slider round"></span>
            </label>
        </div>
    </div>

    @if (isprivate) {
        <label style="margin-top: 12px;">Who can see and send messages in this channel?</label>
        <div class="roles-box">
            @foreach (PlanetRole role in Roles)
            {
                <div class="role">
                   <div class="perm-list-name mb-1" style="color: @role.GetColorHex();">
                        @role.Name
                    </div>
                    <div type="button" style="float: right">
                        <label class="switch">
                            <input type="checkbox" OnStateChange="SwitchRole(role)" checked="@SelectedRoles[role]">
                            <span class="slider round"></span>
                        </label>
                    </div> 
                </div>

            }
        </div>
    }

    <span id="image-span" style="color:#888888">@imageSpan</span>
    
    <div class="form-group mt-4">
        <center>
            <button class="btn btn-primary mt-2" @onclick="OnClickSubmit">Create</button>
        </center>
    </div>
</section>
@code {

    [Parameter, EditorRequired]
    public Planet Planet { get; set; }

    [Parameter]
    public PlanetCategory Parent { get; set; }

    [CascadingParameter]
    public BlazoredModalInstance ModalInstance { get; set; }

    // Input fields
    string name;

    // Spans
    string imageSpan = "";
    Dictionary<PlanetRole, bool> SelectedRoles = new Dictionary<PlanetRole, bool>();

    List<PlanetRole> Roles = new List<PlanetRole>();
    bool isprivate = false;

    protected override async Task OnInitializedAsync() {
        Roles.Clear();
        SelectedRoles.Clear();

        PlanetMember SelfMember = await ValourClient.GetSelfMember(Planet);

        ulong SelfAuthority = await SelfMember.GetAuthorityAsync();

        var roleResponse = await Planet.GetRolesAsync();

        if (roleResponse is not null)
            return;

        foreach (PlanetRole item in roleResponse)
        {
            if (item.GetAuthority() >= SelfAuthority)
                continue;
            Roles.Add(item);
            SelectedRoles.Add(item, false);
        }
        StateHasChanged();
    }

    private void SwitchRole(PlanetRole role) {
        SelectedRoles[role] = !SelectedRoles[role];
    }

    private void PrivateSwitch() {
        isprivate = !isprivate;
    }

    private async Task OnClickSubmit(MouseEventArgs e)
    {

        // Require a name
        if (string.IsNullOrWhiteSpace(name))
        {
            name = "Please input a channel name.";
            return;
        }


        ulong user_id = ValourClient.Self.Id;

        ulong parent_id = Parent.Id;
        ulong planet_id = Planet.Id;

        PlanetChatChannel newChannel = new()
        {
            Name = name,
            Description = "A chat channel",
            Planet_Id = planet_id,
            Parent_Id = parent_id
        };

        var result = await ValourClient.PostAsyncWithResponse<ulong>($"api/planet/{planet_id}/channels", newChannel);

        if (!result.Success)
        {
            string errorText = result.Message;
            Console.WriteLine(errorText);
            imageSpan = errorText;
            return;
        }

        ulong channel_id = result.Data;

        imageSpan = "Success.";

        if (isprivate) {
            // set the default role channel view perms to false

            PermissionsNode PermissionsNode = new()
            {
                Target_Id = channel_id,
                Planet_Id = Planet.Id,
                Role_Id = Planet.Default_Role_Id,
                Mask = 0x00,
                Code = 0x00,
                Target_Type = ItemType.ChatChannel
            };

            PermissionsNode.SetPermission(ChatChannelPermissions.PostMessages, PermissionState.False);
            PermissionsNode.SetPermission(ChatChannelPermissions.ViewMessages, PermissionState.False);
            PermissionsNode.SetPermission(ChatChannelPermissions.View, PermissionState.False);

            var response = await ValourClient.PostAsync($"api/node", PermissionsNode);

            if (!response.Success)
            {
                string errorText = $"Error: " + response.Message;
                Console.WriteLine(errorText);
                imageSpan = errorText;
            }

            foreach (PlanetRole role in Roles)
            {

                if (!SelectedRoles[role]) {
                    continue;
                }

                PermissionsNode = new PermissionsNode()
                {
                    Target_Id = channel_id,
                    Planet_Id = Planet.Id,
                    Role_Id = role.Id,
                    Mask = 0x00,
                    Code = 0x00,
                    Target_Type = ItemType.ChatChannel
                };

                PermissionsNode.SetPermission(ChatChannelPermissions.PostMessages, PermissionState.True);
                PermissionsNode.SetPermission(ChatChannelPermissions.ViewMessages, PermissionState.True);
                PermissionsNode.SetPermission(ChatChannelPermissions.View, PermissionState.True);

                response = await ValourClient.PostAsync($"api/node", PermissionsNode);

                if (!response.Success)
                {
                    string errorText = $"Error: " + response.Message;
                    Console.WriteLine(errorText);
                    imageSpan = errorText;
                }
            }
        }

        // close modal
        await ModalInstance.CloseAsync();   
    }

    private async Task OnImageInput()
    {

    }
}
