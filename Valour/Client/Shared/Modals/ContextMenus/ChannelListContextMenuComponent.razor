@using Item = Valour.Api.Items.Item
<ContextMenu Id='list-context' CssClass='context'>

    @if (SelectedItem is PlanetCategoryChannel){
        <BlazorContextMenu.Item CssClass='context-item' OnClick='OpenCreateChannel'>Add Channel</BlazorContextMenu.Item>
        <BlazorContextMenu.Item CssClass='context-item' OnClick='OpenCreateCategory'>Add Category</BlazorContextMenu.Item>
    }

    <BlazorContextMenu.Item CssClass='context-item' OnClick='EditChannelListItem'>Edit</BlazorContextMenu.Item>
    <BlazorContextMenu.Item CssClass='context-item' OnClick='DeleteChannelListItem'>Delete</BlazorContextMenu.Item>
</ContextMenu>

@code {

    [CascadingParameter]
    public IModalService Modal { get; set; }

    public static PlanetChannel SelectedItem { get; set; }

    public static ChannelListContextMenuComponent Instance;

    public static async Task SetSelectedItem(PlanetChannel item){

        Console.WriteLine(item.ItemType.ToString());

        SelectedItem = item;
        Instance.Refresh();
    }

    protected override async Task OnInitializedAsync(){
        Instance = this;
    }

    public void Refresh(){
        StateHasChanged();
    }

    public async Task OpenCreateChannel(){
        var planet = await SelectedItem.GetPlanetAsync();
        ModalParameters modalParams = new();
        modalParams.Add("Planet", planet);

        if (SelectedItem is PlanetCategoryChannel){
            modalParams.Add("Parent", SelectedItem);
        }
        else{
            modalParams.Add("Parent", null);
        }

        Modal.Show<CreateChannelComponent>("Create Channel", modalParams);
    }
    
    public async Task OpenCreateCategory(){
        var planet = await SelectedItem.GetPlanetAsync();
        ModalParameters modalParams = new();
        modalParams.Add("Planet", planet);

        if (SelectedItem is PlanetCategoryChannel){
            modalParams.Add("Parent", SelectedItem);
        }
        else{
            modalParams.Add("Parent", null);
        }

        Modal.Show<CreateCategoryComponent>("Create Category", modalParams);
    }

    public async Task DeleteChannelListItem(){
        if (SelectedItem is PlanetCategoryChannel){
            var planet = await SelectedItem.GetPlanetAsync();

            var channels = await planet.GetChannelsAsync();
            var categories = await planet.GetCategoriesAsync();

            // Ensure category has no children if we are deleting it
            if (channels.Count(x => x.ParentId == SelectedItem.Id) > 0 || 
                categories.Count(x => x.ParentId == SelectedItem.Id) > 0){

                InfoModalData imodalData = 
                new($"You can't delete this!",
                    "This is due to this category having channels and/or categories inside of it.",
                    "Okay",
                    async () =>
                    {
                        Console.WriteLine("User Clicked Ok");
                    }
                );

                ModalParameters imodParams = new();
                imodParams.Add("Data", imodalData);

                Modal.Show<InfoModalComponent>("Info", imodParams, new ModalOptions() { Class = "modal-shrink-fit" });
            }
        }

        ConfirmModalData modalData =
        new($"Delete {SelectedItem.Name}?",
             "Are you sure?",
             "Continue",
             "Cancel", 
             async () =>
             {
                 Console.WriteLine("Confirmed channel item deletion.");
                 var result = await Item.DeleteAsync(SelectedItem);
                 Console.WriteLine("Deletion: " + result.Message);

             },
             async () =>
             {
                 Console.WriteLine("Cancelled channel item deletion.");
             }
        );

        ModalParameters modParams = new();
        modParams.Add("Data", modalData);

        Modal.Show<ConfirmModalComponent>("Confirm", modParams, new ModalOptions() { Class = "modal-shrink-fit" });
    }

    public async Task EditChannelListItem()
    {
        ModalParameters modParams = new();
        modParams.Add("ChannelListItem", SelectedItem);
        Modal.Show<EditChannelListItemComponent>("Edit Channel Item", modParams);
    }
}