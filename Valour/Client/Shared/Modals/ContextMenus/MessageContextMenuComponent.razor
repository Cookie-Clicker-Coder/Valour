@inject IJSRuntime JS
@inject IBlazorContextMenuService contextService

<ContextMenu Id='message-context' CssClass='context' class='member-context'>
    <BlazorContextMenu.Item CssClass='context-item'>
        Copy
        <SubMenu CssClass='context-sub'>
            <BlazorContextMenu.Item OnClick='OnClickCopyText' CssClass='context-item'>Text</BlazorContextMenu.Item>
            <BlazorContextMenu.Item OnClick='OnClickCopyId' CssClass='context-item'>Message Id</BlazorContextMenu.Item>
        </SubMenu>
    </BlazorContextMenu.Item>

    @if (Can_Delete == PermissionState.True)
    {
        <BlazorContextMenu.Item OnClick='OnClickDelete' CssClass='context-item'>
            Delete
        </BlazorContextMenu.Item>
    }

    @if (Message.AuthorId == ValourClient.Self.Id)
    {
        <BlazorContextMenu.Item OnClick='OnClickEdit' CssClass='context-item'>
            Edit
        </BlazorContextMenu.Item>
    }

    <BlazorContextMenu.Item CssClass='context-item'>
        Member
        <SubMenu CssClass='context-sub'>
            <InnerMemberContextMenuComponent></InnerMemberContextMenuComponent>
        </SubMenu>
    </BlazorContextMenu.Item>
</ContextMenu>


@code {

    [CascadingParameter]
    public IModalService Modal { get; set; }

    public static MessageComponent MessageComponent { get; set; }

    public static ClientPlanetMessage Message { get; set; }

    public static PermissionState Can_Delete = PermissionState.False;

    public static async Task Initialize(ClientPlanetMessage message, ChannelWindowComponent window, MessageComponent component)
    {
        MessageComponent = component;
        Message = message;
        await InnerMemberContextMenuComponent.Initialize(await message.GetAuthorAsync());

        // Console.WriteLine(window.Channel_Permissions.Code + " | " + window.Channel_Permissions.Mask);

        Can_Delete = window.Channel_Permissions.GetPermissionState(ChatChannelPermissions.ManageMessages);

        // Console.WriteLine(Can_Delete);
    }

    public async Task OnClickDelete()
    {
        ConfirmModalData confirm = new("Delete message?", Message.Content, "Delete", "Cancel",
            async () =>
            {
                await Message.BaseMessage.DeleteAsync();
            },
            async () =>
            {
            // Nothing
        }
        );

        ModalParameters par = new();
        par.Add("Data", confirm);

        Modal.Show<ConfirmModalComponent>("Delete Message", par, new ModalOptions() { Class = "modal-shrink-fit" });
    }

    public async Task OnClickEdit()
    {
        await MessageComponent.OpenEditMode();
    }

	public async Task OnClickCopyText(){
		await JS.InvokeVoidAsync("clipboardCopy.copyText", Message.Content);
	}

	public async Task OnClickCopyId(){
		await JS.InvokeVoidAsync("clipboardCopy.copyText", Message.Id);
	}
}
