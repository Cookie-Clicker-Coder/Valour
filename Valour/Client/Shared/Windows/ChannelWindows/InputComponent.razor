@inject IJSRuntime JS
@using System.Net.Http.Headers
@using Valour.Client.Shared.Windows.ChannelWindows.FileUpload;
@using Valour.Api.Items.Messages

<div>
    <div style="opacity: 0.7; width: 95%">
        <MessageComponent @ref="PreviewMessageComponent" Message="PreviewMessage" Submessage ="true" Last_Message="@WindowComponent.MessageHolder.GetLastMessage()" ></MessageComponent>
    </div>

    <div class="textbox-holder" @onclick="WindowComponent.ScrollToBottomAnim">

        <MentionSelectComponent @ref="MentionSelector"></MentionSelectComponent>

        <div class="textbox" onclick="this.children[1].focus()" @ref='DropZoneElement'>
            <InputFile @ref='InputFile_Ref' id='upload-core' style="width: 0; height: 0; display: none;" OnChange="LoadFiles"></InputFile>
            <div class='upload' onclick="document.getElementById('upload-core').click()">+</div>
            <div @ref='InnerInput_Ref' contenteditable="true" class="textbox-inner" id="text-input-@Window.Index" rows="1" autofocus>
            </div>
        </div>
    </div>
</div>



@code {

    [CascadingParameter]
    public ChannelWindowComponent WindowComponent { get; set; }

    [CascadingParameter]
    public ChatChannelWindow Window { get; set; }

    [CascadingParameter]
    public IModalService Modal { get; set; }

    public MessageHolderComponent MessageHolder { get; set; }

    public PlanetMember SelfMember { get; set; }

    /// <summary>
    /// A reference to the inner input component
    /// </summary>
    public ElementReference InnerInput_Ref { get; set; }

    /// <summary>
    /// The component that displays the mention selection
    /// </summary>
    public MentionSelectComponent MentionSelector { get; set; }

    /// <summary>
    /// The input currently within the chatbox, this is bound and any changes will
    /// be reflected within the box.
    /// </summary>
    private string currentInput;

    /// <summary>
    /// True if the mention selection system list visible
    /// </summary>
    private bool mentionSelect;

    /// <summary>
    /// The message component for the preview message
    /// </summary>
    public MessageComponent PreviewMessageComponent { get; set; }

    /// <summary>
    /// The preview message
    /// </summary>
    public ClientPlanetMessage PreviewMessage { get; set; }

    /// <summary>
    /// Run when the component is initialized
    /// </summary>
    /// <returns></returns>
    protected override async Task OnInitializedAsync()
    {

    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {

        await JS.InvokeVoidAsync("ScrollWindowBottom", Window.Index);

        if (firstRender)
        {
            await JS.InvokeVoidAsync("SetInputComponent", Window.Index, DotNetObjectReference.Create(this));
            await JS.InvokeAsync<IJSObjectReference>("initializeFileDropZone", DropZoneElement, InputFile_Ref.Element);
        }
    }

    #region File Drop System

    // Drop zone stuff
    public InputFile InputFile_Ref { get; set; }
    ElementReference DropZoneElement { get; set; }
    IJSObjectReference dropZoneInstance;

    /// <summary>
    /// Image MIME types supported by the input box 
    /// </summary>
    public static HashSet<string> ImageContent = new HashSet<string>()
    {
        "image/gif",
        "image/jpeg",
        "image/png",
        "image/tiff",
        "image/vnd.microsoft.icon",
        "image/x-icon",
        "image/vnd.djvu",
        "image/svg+xml"
    };

    private async Task LoadFiles(InputFileChangeEventArgs e)
    {
        //var file = await e.File.RequestImageFileAsync("jpeg", 256, 256);

        var file = e.File;

        if (file == null)
        {
            Console.WriteLine("Could not load file as an image.");
        }

        if (file.Size > 10240000)
        {
            Console.WriteLine("Max upload size is 10mb.");
        }

        byte[] data = new byte[file.Size];

        await file.OpenReadStream(10240000).ReadAsync(data);

        var content = new MultipartFormDataContent();
        var arrContent = new ByteArrayContent(data);
        arrContent.Headers.ContentType = new MediaTypeHeaderValue(file.ContentType);

        content.Add(arrContent, file.Name, file.Name);

        string type = "file";

        if (ImageContent.Contains(file.ContentType)){
            type = "image";
        }

        ModalParameters modalParams = new();
        modalParams.Add("File", file);
        modalParams.Add("Data", data);
        modalParams.Add("OnConfirm", 
            async () => {
                var result = await ValourClient.PostAsyncWithResponse<string>($"Upload/{type}", content);

                if (result.Success)
                {
                    string url = result.Data;

                    await PostMessage(url);
                }
                else
                {
                    Console.WriteLine(result.Message);
                }
            }
        );

        Modal.Show<FileUploadComponent>("File Upload", modalParams, new ModalOptions(){ Class = "modal-shrink-fit" });

        StateHasChanged();
    }

    #endregion

    [JSInvokable]
    public async Task OnChatboxSubmit()
    {
        Console.WriteLine(currentInput);

        if (currentInput == null)
        {
            return;
        }

        string temp = currentInput.TrimEnd('\n');
        temp = temp.Trim();

        if (string.IsNullOrWhiteSpace(temp))
        {
            return;
        }

        if (temp != "")
        {
            currentInput = "";
            await OnChatboxUpdate(null, "");

            // Post message to server
            //StateHasChanged();
            await PostMessage(temp);

        }
    }

    public async Task UpdateMentionMenu(string text)
    {
        //Console.WriteLine(text);

        if (text.StartsWith('@') || text.StartsWith('#'))
        {
            if (!MentionSelector.Visible)
            {
                MentionSelector.SetVisible(true, text[0]);
            }

            await MentionSelector.SetText(text);
        }
        else
        {
            if (MentionSelector.Visible){
                MentionSelector.SetVisible(false);
            }
        }

        StateHasChanged();
    }

    [JSInvokable]
    public async Task MentionSubmit()
    {
        await MentionSelector.Submit();

        StateHasChanged();
    }

    [JSInvokable]
    public void MoveMentionSelect(int n)
    {
        MentionSelector.MoveSelect(n);
    }

    [JSInvokable]
    public async Task OnCaretUpdate(string currentWord)
    {
        await UpdateMentionMenu(currentWord);
    }

    /// <summary>
    /// This runs every time a key is pressed when the chatbox is selected
    /// </summary>
    [JSInvokable]
    public async Task OnChatboxUpdate(string input, string currentWord)
    {
        //Console.WriteLine(currentWord);

        await UpdateMentionMenu(currentWord);

        if (input is not null)
        {
            // Fix for dumb formatting in HTML
            input = input.Replace("\n\n«", "«").Replace("» \n\n", "»");
        }

        currentInput = input;

        // Console.WriteLine(input);

        if (string.IsNullOrWhiteSpace(input))
        {
            PreviewMessage = null;
            await PreviewMessageComponent.SetMessage(null);
        }
        else
        {
            var innerMessage = new PlanetMessage()
            {
                AuthorUserId = SelfMember.UserId,
                Content = input,
                ChannelId = Window.Channel.Id,
                AuthorMemberId = SelfMember.Id,
                TimeSent = DateTime.UtcNow
            };

            PreviewMessage = new ClientPlanetMessage(innerMessage);

            PreviewMessage.GenerateForPost();

            await PreviewMessageComponent.SetMessage(PreviewMessage);
        }

        StateHasChanged();
    }

    public async Task PostMessage(string msg)
    {
        PlanetMessage innerMessage = new PlanetMessage(msg, SelfMember.Id, Window.Channel.Id, Window.Channel.PlanetId);

        ClientPlanetMessage message = new ClientPlanetMessage(innerMessage);

        message.GenerateForPost();

        /*
        message.SetMentions(new List<Mention>()
        {
            new Mention()
            {
                TargetId = 1050746125287424,
                Position = 5,
                Type = MentionType.Member
            }
        });
        */

        MessageHolder.AddQueuedMessage(message);

        var result = await ValourClient.SendMessage(innerMessage);

        if (!result.Success)
        {
            MessageHolder.RemoveQueuedMessage(message.Fingerprint);

            PlanetMessage errorMsg = new()
            {
                Content = $"Hey there, friend! Your message didn't post properly.\n Reason: {result.Message}",
                AuthorUserId = long.MaxValue,
                AuthorMemberId = long.MaxValue,
                ChannelId = Window.Channel.Id,
                MessageIndex = long.MaxValue
            };

            MessageHolder.RemoveErrorMessage();
            await MessageHolder.AddMessage(new ClientPlanetMessage(errorMsg));
        }
    }
}
